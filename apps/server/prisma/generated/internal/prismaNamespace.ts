
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * WARNING: This is an internal file that is subject to change!
 * 
 * ðŸ›‘ Under no circumstances should you import this file directly! ðŸ›‘
 * 
 * All exports from this file are wrapped under a `Prisma` namespace object in the client.ts file.
 * While this enables partial backward compatibility, it is not part of the stable public API.
 * 
 * If you are looking for your Models, Enums, and Input Types, please import them from the respective 
 * model files in the `model` directory!
 */

import * as runtime from "@prisma/client/runtime/library"
import type * as Prisma from "../models"
import { type PrismaClient } from "./class"

export type * from '../models'

export type DMMF = typeof runtime.DMMF

export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>

/**
 * Validator
 */
export const validator = runtime.Public.validator

/**
 * Prisma Errors
 */

export const PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
export type PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError

export const PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
export type PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError

export const PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
export type PrismaClientRustPanicError = runtime.PrismaClientRustPanicError

export const PrismaClientInitializationError = runtime.PrismaClientInitializationError
export type PrismaClientInitializationError = runtime.PrismaClientInitializationError

export const PrismaClientValidationError = runtime.PrismaClientValidationError
export type PrismaClientValidationError = runtime.PrismaClientValidationError

/**
 * Re-export of sql-template-tag
 */
export const sql = runtime.sqltag
export const empty = runtime.empty
export const join = runtime.join
export const raw = runtime.raw
export const Sql = runtime.Sql
export type Sql = runtime.Sql



/**
 * Decimal.js
 */
export const Decimal = runtime.Decimal
export type Decimal = runtime.Decimal

export type DecimalJsLike = runtime.DecimalJsLike

/**
 * Metrics
 */
export type Metrics = runtime.Metrics
export type Metric<T> = runtime.Metric<T>
export type MetricHistogram = runtime.MetricHistogram
export type MetricHistogramBucket = runtime.MetricHistogramBucket

/**
* Extensions
*/
export type Extension = runtime.Types.Extensions.UserArgs
export const getExtensionContext = runtime.Extensions.getExtensionContext
export type Args<T, F extends runtime.Operation> = runtime.Types.Public.Args<T, F>
export type Payload<T, F extends runtime.Operation = never> = runtime.Types.Public.Payload<T, F>
export type Result<T, A, F extends runtime.Operation> = runtime.Types.Public.Result<T, A, F>
export type Exact<A, W> = runtime.Types.Public.Exact<A, W>

export type PrismaVersion = {
  client: string
  engine: string
}

/**
 * Prisma Client JS version: 6.9.0
 * Query Engine version: 81e4af48011447c3cc503a190e86995b66d2a28e
 */
export const prismaVersion: PrismaVersion = {
  client: "6.9.0",
  engine: "81e4af48011447c3cc503a190e86995b66d2a28e"
}

/**
 * Utility Types
 */

export type JsonObject = runtime.JsonObject
export type JsonArray = runtime.JsonArray
export type JsonValue = runtime.JsonValue
export type InputJsonObject = runtime.InputJsonObject
export type InputJsonArray = runtime.InputJsonArray
export type InputJsonValue = runtime.InputJsonValue

export const NullTypes = {
  DbNull: runtime.objectEnumValues.classes.DbNull as (new (secret: never) => typeof runtime.objectEnumValues.instances.DbNull),
  JsonNull: runtime.objectEnumValues.classes.JsonNull as (new (secret: never) => typeof runtime.objectEnumValues.instances.JsonNull),
  AnyNull: runtime.objectEnumValues.classes.AnyNull as (new (secret: never) => typeof runtime.objectEnumValues.instances.AnyNull),
}

/**
 * Helper for filtering JSON entries that have `null` on the database (empty on the db)
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const DbNull = runtime.objectEnumValues.instances.DbNull

/**
 * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const JsonNull = runtime.objectEnumValues.instances.JsonNull

/**
 * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const AnyNull = runtime.objectEnumValues.instances.AnyNull

type SelectAndInclude = {
  select: any
  include: any
}

type SelectAndOmit = {
  select: any
  omit: any
}

/**
 * From T, pick a set of properties whose keys are in the union K
 */
type Prisma__Pick<T, K extends keyof T> = {
    [P in K]: T[P];
};

export type Enumerable<T> = T | Array<T>;

/**
 * Subset
 * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
 */
export type Subset<T, U> = {
  [key in keyof T]: key extends keyof U ? T[key] : never;
};

/**
 * SelectSubset
 * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
 * Additionally, it validates, if both select and include are present. If the case, it errors.
 */
export type SelectSubset<T, U> = {
  [key in keyof T]: key extends keyof U ? T[key] : never
} &
  (T extends SelectAndInclude
    ? 'Please either choose `select` or `include`.'
    : T extends SelectAndOmit
      ? 'Please either choose `select` or `omit`.'
      : {})

/**
 * Subset + Intersection
 * @desc From `T` pick properties that exist in `U` and intersect `K`
 */
export type SubsetIntersection<T, U, K> = {
  [key in keyof T]: key extends keyof U ? T[key] : never
} &
  K

type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

/**
 * XOR is needed to have a real mutually exclusive union type
 * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
 */
export type XOR<T, U> =
  T extends object ?
  U extends object ?
    (Without<T, U> & U) | (Without<U, T> & T)
  : U : T


/**
 * Is T a Record?
 */
type IsObject<T extends any> = T extends Array<any>
? False
: T extends Date
? False
: T extends Uint8Array
? False
: T extends BigInt
? False
: T extends object
? True
: False


/**
 * If it's T[], return T
 */
export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

/**
 * From ts-toolbelt
 */

type __Either<O extends object, K extends Key> = Omit<O, K> &
  {
    // Merge all but K
    [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
  }[K]

type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

type _Either<
  O extends object,
  K extends Key,
  strict extends Boolean
> = {
  1: EitherStrict<O, K>
  0: EitherLoose<O, K>
}[strict]

export type Either<
  O extends object,
  K extends Key,
  strict extends Boolean = 1
> = O extends unknown ? _Either<O, K, strict> : never

export type Union = any

export type PatchUndefined<O extends object, O1 extends object> = {
  [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
} & {}

/** Helper Types for "Merge" **/
export type IntersectOf<U extends Union> = (
  U extends unknown ? (k: U) => void : never
) extends (k: infer I) => void
  ? I
  : never

export type Overwrite<O extends object, O1 extends object> = {
    [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
} & {};

type _Merge<U extends object> = IntersectOf<Overwrite<U, {
    [K in keyof U]-?: At<U, K>;
}>>;

type Key = string | number | symbol;
type AtStrict<O extends object, K extends Key> = O[K & keyof O];
type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
    1: AtStrict<O, K>;
    0: AtLoose<O, K>;
}[strict];

export type ComputeRaw<A extends any> = A extends Function ? A : {
  [K in keyof A]: A[K];
} & {};

export type OptionalFlat<O> = {
  [K in keyof O]?: O[K];
} & {};

type _Record<K extends keyof any, T> = {
  [P in K]: T;
};

// cause typescript not to expand types and preserve names
type NoExpand<T> = T extends unknown ? T : never;

// this type assumes the passed object is entirely optional
export type AtLeast<O extends object, K extends string> = NoExpand<
  O extends unknown
  ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
    | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
  : never>;

type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
/** End Helper Types for "Merge" **/

export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

export type Boolean = True | False

export type True = 1

export type False = 0

export type Not<B extends Boolean> = {
  0: 1
  1: 0
}[B]

export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
  ? 0 // anything `never` is false
  : A1 extends A2
  ? 1
  : 0

export type Has<U extends Union, U1 extends Union> = Not<
  Extends<Exclude<U1, U>, U1>
>

export type Or<B1 extends Boolean, B2 extends Boolean> = {
  0: {
    0: 0
    1: 1
  }
  1: {
    0: 1
    1: 1
  }
}[B1][B2]

export type Keys<U extends Union> = U extends unknown ? keyof U : never

export type GetScalarType<T, O> = O extends object ? {
  [P in keyof T]: P extends keyof O
    ? O[P]
    : never
} : never

type FieldPaths<
  T,
  U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
> = IsObject<T> extends True ? U : T

export type GetHavingFields<T> = {
  [K in keyof T]: Or<
    Or<Extends<'OR', K>, Extends<'AND', K>>,
    Extends<'NOT', K>
  > extends True
    ? // infer is only needed to not hit TS limit
      // based on the brilliant idea of Pierre-Antoine Mills
      // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
      T[K] extends infer TK
      ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
      : never
    : {} extends FieldPaths<T[K]>
    ? never
    : K
}[keyof T]

/**
 * Convert tuple to union
 */
type _TupleToUnion<T> = T extends (infer E)[] ? E : never
type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
export type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

/**
 * Like `Pick`, but additionally can also accept an array of keys
 */
export type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

/**
 * Exclude all keys with underscores
 */
export type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


export const ModelName = {
  User: 'User',
  Session: 'Session',
  Account: 'Account',
  Verification: 'Verification',
  MediaServer: 'MediaServer',
  MediaLibrary: 'MediaLibrary',
  MediaShow: 'MediaShow',
  MediaEpisode: 'MediaEpisode',
  MediaMovie: 'MediaMovie',
  Channel: 'Channel',
  Program: 'Program',
  ChannelShow: 'ChannelShow',
  ChannelMovie: 'ChannelMovie',
  Settings: 'Settings',
  FfmpegSettings: 'FfmpegSettings',
  PlexSettings: 'PlexSettings',
  WebhookActivity: 'WebhookActivity'
} as const

export type ModelName = (typeof ModelName)[keyof typeof ModelName]



export interface TypeMapCb<ClientOptions = {}> extends runtime.Types.Utils.Fn<{extArgs: runtime.Types.Extensions.InternalArgs }, runtime.Types.Utils.Record<string, any>> {
  returns: TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
}

export type TypeMap<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
  globalOmitOptions: {
    omit: GlobalOmitOptions
  }
  meta: {
    modelProps: "user" | "session" | "account" | "verification" | "mediaServer" | "mediaLibrary" | "mediaShow" | "mediaEpisode" | "mediaMovie" | "channel" | "program" | "channelShow" | "channelMovie" | "settings" | "ffmpegSettings" | "plexSettings" | "webhookActivity"
    txIsolationLevel: TransactionIsolationLevel
  }
  model: {
    User: {
      payload: Prisma.$UserPayload<ExtArgs>
      fields: Prisma.UserFieldRefs
      operations: {
        findUnique: {
          args: Prisma.UserFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>
        }
        findFirst: {
          args: Prisma.UserFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>
        }
        findMany: {
          args: Prisma.UserFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>[]
        }
        create: {
          args: Prisma.UserCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>
        }
        createMany: {
          args: Prisma.UserCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>[]
        }
        delete: {
          args: Prisma.UserDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>
        }
        update: {
          args: Prisma.UserUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>
        }
        deleteMany: {
          args: Prisma.UserDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.UserUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>[]
        }
        upsert: {
          args: Prisma.UserUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>
        }
        aggregate: {
          args: Prisma.UserAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateUser>
        }
        groupBy: {
          args: Prisma.UserGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.UserGroupByOutputType>[]
        }
        count: {
          args: Prisma.UserCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.UserCountAggregateOutputType> | number
        }
      }
    }
    Session: {
      payload: Prisma.$SessionPayload<ExtArgs>
      fields: Prisma.SessionFieldRefs
      operations: {
        findUnique: {
          args: Prisma.SessionFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SessionPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.SessionFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SessionPayload>
        }
        findFirst: {
          args: Prisma.SessionFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SessionPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.SessionFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SessionPayload>
        }
        findMany: {
          args: Prisma.SessionFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SessionPayload>[]
        }
        create: {
          args: Prisma.SessionCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SessionPayload>
        }
        createMany: {
          args: Prisma.SessionCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.SessionCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SessionPayload>[]
        }
        delete: {
          args: Prisma.SessionDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SessionPayload>
        }
        update: {
          args: Prisma.SessionUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SessionPayload>
        }
        deleteMany: {
          args: Prisma.SessionDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.SessionUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.SessionUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SessionPayload>[]
        }
        upsert: {
          args: Prisma.SessionUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SessionPayload>
        }
        aggregate: {
          args: Prisma.SessionAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateSession>
        }
        groupBy: {
          args: Prisma.SessionGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.SessionGroupByOutputType>[]
        }
        count: {
          args: Prisma.SessionCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.SessionCountAggregateOutputType> | number
        }
      }
    }
    Account: {
      payload: Prisma.$AccountPayload<ExtArgs>
      fields: Prisma.AccountFieldRefs
      operations: {
        findUnique: {
          args: Prisma.AccountFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccountPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.AccountFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccountPayload>
        }
        findFirst: {
          args: Prisma.AccountFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccountPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.AccountFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccountPayload>
        }
        findMany: {
          args: Prisma.AccountFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccountPayload>[]
        }
        create: {
          args: Prisma.AccountCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccountPayload>
        }
        createMany: {
          args: Prisma.AccountCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.AccountCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccountPayload>[]
        }
        delete: {
          args: Prisma.AccountDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccountPayload>
        }
        update: {
          args: Prisma.AccountUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccountPayload>
        }
        deleteMany: {
          args: Prisma.AccountDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.AccountUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.AccountUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccountPayload>[]
        }
        upsert: {
          args: Prisma.AccountUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccountPayload>
        }
        aggregate: {
          args: Prisma.AccountAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateAccount>
        }
        groupBy: {
          args: Prisma.AccountGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AccountGroupByOutputType>[]
        }
        count: {
          args: Prisma.AccountCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AccountCountAggregateOutputType> | number
        }
      }
    }
    Verification: {
      payload: Prisma.$VerificationPayload<ExtArgs>
      fields: Prisma.VerificationFieldRefs
      operations: {
        findUnique: {
          args: Prisma.VerificationFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$VerificationPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.VerificationFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$VerificationPayload>
        }
        findFirst: {
          args: Prisma.VerificationFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$VerificationPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.VerificationFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$VerificationPayload>
        }
        findMany: {
          args: Prisma.VerificationFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$VerificationPayload>[]
        }
        create: {
          args: Prisma.VerificationCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$VerificationPayload>
        }
        createMany: {
          args: Prisma.VerificationCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.VerificationCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$VerificationPayload>[]
        }
        delete: {
          args: Prisma.VerificationDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$VerificationPayload>
        }
        update: {
          args: Prisma.VerificationUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$VerificationPayload>
        }
        deleteMany: {
          args: Prisma.VerificationDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.VerificationUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.VerificationUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$VerificationPayload>[]
        }
        upsert: {
          args: Prisma.VerificationUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$VerificationPayload>
        }
        aggregate: {
          args: Prisma.VerificationAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateVerification>
        }
        groupBy: {
          args: Prisma.VerificationGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.VerificationGroupByOutputType>[]
        }
        count: {
          args: Prisma.VerificationCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.VerificationCountAggregateOutputType> | number
        }
      }
    }
    MediaServer: {
      payload: Prisma.$MediaServerPayload<ExtArgs>
      fields: Prisma.MediaServerFieldRefs
      operations: {
        findUnique: {
          args: Prisma.MediaServerFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MediaServerPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.MediaServerFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MediaServerPayload>
        }
        findFirst: {
          args: Prisma.MediaServerFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MediaServerPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.MediaServerFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MediaServerPayload>
        }
        findMany: {
          args: Prisma.MediaServerFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MediaServerPayload>[]
        }
        create: {
          args: Prisma.MediaServerCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MediaServerPayload>
        }
        createMany: {
          args: Prisma.MediaServerCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.MediaServerCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MediaServerPayload>[]
        }
        delete: {
          args: Prisma.MediaServerDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MediaServerPayload>
        }
        update: {
          args: Prisma.MediaServerUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MediaServerPayload>
        }
        deleteMany: {
          args: Prisma.MediaServerDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.MediaServerUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.MediaServerUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MediaServerPayload>[]
        }
        upsert: {
          args: Prisma.MediaServerUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MediaServerPayload>
        }
        aggregate: {
          args: Prisma.MediaServerAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateMediaServer>
        }
        groupBy: {
          args: Prisma.MediaServerGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.MediaServerGroupByOutputType>[]
        }
        count: {
          args: Prisma.MediaServerCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.MediaServerCountAggregateOutputType> | number
        }
      }
    }
    MediaLibrary: {
      payload: Prisma.$MediaLibraryPayload<ExtArgs>
      fields: Prisma.MediaLibraryFieldRefs
      operations: {
        findUnique: {
          args: Prisma.MediaLibraryFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MediaLibraryPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.MediaLibraryFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MediaLibraryPayload>
        }
        findFirst: {
          args: Prisma.MediaLibraryFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MediaLibraryPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.MediaLibraryFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MediaLibraryPayload>
        }
        findMany: {
          args: Prisma.MediaLibraryFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MediaLibraryPayload>[]
        }
        create: {
          args: Prisma.MediaLibraryCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MediaLibraryPayload>
        }
        createMany: {
          args: Prisma.MediaLibraryCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.MediaLibraryCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MediaLibraryPayload>[]
        }
        delete: {
          args: Prisma.MediaLibraryDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MediaLibraryPayload>
        }
        update: {
          args: Prisma.MediaLibraryUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MediaLibraryPayload>
        }
        deleteMany: {
          args: Prisma.MediaLibraryDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.MediaLibraryUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.MediaLibraryUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MediaLibraryPayload>[]
        }
        upsert: {
          args: Prisma.MediaLibraryUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MediaLibraryPayload>
        }
        aggregate: {
          args: Prisma.MediaLibraryAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateMediaLibrary>
        }
        groupBy: {
          args: Prisma.MediaLibraryGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.MediaLibraryGroupByOutputType>[]
        }
        count: {
          args: Prisma.MediaLibraryCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.MediaLibraryCountAggregateOutputType> | number
        }
      }
    }
    MediaShow: {
      payload: Prisma.$MediaShowPayload<ExtArgs>
      fields: Prisma.MediaShowFieldRefs
      operations: {
        findUnique: {
          args: Prisma.MediaShowFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MediaShowPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.MediaShowFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MediaShowPayload>
        }
        findFirst: {
          args: Prisma.MediaShowFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MediaShowPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.MediaShowFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MediaShowPayload>
        }
        findMany: {
          args: Prisma.MediaShowFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MediaShowPayload>[]
        }
        create: {
          args: Prisma.MediaShowCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MediaShowPayload>
        }
        createMany: {
          args: Prisma.MediaShowCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.MediaShowCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MediaShowPayload>[]
        }
        delete: {
          args: Prisma.MediaShowDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MediaShowPayload>
        }
        update: {
          args: Prisma.MediaShowUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MediaShowPayload>
        }
        deleteMany: {
          args: Prisma.MediaShowDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.MediaShowUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.MediaShowUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MediaShowPayload>[]
        }
        upsert: {
          args: Prisma.MediaShowUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MediaShowPayload>
        }
        aggregate: {
          args: Prisma.MediaShowAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateMediaShow>
        }
        groupBy: {
          args: Prisma.MediaShowGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.MediaShowGroupByOutputType>[]
        }
        count: {
          args: Prisma.MediaShowCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.MediaShowCountAggregateOutputType> | number
        }
      }
    }
    MediaEpisode: {
      payload: Prisma.$MediaEpisodePayload<ExtArgs>
      fields: Prisma.MediaEpisodeFieldRefs
      operations: {
        findUnique: {
          args: Prisma.MediaEpisodeFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MediaEpisodePayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.MediaEpisodeFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MediaEpisodePayload>
        }
        findFirst: {
          args: Prisma.MediaEpisodeFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MediaEpisodePayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.MediaEpisodeFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MediaEpisodePayload>
        }
        findMany: {
          args: Prisma.MediaEpisodeFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MediaEpisodePayload>[]
        }
        create: {
          args: Prisma.MediaEpisodeCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MediaEpisodePayload>
        }
        createMany: {
          args: Prisma.MediaEpisodeCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.MediaEpisodeCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MediaEpisodePayload>[]
        }
        delete: {
          args: Prisma.MediaEpisodeDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MediaEpisodePayload>
        }
        update: {
          args: Prisma.MediaEpisodeUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MediaEpisodePayload>
        }
        deleteMany: {
          args: Prisma.MediaEpisodeDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.MediaEpisodeUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.MediaEpisodeUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MediaEpisodePayload>[]
        }
        upsert: {
          args: Prisma.MediaEpisodeUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MediaEpisodePayload>
        }
        aggregate: {
          args: Prisma.MediaEpisodeAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateMediaEpisode>
        }
        groupBy: {
          args: Prisma.MediaEpisodeGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.MediaEpisodeGroupByOutputType>[]
        }
        count: {
          args: Prisma.MediaEpisodeCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.MediaEpisodeCountAggregateOutputType> | number
        }
      }
    }
    MediaMovie: {
      payload: Prisma.$MediaMoviePayload<ExtArgs>
      fields: Prisma.MediaMovieFieldRefs
      operations: {
        findUnique: {
          args: Prisma.MediaMovieFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MediaMoviePayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.MediaMovieFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MediaMoviePayload>
        }
        findFirst: {
          args: Prisma.MediaMovieFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MediaMoviePayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.MediaMovieFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MediaMoviePayload>
        }
        findMany: {
          args: Prisma.MediaMovieFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MediaMoviePayload>[]
        }
        create: {
          args: Prisma.MediaMovieCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MediaMoviePayload>
        }
        createMany: {
          args: Prisma.MediaMovieCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.MediaMovieCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MediaMoviePayload>[]
        }
        delete: {
          args: Prisma.MediaMovieDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MediaMoviePayload>
        }
        update: {
          args: Prisma.MediaMovieUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MediaMoviePayload>
        }
        deleteMany: {
          args: Prisma.MediaMovieDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.MediaMovieUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.MediaMovieUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MediaMoviePayload>[]
        }
        upsert: {
          args: Prisma.MediaMovieUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MediaMoviePayload>
        }
        aggregate: {
          args: Prisma.MediaMovieAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateMediaMovie>
        }
        groupBy: {
          args: Prisma.MediaMovieGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.MediaMovieGroupByOutputType>[]
        }
        count: {
          args: Prisma.MediaMovieCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.MediaMovieCountAggregateOutputType> | number
        }
      }
    }
    Channel: {
      payload: Prisma.$ChannelPayload<ExtArgs>
      fields: Prisma.ChannelFieldRefs
      operations: {
        findUnique: {
          args: Prisma.ChannelFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ChannelPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.ChannelFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ChannelPayload>
        }
        findFirst: {
          args: Prisma.ChannelFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ChannelPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.ChannelFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ChannelPayload>
        }
        findMany: {
          args: Prisma.ChannelFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ChannelPayload>[]
        }
        create: {
          args: Prisma.ChannelCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ChannelPayload>
        }
        createMany: {
          args: Prisma.ChannelCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.ChannelCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ChannelPayload>[]
        }
        delete: {
          args: Prisma.ChannelDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ChannelPayload>
        }
        update: {
          args: Prisma.ChannelUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ChannelPayload>
        }
        deleteMany: {
          args: Prisma.ChannelDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.ChannelUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.ChannelUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ChannelPayload>[]
        }
        upsert: {
          args: Prisma.ChannelUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ChannelPayload>
        }
        aggregate: {
          args: Prisma.ChannelAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateChannel>
        }
        groupBy: {
          args: Prisma.ChannelGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ChannelGroupByOutputType>[]
        }
        count: {
          args: Prisma.ChannelCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ChannelCountAggregateOutputType> | number
        }
      }
    }
    Program: {
      payload: Prisma.$ProgramPayload<ExtArgs>
      fields: Prisma.ProgramFieldRefs
      operations: {
        findUnique: {
          args: Prisma.ProgramFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProgramPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.ProgramFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProgramPayload>
        }
        findFirst: {
          args: Prisma.ProgramFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProgramPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.ProgramFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProgramPayload>
        }
        findMany: {
          args: Prisma.ProgramFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProgramPayload>[]
        }
        create: {
          args: Prisma.ProgramCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProgramPayload>
        }
        createMany: {
          args: Prisma.ProgramCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.ProgramCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProgramPayload>[]
        }
        delete: {
          args: Prisma.ProgramDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProgramPayload>
        }
        update: {
          args: Prisma.ProgramUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProgramPayload>
        }
        deleteMany: {
          args: Prisma.ProgramDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.ProgramUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.ProgramUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProgramPayload>[]
        }
        upsert: {
          args: Prisma.ProgramUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProgramPayload>
        }
        aggregate: {
          args: Prisma.ProgramAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateProgram>
        }
        groupBy: {
          args: Prisma.ProgramGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ProgramGroupByOutputType>[]
        }
        count: {
          args: Prisma.ProgramCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ProgramCountAggregateOutputType> | number
        }
      }
    }
    ChannelShow: {
      payload: Prisma.$ChannelShowPayload<ExtArgs>
      fields: Prisma.ChannelShowFieldRefs
      operations: {
        findUnique: {
          args: Prisma.ChannelShowFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ChannelShowPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.ChannelShowFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ChannelShowPayload>
        }
        findFirst: {
          args: Prisma.ChannelShowFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ChannelShowPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.ChannelShowFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ChannelShowPayload>
        }
        findMany: {
          args: Prisma.ChannelShowFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ChannelShowPayload>[]
        }
        create: {
          args: Prisma.ChannelShowCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ChannelShowPayload>
        }
        createMany: {
          args: Prisma.ChannelShowCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.ChannelShowCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ChannelShowPayload>[]
        }
        delete: {
          args: Prisma.ChannelShowDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ChannelShowPayload>
        }
        update: {
          args: Prisma.ChannelShowUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ChannelShowPayload>
        }
        deleteMany: {
          args: Prisma.ChannelShowDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.ChannelShowUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.ChannelShowUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ChannelShowPayload>[]
        }
        upsert: {
          args: Prisma.ChannelShowUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ChannelShowPayload>
        }
        aggregate: {
          args: Prisma.ChannelShowAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateChannelShow>
        }
        groupBy: {
          args: Prisma.ChannelShowGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ChannelShowGroupByOutputType>[]
        }
        count: {
          args: Prisma.ChannelShowCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ChannelShowCountAggregateOutputType> | number
        }
      }
    }
    ChannelMovie: {
      payload: Prisma.$ChannelMoviePayload<ExtArgs>
      fields: Prisma.ChannelMovieFieldRefs
      operations: {
        findUnique: {
          args: Prisma.ChannelMovieFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ChannelMoviePayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.ChannelMovieFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ChannelMoviePayload>
        }
        findFirst: {
          args: Prisma.ChannelMovieFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ChannelMoviePayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.ChannelMovieFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ChannelMoviePayload>
        }
        findMany: {
          args: Prisma.ChannelMovieFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ChannelMoviePayload>[]
        }
        create: {
          args: Prisma.ChannelMovieCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ChannelMoviePayload>
        }
        createMany: {
          args: Prisma.ChannelMovieCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.ChannelMovieCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ChannelMoviePayload>[]
        }
        delete: {
          args: Prisma.ChannelMovieDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ChannelMoviePayload>
        }
        update: {
          args: Prisma.ChannelMovieUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ChannelMoviePayload>
        }
        deleteMany: {
          args: Prisma.ChannelMovieDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.ChannelMovieUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.ChannelMovieUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ChannelMoviePayload>[]
        }
        upsert: {
          args: Prisma.ChannelMovieUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ChannelMoviePayload>
        }
        aggregate: {
          args: Prisma.ChannelMovieAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateChannelMovie>
        }
        groupBy: {
          args: Prisma.ChannelMovieGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ChannelMovieGroupByOutputType>[]
        }
        count: {
          args: Prisma.ChannelMovieCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ChannelMovieCountAggregateOutputType> | number
        }
      }
    }
    Settings: {
      payload: Prisma.$SettingsPayload<ExtArgs>
      fields: Prisma.SettingsFieldRefs
      operations: {
        findUnique: {
          args: Prisma.SettingsFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SettingsPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.SettingsFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SettingsPayload>
        }
        findFirst: {
          args: Prisma.SettingsFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SettingsPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.SettingsFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SettingsPayload>
        }
        findMany: {
          args: Prisma.SettingsFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SettingsPayload>[]
        }
        create: {
          args: Prisma.SettingsCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SettingsPayload>
        }
        createMany: {
          args: Prisma.SettingsCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.SettingsCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SettingsPayload>[]
        }
        delete: {
          args: Prisma.SettingsDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SettingsPayload>
        }
        update: {
          args: Prisma.SettingsUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SettingsPayload>
        }
        deleteMany: {
          args: Prisma.SettingsDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.SettingsUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.SettingsUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SettingsPayload>[]
        }
        upsert: {
          args: Prisma.SettingsUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SettingsPayload>
        }
        aggregate: {
          args: Prisma.SettingsAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateSettings>
        }
        groupBy: {
          args: Prisma.SettingsGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.SettingsGroupByOutputType>[]
        }
        count: {
          args: Prisma.SettingsCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.SettingsCountAggregateOutputType> | number
        }
      }
    }
    FfmpegSettings: {
      payload: Prisma.$FfmpegSettingsPayload<ExtArgs>
      fields: Prisma.FfmpegSettingsFieldRefs
      operations: {
        findUnique: {
          args: Prisma.FfmpegSettingsFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FfmpegSettingsPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.FfmpegSettingsFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FfmpegSettingsPayload>
        }
        findFirst: {
          args: Prisma.FfmpegSettingsFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FfmpegSettingsPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.FfmpegSettingsFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FfmpegSettingsPayload>
        }
        findMany: {
          args: Prisma.FfmpegSettingsFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FfmpegSettingsPayload>[]
        }
        create: {
          args: Prisma.FfmpegSettingsCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FfmpegSettingsPayload>
        }
        createMany: {
          args: Prisma.FfmpegSettingsCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.FfmpegSettingsCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FfmpegSettingsPayload>[]
        }
        delete: {
          args: Prisma.FfmpegSettingsDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FfmpegSettingsPayload>
        }
        update: {
          args: Prisma.FfmpegSettingsUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FfmpegSettingsPayload>
        }
        deleteMany: {
          args: Prisma.FfmpegSettingsDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.FfmpegSettingsUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.FfmpegSettingsUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FfmpegSettingsPayload>[]
        }
        upsert: {
          args: Prisma.FfmpegSettingsUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FfmpegSettingsPayload>
        }
        aggregate: {
          args: Prisma.FfmpegSettingsAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateFfmpegSettings>
        }
        groupBy: {
          args: Prisma.FfmpegSettingsGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.FfmpegSettingsGroupByOutputType>[]
        }
        count: {
          args: Prisma.FfmpegSettingsCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.FfmpegSettingsCountAggregateOutputType> | number
        }
      }
    }
    PlexSettings: {
      payload: Prisma.$PlexSettingsPayload<ExtArgs>
      fields: Prisma.PlexSettingsFieldRefs
      operations: {
        findUnique: {
          args: Prisma.PlexSettingsFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PlexSettingsPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.PlexSettingsFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PlexSettingsPayload>
        }
        findFirst: {
          args: Prisma.PlexSettingsFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PlexSettingsPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.PlexSettingsFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PlexSettingsPayload>
        }
        findMany: {
          args: Prisma.PlexSettingsFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PlexSettingsPayload>[]
        }
        create: {
          args: Prisma.PlexSettingsCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PlexSettingsPayload>
        }
        createMany: {
          args: Prisma.PlexSettingsCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.PlexSettingsCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PlexSettingsPayload>[]
        }
        delete: {
          args: Prisma.PlexSettingsDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PlexSettingsPayload>
        }
        update: {
          args: Prisma.PlexSettingsUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PlexSettingsPayload>
        }
        deleteMany: {
          args: Prisma.PlexSettingsDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.PlexSettingsUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.PlexSettingsUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PlexSettingsPayload>[]
        }
        upsert: {
          args: Prisma.PlexSettingsUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PlexSettingsPayload>
        }
        aggregate: {
          args: Prisma.PlexSettingsAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregatePlexSettings>
        }
        groupBy: {
          args: Prisma.PlexSettingsGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.PlexSettingsGroupByOutputType>[]
        }
        count: {
          args: Prisma.PlexSettingsCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.PlexSettingsCountAggregateOutputType> | number
        }
      }
    }
    WebhookActivity: {
      payload: Prisma.$WebhookActivityPayload<ExtArgs>
      fields: Prisma.WebhookActivityFieldRefs
      operations: {
        findUnique: {
          args: Prisma.WebhookActivityFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WebhookActivityPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.WebhookActivityFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WebhookActivityPayload>
        }
        findFirst: {
          args: Prisma.WebhookActivityFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WebhookActivityPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.WebhookActivityFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WebhookActivityPayload>
        }
        findMany: {
          args: Prisma.WebhookActivityFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WebhookActivityPayload>[]
        }
        create: {
          args: Prisma.WebhookActivityCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WebhookActivityPayload>
        }
        createMany: {
          args: Prisma.WebhookActivityCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.WebhookActivityCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WebhookActivityPayload>[]
        }
        delete: {
          args: Prisma.WebhookActivityDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WebhookActivityPayload>
        }
        update: {
          args: Prisma.WebhookActivityUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WebhookActivityPayload>
        }
        deleteMany: {
          args: Prisma.WebhookActivityDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.WebhookActivityUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.WebhookActivityUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WebhookActivityPayload>[]
        }
        upsert: {
          args: Prisma.WebhookActivityUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WebhookActivityPayload>
        }
        aggregate: {
          args: Prisma.WebhookActivityAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateWebhookActivity>
        }
        groupBy: {
          args: Prisma.WebhookActivityGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.WebhookActivityGroupByOutputType>[]
        }
        count: {
          args: Prisma.WebhookActivityCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.WebhookActivityCountAggregateOutputType> | number
        }
      }
    }
  }
} & {
  other: {
    payload: any
    operations: {
      $executeRaw: {
        args: [query: TemplateStringsArray | Sql, ...values: any[]],
        result: any
      }
      $executeRawUnsafe: {
        args: [query: string, ...values: any[]],
        result: any
      }
      $queryRaw: {
        args: [query: TemplateStringsArray | Sql, ...values: any[]],
        result: any
      }
      $queryRawUnsafe: {
        args: [query: string, ...values: any[]],
        result: any
      }
    }
  }
}

/**
 * Enums
 */

export const TransactionIsolationLevel = runtime.makeStrictEnum({
  Serializable: 'Serializable'
} as const)

export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


export const UserScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  emailVerified: 'emailVerified',
  image: 'image',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  watchTowerJoinDate: 'watchTowerJoinDate'
} as const

export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


export const SessionScalarFieldEnum = {
  id: 'id',
  expiresAt: 'expiresAt',
  token: 'token',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  userId: 'userId'
} as const

export type SessionScalarFieldEnum = (typeof SessionScalarFieldEnum)[keyof typeof SessionScalarFieldEnum]


export const AccountScalarFieldEnum = {
  id: 'id',
  accountId: 'accountId',
  providerId: 'providerId',
  userId: 'userId',
  accessToken: 'accessToken',
  refreshToken: 'refreshToken',
  idToken: 'idToken',
  accessTokenExpiresAt: 'accessTokenExpiresAt',
  refreshTokenExpiresAt: 'refreshTokenExpiresAt',
  scope: 'scope',
  password: 'password',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type AccountScalarFieldEnum = (typeof AccountScalarFieldEnum)[keyof typeof AccountScalarFieldEnum]


export const VerificationScalarFieldEnum = {
  id: 'id',
  identifier: 'identifier',
  value: 'value',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type VerificationScalarFieldEnum = (typeof VerificationScalarFieldEnum)[keyof typeof VerificationScalarFieldEnum]


export const MediaServerScalarFieldEnum = {
  id: 'id',
  name: 'name',
  url: 'url',
  token: 'token',
  type: 'type',
  active: 'active',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type MediaServerScalarFieldEnum = (typeof MediaServerScalarFieldEnum)[keyof typeof MediaServerScalarFieldEnum]


export const MediaLibraryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  key: 'key',
  type: 'type',
  serverId: 'serverId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type MediaLibraryScalarFieldEnum = (typeof MediaLibraryScalarFieldEnum)[keyof typeof MediaLibraryScalarFieldEnum]


export const MediaShowScalarFieldEnum = {
  id: 'id',
  title: 'title',
  year: 'year',
  summary: 'summary',
  poster: 'poster',
  backdrop: 'backdrop',
  ratingKey: 'ratingKey',
  studio: 'studio',
  contentRating: 'contentRating',
  genres: 'genres',
  directors: 'directors',
  writers: 'writers',
  actors: 'actors',
  countries: 'countries',
  libraryId: 'libraryId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type MediaShowScalarFieldEnum = (typeof MediaShowScalarFieldEnum)[keyof typeof MediaShowScalarFieldEnum]


export const MediaEpisodeScalarFieldEnum = {
  id: 'id',
  title: 'title',
  summary: 'summary',
  duration: 'duration',
  seasonNumber: 'seasonNumber',
  episodeNumber: 'episodeNumber',
  thumb: 'thumb',
  ratingKey: 'ratingKey',
  showId: 'showId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type MediaEpisodeScalarFieldEnum = (typeof MediaEpisodeScalarFieldEnum)[keyof typeof MediaEpisodeScalarFieldEnum]


export const MediaMovieScalarFieldEnum = {
  id: 'id',
  title: 'title',
  year: 'year',
  summary: 'summary',
  poster: 'poster',
  backdrop: 'backdrop',
  duration: 'duration',
  ratingKey: 'ratingKey',
  studio: 'studio',
  contentRating: 'contentRating',
  genres: 'genres',
  directors: 'directors',
  writers: 'writers',
  actors: 'actors',
  countries: 'countries',
  libraryId: 'libraryId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type MediaMovieScalarFieldEnum = (typeof MediaMovieScalarFieldEnum)[keyof typeof MediaMovieScalarFieldEnum]


export const ChannelScalarFieldEnum = {
  id: 'id',
  number: 'number',
  name: 'name',
  icon: 'icon',
  stealth: 'stealth',
  groupTitle: 'groupTitle',
  startTime: 'startTime',
  iconWidth: 'iconWidth',
  iconDuration: 'iconDuration',
  iconPosition: 'iconPosition',
  guideFlexPlaceholder: 'guideFlexPlaceholder',
  guideMinimumDurationSeconds: 'guideMinimumDurationSeconds',
  isOnDemand: 'isOnDemand',
  onDemandModulo: 'onDemandModulo',
  episodeMemoryEnabled: 'episodeMemoryEnabled',
  autoFilterEnabled: 'autoFilterEnabled',
  filterGenres: 'filterGenres',
  filterActors: 'filterActors',
  filterDirectors: 'filterDirectors',
  filterStudios: 'filterStudios',
  filterYearStart: 'filterYearStart',
  filterYearEnd: 'filterYearEnd',
  filterRating: 'filterRating',
  filterType: 'filterType',
  lastAutoScanAt: 'lastAutoScanAt',
  defaultEpisodeOrder: 'defaultEpisodeOrder',
  respectEpisodeOrder: 'respectEpisodeOrder',
  blockShuffle: 'blockShuffle',
  blockShuffleSize: 'blockShuffleSize',
  autoSortMethod: 'autoSortMethod',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type ChannelScalarFieldEnum = (typeof ChannelScalarFieldEnum)[keyof typeof ChannelScalarFieldEnum]


export const ProgramScalarFieldEnum = {
  id: 'id',
  channelId: 'channelId',
  episodeId: 'episodeId',
  movieId: 'movieId',
  startTime: 'startTime',
  duration: 'duration',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type ProgramScalarFieldEnum = (typeof ProgramScalarFieldEnum)[keyof typeof ProgramScalarFieldEnum]


export const ChannelShowScalarFieldEnum = {
  id: 'id',
  channelId: 'channelId',
  showId: 'showId',
  order: 'order',
  weight: 'weight',
  shuffle: 'shuffle',
  shuffleOrder: 'shuffleOrder',
  blockShuffle: 'blockShuffle',
  blockShuffleSize: 'blockShuffleSize',
  lastPlayedEpisodeId: 'lastPlayedEpisodeId',
  lastPlayedAt: 'lastPlayedAt',
  respectOrder: 'respectOrder',
  maxConsecutiveEpisodes: 'maxConsecutiveEpisodes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type ChannelShowScalarFieldEnum = (typeof ChannelShowScalarFieldEnum)[keyof typeof ChannelShowScalarFieldEnum]


export const ChannelMovieScalarFieldEnum = {
  id: 'id',
  channelId: 'channelId',
  movieId: 'movieId',
  order: 'order',
  weight: 'weight',
  shuffle: 'shuffle',
  maxConsecutiveMovies: 'maxConsecutiveMovies',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type ChannelMovieScalarFieldEnum = (typeof ChannelMovieScalarFieldEnum)[keyof typeof ChannelMovieScalarFieldEnum]


export const SettingsScalarFieldEnum = {
  id: 'id',
  port: 'port',
  ffmpegPath: 'ffmpegPath',
  concurrentStreams: 'concurrentStreams',
  hdhrActive: 'hdhrActive',
  hdhrDeviceId: 'hdhrDeviceId',
  hdhrFriendlyName: 'hdhrFriendlyName',
  hdhrTunerCount: 'hdhrTunerCount',
  guideDays: 'guideDays',
  watchTowerEnabled: 'watchTowerEnabled',
  watchTowerUrl: 'watchTowerUrl',
  watchTowerUsername: 'watchTowerUsername',
  watchTowerPassword: 'watchTowerPassword',
  watchTowerAutoSync: 'watchTowerAutoSync',
  watchTowerSyncInterval: 'watchTowerSyncInterval',
  watchTowerLastSync: 'watchTowerLastSync',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type SettingsScalarFieldEnum = (typeof SettingsScalarFieldEnum)[keyof typeof SettingsScalarFieldEnum]


export const FfmpegSettingsScalarFieldEnum = {
  id: 'id',
  ffmpegPath: 'ffmpegPath',
  ffprobePath: 'ffprobePath',
  pathLocked: 'pathLocked',
  autoDetectPath: 'autoDetectPath',
  enableTranscoding: 'enableTranscoding',
  targetResolution: 'targetResolution',
  videoBitrate: 'videoBitrate',
  videoBufSize: 'videoBufSize',
  videoCodec: 'videoCodec',
  audioCodec: 'audioCodec',
  audioSampleRate: 'audioSampleRate',
  audioBitrate: 'audioBitrate',
  audioChannels: 'audioChannels',
  enableHardwareAccel: 'enableHardwareAccel',
  hardwareAccelType: 'hardwareAccelType',
  hardwareDevice: 'hardwareDevice',
  videoPreset: 'videoPreset',
  videoCrf: 'videoCrf',
  maxMuxingQueueSize: 'maxMuxingQueueSize',
  threads: 'threads',
  outputFormat: 'outputFormat',
  segmentTime: 'segmentTime',
  segmentListSize: 'segmentListSize',
  errorScreen: 'errorScreen',
  errorAudio: 'errorAudio',
  logLevel: 'logLevel',
  enableStats: 'enableStats',
  statsFilePath: 'statsFilePath',
  globalOptions: 'globalOptions',
  inputOptions: 'inputOptions',
  outputOptions: 'outputOptions',
  settingsId: 'settingsId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type FfmpegSettingsScalarFieldEnum = (typeof FfmpegSettingsScalarFieldEnum)[keyof typeof FfmpegSettingsScalarFieldEnum]


export const PlexSettingsScalarFieldEnum = {
  id: 'id',
  url: 'url',
  token: 'token',
  autoRefreshLibraries: 'autoRefreshLibraries',
  refreshInterval: 'refreshInterval',
  arGuide: 'arGuide',
  arChannels: 'arChannels',
  webhookEnabled: 'webhookEnabled',
  connectionTimeout: 'connectionTimeout',
  requestTimeout: 'requestTimeout',
  settingsId: 'settingsId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type PlexSettingsScalarFieldEnum = (typeof PlexSettingsScalarFieldEnum)[keyof typeof PlexSettingsScalarFieldEnum]


export const WebhookActivityScalarFieldEnum = {
  id: 'id',
  source: 'source',
  serverName: 'serverName',
  serverId: 'serverId',
  eventType: 'eventType',
  contentType: 'contentType',
  contentTitle: 'contentTitle',
  contentId: 'contentId',
  status: 'status',
  errorMessage: 'errorMessage',
  payload: 'payload',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type WebhookActivityScalarFieldEnum = (typeof WebhookActivityScalarFieldEnum)[keyof typeof WebhookActivityScalarFieldEnum]


export const SortOrder = {
  asc: 'asc',
  desc: 'desc'
} as const

export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


export const NullsOrder = {
  first: 'first',
  last: 'last'
} as const

export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]



/**
 * Field references 
 */


/**
 * Reference to a field of type 'String'
 */
export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


/**
 * Reference to a field of type 'Boolean'
 */
export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


/**
 * Reference to a field of type 'DateTime'
 */
export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


/**
 * Reference to a field of type 'ServerType'
 */
export type EnumServerTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ServerType'>
    


/**
 * Reference to a field of type 'LibraryType'
 */
export type EnumLibraryTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'LibraryType'>
    


/**
 * Reference to a field of type 'Int'
 */
export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


/**
 * Reference to a field of type 'Float'
 */
export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    

/**
 * Batch Payload for updateMany & deleteMany & createMany
 */
export type BatchPayload = {
  count: number
}


export type Datasource = {
  url?: string
}
export type Datasources = {
  db?: Datasource
}

export const defineExtension = runtime.Extensions.defineExtension as unknown as runtime.Types.Extensions.ExtendsHook<"define", TypeMapCb, runtime.Types.Extensions.DefaultArgs>
export type DefaultPrismaClient = PrismaClient
export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
export interface PrismaClientOptions {
  /**
   * Overwrites the datasource url from your schema.prisma file
   */
  datasources?: Datasources
  /**
   * Overwrites the datasource url from your schema.prisma file
   */
  datasourceUrl?: string
  /**
   * @default "colorless"
   */
  errorFormat?: ErrorFormat
  /**
   * @example
   * ```
   * // Defaults to stdout
   * log: ['query', 'info', 'warn', 'error']
   * 
   * // Emit as events
   * log: [
   *   { emit: 'stdout', level: 'query' },
   *   { emit: 'stdout', level: 'info' },
   *   { emit: 'stdout', level: 'warn' }
   *   { emit: 'stdout', level: 'error' }
   * ]
   * ```
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
   */
  log?: (LogLevel | LogDefinition)[]
  /**
   * The default values for transactionOptions
   * maxWait ?= 2000
   * timeout ?= 5000
   */
  transactionOptions?: {
    maxWait?: number
    timeout?: number
    isolationLevel?: TransactionIsolationLevel
  }
  /**
   * Global configuration for omitting model fields by default.
   * 
   * @example
   * ```
   * const prisma = new PrismaClient({
   *   omit: {
   *     user: {
   *       password: true
   *     }
   *   }
   * })
   * ```
   */
  omit?: GlobalOmitConfig
}
export type GlobalOmitConfig = {
  user?: Prisma.UserOmit
  session?: Prisma.SessionOmit
  account?: Prisma.AccountOmit
  verification?: Prisma.VerificationOmit
  mediaServer?: Prisma.MediaServerOmit
  mediaLibrary?: Prisma.MediaLibraryOmit
  mediaShow?: Prisma.MediaShowOmit
  mediaEpisode?: Prisma.MediaEpisodeOmit
  mediaMovie?: Prisma.MediaMovieOmit
  channel?: Prisma.ChannelOmit
  program?: Prisma.ProgramOmit
  channelShow?: Prisma.ChannelShowOmit
  channelMovie?: Prisma.ChannelMovieOmit
  settings?: Prisma.SettingsOmit
  ffmpegSettings?: Prisma.FfmpegSettingsOmit
  plexSettings?: Prisma.PlexSettingsOmit
  webhookActivity?: Prisma.WebhookActivityOmit
}

/* Types for Logging */
export type LogLevel = 'info' | 'query' | 'warn' | 'error'
export type LogDefinition = {
  level: LogLevel
  emit: 'stdout' | 'event'
}

export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
  GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
  : never

export type QueryEvent = {
  timestamp: Date
  query: string
  params: string
  duration: number
  target: string
}

export type LogEvent = {
  timestamp: Date
  message: string
  target: string
}
/* End Types for Logging */


export type PrismaAction =
  | 'findUnique'
  | 'findUniqueOrThrow'
  | 'findMany'
  | 'findFirst'
  | 'findFirstOrThrow'
  | 'create'
  | 'createMany'
  | 'createManyAndReturn'
  | 'update'
  | 'updateMany'
  | 'updateManyAndReturn'
  | 'upsert'
  | 'delete'
  | 'deleteMany'
  | 'executeRaw'
  | 'queryRaw'
  | 'aggregate'
  | 'count'
  | 'runCommandRaw'
  | 'findRaw' 
  | 'groupBy'

/**
 * These options are being passed into the middleware as "params"
 */
export type MiddlewareParams = {
  model?: ModelName
  action: PrismaAction
  args: any
  dataPath: string[]
  runInTransaction: boolean
}

/**
 * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
 */
export type Middleware<T = any> = (
  params: MiddlewareParams,
  next: (params: MiddlewareParams) => runtime.Types.Utils.JsPromise<T>,
) => runtime.Types.Utils.JsPromise<T>

/**
 * `PrismaClient` proxy available in interactive transactions.
 */
export type TransactionClient = Omit<DefaultPrismaClient, runtime.ITXClientDenyList>

