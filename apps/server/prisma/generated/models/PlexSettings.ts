
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `PlexSettings` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model PlexSettings
 * 
 */
export type PlexSettingsModel = runtime.Types.Result.DefaultSelection<Prisma.$PlexSettingsPayload>

export type AggregatePlexSettings = {
  _count: PlexSettingsCountAggregateOutputType | null
  _avg: PlexSettingsAvgAggregateOutputType | null
  _sum: PlexSettingsSumAggregateOutputType | null
  _min: PlexSettingsMinAggregateOutputType | null
  _max: PlexSettingsMaxAggregateOutputType | null
}

export type PlexSettingsAvgAggregateOutputType = {
  refreshInterval: number | null
  connectionTimeout: number | null
  requestTimeout: number | null
}

export type PlexSettingsSumAggregateOutputType = {
  refreshInterval: number | null
  connectionTimeout: number | null
  requestTimeout: number | null
}

export type PlexSettingsMinAggregateOutputType = {
  id: string | null
  url: string | null
  token: string | null
  autoRefreshLibraries: boolean | null
  refreshInterval: number | null
  arGuide: boolean | null
  arChannels: boolean | null
  webhookEnabled: boolean | null
  connectionTimeout: number | null
  requestTimeout: number | null
  settingsId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type PlexSettingsMaxAggregateOutputType = {
  id: string | null
  url: string | null
  token: string | null
  autoRefreshLibraries: boolean | null
  refreshInterval: number | null
  arGuide: boolean | null
  arChannels: boolean | null
  webhookEnabled: boolean | null
  connectionTimeout: number | null
  requestTimeout: number | null
  settingsId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type PlexSettingsCountAggregateOutputType = {
  id: number
  url: number
  token: number
  autoRefreshLibraries: number
  refreshInterval: number
  arGuide: number
  arChannels: number
  webhookEnabled: number
  connectionTimeout: number
  requestTimeout: number
  settingsId: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type PlexSettingsAvgAggregateInputType = {
  refreshInterval?: true
  connectionTimeout?: true
  requestTimeout?: true
}

export type PlexSettingsSumAggregateInputType = {
  refreshInterval?: true
  connectionTimeout?: true
  requestTimeout?: true
}

export type PlexSettingsMinAggregateInputType = {
  id?: true
  url?: true
  token?: true
  autoRefreshLibraries?: true
  refreshInterval?: true
  arGuide?: true
  arChannels?: true
  webhookEnabled?: true
  connectionTimeout?: true
  requestTimeout?: true
  settingsId?: true
  createdAt?: true
  updatedAt?: true
}

export type PlexSettingsMaxAggregateInputType = {
  id?: true
  url?: true
  token?: true
  autoRefreshLibraries?: true
  refreshInterval?: true
  arGuide?: true
  arChannels?: true
  webhookEnabled?: true
  connectionTimeout?: true
  requestTimeout?: true
  settingsId?: true
  createdAt?: true
  updatedAt?: true
}

export type PlexSettingsCountAggregateInputType = {
  id?: true
  url?: true
  token?: true
  autoRefreshLibraries?: true
  refreshInterval?: true
  arGuide?: true
  arChannels?: true
  webhookEnabled?: true
  connectionTimeout?: true
  requestTimeout?: true
  settingsId?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type PlexSettingsAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which PlexSettings to aggregate.
   */
  where?: Prisma.PlexSettingsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PlexSettings to fetch.
   */
  orderBy?: Prisma.PlexSettingsOrderByWithRelationInput | Prisma.PlexSettingsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.PlexSettingsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PlexSettings from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PlexSettings.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned PlexSettings
  **/
  _count?: true | PlexSettingsCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: PlexSettingsAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: PlexSettingsSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: PlexSettingsMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: PlexSettingsMaxAggregateInputType
}

export type GetPlexSettingsAggregateType<T extends PlexSettingsAggregateArgs> = {
      [P in keyof T & keyof AggregatePlexSettings]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregatePlexSettings[P]>
    : Prisma.GetScalarType<T[P], AggregatePlexSettings[P]>
}




export type PlexSettingsGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.PlexSettingsWhereInput
  orderBy?: Prisma.PlexSettingsOrderByWithAggregationInput | Prisma.PlexSettingsOrderByWithAggregationInput[]
  by: Prisma.PlexSettingsScalarFieldEnum[] | Prisma.PlexSettingsScalarFieldEnum
  having?: Prisma.PlexSettingsScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: PlexSettingsCountAggregateInputType | true
  _avg?: PlexSettingsAvgAggregateInputType
  _sum?: PlexSettingsSumAggregateInputType
  _min?: PlexSettingsMinAggregateInputType
  _max?: PlexSettingsMaxAggregateInputType
}

export type PlexSettingsGroupByOutputType = {
  id: string
  url: string
  token: string
  autoRefreshLibraries: boolean
  refreshInterval: number
  arGuide: boolean
  arChannels: boolean
  webhookEnabled: boolean
  connectionTimeout: number
  requestTimeout: number
  settingsId: string
  createdAt: Date
  updatedAt: Date
  _count: PlexSettingsCountAggregateOutputType | null
  _avg: PlexSettingsAvgAggregateOutputType | null
  _sum: PlexSettingsSumAggregateOutputType | null
  _min: PlexSettingsMinAggregateOutputType | null
  _max: PlexSettingsMaxAggregateOutputType | null
}

type GetPlexSettingsGroupByPayload<T extends PlexSettingsGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<PlexSettingsGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof PlexSettingsGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], PlexSettingsGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], PlexSettingsGroupByOutputType[P]>
      }
    >
  > 



export type PlexSettingsWhereInput = {
  AND?: Prisma.PlexSettingsWhereInput | Prisma.PlexSettingsWhereInput[]
  OR?: Prisma.PlexSettingsWhereInput[]
  NOT?: Prisma.PlexSettingsWhereInput | Prisma.PlexSettingsWhereInput[]
  id?: Prisma.StringFilter<"PlexSettings"> | string
  url?: Prisma.StringFilter<"PlexSettings"> | string
  token?: Prisma.StringFilter<"PlexSettings"> | string
  autoRefreshLibraries?: Prisma.BoolFilter<"PlexSettings"> | boolean
  refreshInterval?: Prisma.IntFilter<"PlexSettings"> | number
  arGuide?: Prisma.BoolFilter<"PlexSettings"> | boolean
  arChannels?: Prisma.BoolFilter<"PlexSettings"> | boolean
  webhookEnabled?: Prisma.BoolFilter<"PlexSettings"> | boolean
  connectionTimeout?: Prisma.IntFilter<"PlexSettings"> | number
  requestTimeout?: Prisma.IntFilter<"PlexSettings"> | number
  settingsId?: Prisma.StringFilter<"PlexSettings"> | string
  createdAt?: Prisma.DateTimeFilter<"PlexSettings"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"PlexSettings"> | Date | string
  settings?: Prisma.XOR<Prisma.SettingsScalarRelationFilter, Prisma.SettingsWhereInput>
}

export type PlexSettingsOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  url?: Prisma.SortOrder
  token?: Prisma.SortOrder
  autoRefreshLibraries?: Prisma.SortOrder
  refreshInterval?: Prisma.SortOrder
  arGuide?: Prisma.SortOrder
  arChannels?: Prisma.SortOrder
  webhookEnabled?: Prisma.SortOrder
  connectionTimeout?: Prisma.SortOrder
  requestTimeout?: Prisma.SortOrder
  settingsId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  settings?: Prisma.SettingsOrderByWithRelationInput
}

export type PlexSettingsWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  settingsId?: string
  AND?: Prisma.PlexSettingsWhereInput | Prisma.PlexSettingsWhereInput[]
  OR?: Prisma.PlexSettingsWhereInput[]
  NOT?: Prisma.PlexSettingsWhereInput | Prisma.PlexSettingsWhereInput[]
  url?: Prisma.StringFilter<"PlexSettings"> | string
  token?: Prisma.StringFilter<"PlexSettings"> | string
  autoRefreshLibraries?: Prisma.BoolFilter<"PlexSettings"> | boolean
  refreshInterval?: Prisma.IntFilter<"PlexSettings"> | number
  arGuide?: Prisma.BoolFilter<"PlexSettings"> | boolean
  arChannels?: Prisma.BoolFilter<"PlexSettings"> | boolean
  webhookEnabled?: Prisma.BoolFilter<"PlexSettings"> | boolean
  connectionTimeout?: Prisma.IntFilter<"PlexSettings"> | number
  requestTimeout?: Prisma.IntFilter<"PlexSettings"> | number
  createdAt?: Prisma.DateTimeFilter<"PlexSettings"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"PlexSettings"> | Date | string
  settings?: Prisma.XOR<Prisma.SettingsScalarRelationFilter, Prisma.SettingsWhereInput>
}, "id" | "settingsId">

export type PlexSettingsOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  url?: Prisma.SortOrder
  token?: Prisma.SortOrder
  autoRefreshLibraries?: Prisma.SortOrder
  refreshInterval?: Prisma.SortOrder
  arGuide?: Prisma.SortOrder
  arChannels?: Prisma.SortOrder
  webhookEnabled?: Prisma.SortOrder
  connectionTimeout?: Prisma.SortOrder
  requestTimeout?: Prisma.SortOrder
  settingsId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.PlexSettingsCountOrderByAggregateInput
  _avg?: Prisma.PlexSettingsAvgOrderByAggregateInput
  _max?: Prisma.PlexSettingsMaxOrderByAggregateInput
  _min?: Prisma.PlexSettingsMinOrderByAggregateInput
  _sum?: Prisma.PlexSettingsSumOrderByAggregateInput
}

export type PlexSettingsScalarWhereWithAggregatesInput = {
  AND?: Prisma.PlexSettingsScalarWhereWithAggregatesInput | Prisma.PlexSettingsScalarWhereWithAggregatesInput[]
  OR?: Prisma.PlexSettingsScalarWhereWithAggregatesInput[]
  NOT?: Prisma.PlexSettingsScalarWhereWithAggregatesInput | Prisma.PlexSettingsScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"PlexSettings"> | string
  url?: Prisma.StringWithAggregatesFilter<"PlexSettings"> | string
  token?: Prisma.StringWithAggregatesFilter<"PlexSettings"> | string
  autoRefreshLibraries?: Prisma.BoolWithAggregatesFilter<"PlexSettings"> | boolean
  refreshInterval?: Prisma.IntWithAggregatesFilter<"PlexSettings"> | number
  arGuide?: Prisma.BoolWithAggregatesFilter<"PlexSettings"> | boolean
  arChannels?: Prisma.BoolWithAggregatesFilter<"PlexSettings"> | boolean
  webhookEnabled?: Prisma.BoolWithAggregatesFilter<"PlexSettings"> | boolean
  connectionTimeout?: Prisma.IntWithAggregatesFilter<"PlexSettings"> | number
  requestTimeout?: Prisma.IntWithAggregatesFilter<"PlexSettings"> | number
  settingsId?: Prisma.StringWithAggregatesFilter<"PlexSettings"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"PlexSettings"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"PlexSettings"> | Date | string
}

export type PlexSettingsCreateInput = {
  id?: string
  url?: string
  token?: string
  autoRefreshLibraries?: boolean
  refreshInterval?: number
  arGuide?: boolean
  arChannels?: boolean
  webhookEnabled?: boolean
  connectionTimeout?: number
  requestTimeout?: number
  createdAt?: Date | string
  updatedAt?: Date | string
  settings?: Prisma.SettingsCreateNestedOneWithoutPlexSettingsInput
}

export type PlexSettingsUncheckedCreateInput = {
  id?: string
  url?: string
  token?: string
  autoRefreshLibraries?: boolean
  refreshInterval?: number
  arGuide?: boolean
  arChannels?: boolean
  webhookEnabled?: boolean
  connectionTimeout?: number
  requestTimeout?: number
  settingsId?: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type PlexSettingsUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  url?: Prisma.StringFieldUpdateOperationsInput | string
  token?: Prisma.StringFieldUpdateOperationsInput | string
  autoRefreshLibraries?: Prisma.BoolFieldUpdateOperationsInput | boolean
  refreshInterval?: Prisma.IntFieldUpdateOperationsInput | number
  arGuide?: Prisma.BoolFieldUpdateOperationsInput | boolean
  arChannels?: Prisma.BoolFieldUpdateOperationsInput | boolean
  webhookEnabled?: Prisma.BoolFieldUpdateOperationsInput | boolean
  connectionTimeout?: Prisma.IntFieldUpdateOperationsInput | number
  requestTimeout?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  settings?: Prisma.SettingsUpdateOneRequiredWithoutPlexSettingsNestedInput
}

export type PlexSettingsUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  url?: Prisma.StringFieldUpdateOperationsInput | string
  token?: Prisma.StringFieldUpdateOperationsInput | string
  autoRefreshLibraries?: Prisma.BoolFieldUpdateOperationsInput | boolean
  refreshInterval?: Prisma.IntFieldUpdateOperationsInput | number
  arGuide?: Prisma.BoolFieldUpdateOperationsInput | boolean
  arChannels?: Prisma.BoolFieldUpdateOperationsInput | boolean
  webhookEnabled?: Prisma.BoolFieldUpdateOperationsInput | boolean
  connectionTimeout?: Prisma.IntFieldUpdateOperationsInput | number
  requestTimeout?: Prisma.IntFieldUpdateOperationsInput | number
  settingsId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PlexSettingsCreateManyInput = {
  id?: string
  url?: string
  token?: string
  autoRefreshLibraries?: boolean
  refreshInterval?: number
  arGuide?: boolean
  arChannels?: boolean
  webhookEnabled?: boolean
  connectionTimeout?: number
  requestTimeout?: number
  settingsId?: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type PlexSettingsUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  url?: Prisma.StringFieldUpdateOperationsInput | string
  token?: Prisma.StringFieldUpdateOperationsInput | string
  autoRefreshLibraries?: Prisma.BoolFieldUpdateOperationsInput | boolean
  refreshInterval?: Prisma.IntFieldUpdateOperationsInput | number
  arGuide?: Prisma.BoolFieldUpdateOperationsInput | boolean
  arChannels?: Prisma.BoolFieldUpdateOperationsInput | boolean
  webhookEnabled?: Prisma.BoolFieldUpdateOperationsInput | boolean
  connectionTimeout?: Prisma.IntFieldUpdateOperationsInput | number
  requestTimeout?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PlexSettingsUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  url?: Prisma.StringFieldUpdateOperationsInput | string
  token?: Prisma.StringFieldUpdateOperationsInput | string
  autoRefreshLibraries?: Prisma.BoolFieldUpdateOperationsInput | boolean
  refreshInterval?: Prisma.IntFieldUpdateOperationsInput | number
  arGuide?: Prisma.BoolFieldUpdateOperationsInput | boolean
  arChannels?: Prisma.BoolFieldUpdateOperationsInput | boolean
  webhookEnabled?: Prisma.BoolFieldUpdateOperationsInput | boolean
  connectionTimeout?: Prisma.IntFieldUpdateOperationsInput | number
  requestTimeout?: Prisma.IntFieldUpdateOperationsInput | number
  settingsId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PlexSettingsNullableScalarRelationFilter = {
  is?: Prisma.PlexSettingsWhereInput | null
  isNot?: Prisma.PlexSettingsWhereInput | null
}

export type PlexSettingsCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  url?: Prisma.SortOrder
  token?: Prisma.SortOrder
  autoRefreshLibraries?: Prisma.SortOrder
  refreshInterval?: Prisma.SortOrder
  arGuide?: Prisma.SortOrder
  arChannels?: Prisma.SortOrder
  webhookEnabled?: Prisma.SortOrder
  connectionTimeout?: Prisma.SortOrder
  requestTimeout?: Prisma.SortOrder
  settingsId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type PlexSettingsAvgOrderByAggregateInput = {
  refreshInterval?: Prisma.SortOrder
  connectionTimeout?: Prisma.SortOrder
  requestTimeout?: Prisma.SortOrder
}

export type PlexSettingsMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  url?: Prisma.SortOrder
  token?: Prisma.SortOrder
  autoRefreshLibraries?: Prisma.SortOrder
  refreshInterval?: Prisma.SortOrder
  arGuide?: Prisma.SortOrder
  arChannels?: Prisma.SortOrder
  webhookEnabled?: Prisma.SortOrder
  connectionTimeout?: Prisma.SortOrder
  requestTimeout?: Prisma.SortOrder
  settingsId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type PlexSettingsMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  url?: Prisma.SortOrder
  token?: Prisma.SortOrder
  autoRefreshLibraries?: Prisma.SortOrder
  refreshInterval?: Prisma.SortOrder
  arGuide?: Prisma.SortOrder
  arChannels?: Prisma.SortOrder
  webhookEnabled?: Prisma.SortOrder
  connectionTimeout?: Prisma.SortOrder
  requestTimeout?: Prisma.SortOrder
  settingsId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type PlexSettingsSumOrderByAggregateInput = {
  refreshInterval?: Prisma.SortOrder
  connectionTimeout?: Prisma.SortOrder
  requestTimeout?: Prisma.SortOrder
}

export type PlexSettingsCreateNestedOneWithoutSettingsInput = {
  create?: Prisma.XOR<Prisma.PlexSettingsCreateWithoutSettingsInput, Prisma.PlexSettingsUncheckedCreateWithoutSettingsInput>
  connectOrCreate?: Prisma.PlexSettingsCreateOrConnectWithoutSettingsInput
  connect?: Prisma.PlexSettingsWhereUniqueInput
}

export type PlexSettingsUncheckedCreateNestedOneWithoutSettingsInput = {
  create?: Prisma.XOR<Prisma.PlexSettingsCreateWithoutSettingsInput, Prisma.PlexSettingsUncheckedCreateWithoutSettingsInput>
  connectOrCreate?: Prisma.PlexSettingsCreateOrConnectWithoutSettingsInput
  connect?: Prisma.PlexSettingsWhereUniqueInput
}

export type PlexSettingsUpdateOneWithoutSettingsNestedInput = {
  create?: Prisma.XOR<Prisma.PlexSettingsCreateWithoutSettingsInput, Prisma.PlexSettingsUncheckedCreateWithoutSettingsInput>
  connectOrCreate?: Prisma.PlexSettingsCreateOrConnectWithoutSettingsInput
  upsert?: Prisma.PlexSettingsUpsertWithoutSettingsInput
  disconnect?: Prisma.PlexSettingsWhereInput | boolean
  delete?: Prisma.PlexSettingsWhereInput | boolean
  connect?: Prisma.PlexSettingsWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.PlexSettingsUpdateToOneWithWhereWithoutSettingsInput, Prisma.PlexSettingsUpdateWithoutSettingsInput>, Prisma.PlexSettingsUncheckedUpdateWithoutSettingsInput>
}

export type PlexSettingsUncheckedUpdateOneWithoutSettingsNestedInput = {
  create?: Prisma.XOR<Prisma.PlexSettingsCreateWithoutSettingsInput, Prisma.PlexSettingsUncheckedCreateWithoutSettingsInput>
  connectOrCreate?: Prisma.PlexSettingsCreateOrConnectWithoutSettingsInput
  upsert?: Prisma.PlexSettingsUpsertWithoutSettingsInput
  disconnect?: Prisma.PlexSettingsWhereInput | boolean
  delete?: Prisma.PlexSettingsWhereInput | boolean
  connect?: Prisma.PlexSettingsWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.PlexSettingsUpdateToOneWithWhereWithoutSettingsInput, Prisma.PlexSettingsUpdateWithoutSettingsInput>, Prisma.PlexSettingsUncheckedUpdateWithoutSettingsInput>
}

export type PlexSettingsCreateWithoutSettingsInput = {
  id?: string
  url?: string
  token?: string
  autoRefreshLibraries?: boolean
  refreshInterval?: number
  arGuide?: boolean
  arChannels?: boolean
  webhookEnabled?: boolean
  connectionTimeout?: number
  requestTimeout?: number
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type PlexSettingsUncheckedCreateWithoutSettingsInput = {
  id?: string
  url?: string
  token?: string
  autoRefreshLibraries?: boolean
  refreshInterval?: number
  arGuide?: boolean
  arChannels?: boolean
  webhookEnabled?: boolean
  connectionTimeout?: number
  requestTimeout?: number
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type PlexSettingsCreateOrConnectWithoutSettingsInput = {
  where: Prisma.PlexSettingsWhereUniqueInput
  create: Prisma.XOR<Prisma.PlexSettingsCreateWithoutSettingsInput, Prisma.PlexSettingsUncheckedCreateWithoutSettingsInput>
}

export type PlexSettingsUpsertWithoutSettingsInput = {
  update: Prisma.XOR<Prisma.PlexSettingsUpdateWithoutSettingsInput, Prisma.PlexSettingsUncheckedUpdateWithoutSettingsInput>
  create: Prisma.XOR<Prisma.PlexSettingsCreateWithoutSettingsInput, Prisma.PlexSettingsUncheckedCreateWithoutSettingsInput>
  where?: Prisma.PlexSettingsWhereInput
}

export type PlexSettingsUpdateToOneWithWhereWithoutSettingsInput = {
  where?: Prisma.PlexSettingsWhereInput
  data: Prisma.XOR<Prisma.PlexSettingsUpdateWithoutSettingsInput, Prisma.PlexSettingsUncheckedUpdateWithoutSettingsInput>
}

export type PlexSettingsUpdateWithoutSettingsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  url?: Prisma.StringFieldUpdateOperationsInput | string
  token?: Prisma.StringFieldUpdateOperationsInput | string
  autoRefreshLibraries?: Prisma.BoolFieldUpdateOperationsInput | boolean
  refreshInterval?: Prisma.IntFieldUpdateOperationsInput | number
  arGuide?: Prisma.BoolFieldUpdateOperationsInput | boolean
  arChannels?: Prisma.BoolFieldUpdateOperationsInput | boolean
  webhookEnabled?: Prisma.BoolFieldUpdateOperationsInput | boolean
  connectionTimeout?: Prisma.IntFieldUpdateOperationsInput | number
  requestTimeout?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PlexSettingsUncheckedUpdateWithoutSettingsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  url?: Prisma.StringFieldUpdateOperationsInput | string
  token?: Prisma.StringFieldUpdateOperationsInput | string
  autoRefreshLibraries?: Prisma.BoolFieldUpdateOperationsInput | boolean
  refreshInterval?: Prisma.IntFieldUpdateOperationsInput | number
  arGuide?: Prisma.BoolFieldUpdateOperationsInput | boolean
  arChannels?: Prisma.BoolFieldUpdateOperationsInput | boolean
  webhookEnabled?: Prisma.BoolFieldUpdateOperationsInput | boolean
  connectionTimeout?: Prisma.IntFieldUpdateOperationsInput | number
  requestTimeout?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type PlexSettingsSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  url?: boolean
  token?: boolean
  autoRefreshLibraries?: boolean
  refreshInterval?: boolean
  arGuide?: boolean
  arChannels?: boolean
  webhookEnabled?: boolean
  connectionTimeout?: boolean
  requestTimeout?: boolean
  settingsId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  settings?: boolean | Prisma.SettingsDefaultArgs<ExtArgs>
}, ExtArgs["result"]["plexSettings"]>

export type PlexSettingsSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  url?: boolean
  token?: boolean
  autoRefreshLibraries?: boolean
  refreshInterval?: boolean
  arGuide?: boolean
  arChannels?: boolean
  webhookEnabled?: boolean
  connectionTimeout?: boolean
  requestTimeout?: boolean
  settingsId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  settings?: boolean | Prisma.SettingsDefaultArgs<ExtArgs>
}, ExtArgs["result"]["plexSettings"]>

export type PlexSettingsSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  url?: boolean
  token?: boolean
  autoRefreshLibraries?: boolean
  refreshInterval?: boolean
  arGuide?: boolean
  arChannels?: boolean
  webhookEnabled?: boolean
  connectionTimeout?: boolean
  requestTimeout?: boolean
  settingsId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  settings?: boolean | Prisma.SettingsDefaultArgs<ExtArgs>
}, ExtArgs["result"]["plexSettings"]>

export type PlexSettingsSelectScalar = {
  id?: boolean
  url?: boolean
  token?: boolean
  autoRefreshLibraries?: boolean
  refreshInterval?: boolean
  arGuide?: boolean
  arChannels?: boolean
  webhookEnabled?: boolean
  connectionTimeout?: boolean
  requestTimeout?: boolean
  settingsId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type PlexSettingsOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "url" | "token" | "autoRefreshLibraries" | "refreshInterval" | "arGuide" | "arChannels" | "webhookEnabled" | "connectionTimeout" | "requestTimeout" | "settingsId" | "createdAt" | "updatedAt", ExtArgs["result"]["plexSettings"]>
export type PlexSettingsInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  settings?: boolean | Prisma.SettingsDefaultArgs<ExtArgs>
}
export type PlexSettingsIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  settings?: boolean | Prisma.SettingsDefaultArgs<ExtArgs>
}
export type PlexSettingsIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  settings?: boolean | Prisma.SettingsDefaultArgs<ExtArgs>
}

export type $PlexSettingsPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "PlexSettings"
  objects: {
    settings: Prisma.$SettingsPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    url: string
    token: string
    autoRefreshLibraries: boolean
    refreshInterval: number
    arGuide: boolean
    arChannels: boolean
    webhookEnabled: boolean
    connectionTimeout: number
    requestTimeout: number
    settingsId: string
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["plexSettings"]>
  composites: {}
}

export type PlexSettingsGetPayload<S extends boolean | null | undefined | PlexSettingsDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$PlexSettingsPayload, S>

export type PlexSettingsCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<PlexSettingsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: PlexSettingsCountAggregateInputType | true
  }

export interface PlexSettingsDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PlexSettings'], meta: { name: 'PlexSettings' } }
  /**
   * Find zero or one PlexSettings that matches the filter.
   * @param {PlexSettingsFindUniqueArgs} args - Arguments to find a PlexSettings
   * @example
   * // Get one PlexSettings
   * const plexSettings = await prisma.plexSettings.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends PlexSettingsFindUniqueArgs>(args: Prisma.SelectSubset<T, PlexSettingsFindUniqueArgs<ExtArgs>>): Prisma.Prisma__PlexSettingsClient<runtime.Types.Result.GetResult<Prisma.$PlexSettingsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one PlexSettings that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {PlexSettingsFindUniqueOrThrowArgs} args - Arguments to find a PlexSettings
   * @example
   * // Get one PlexSettings
   * const plexSettings = await prisma.plexSettings.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends PlexSettingsFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, PlexSettingsFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__PlexSettingsClient<runtime.Types.Result.GetResult<Prisma.$PlexSettingsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first PlexSettings that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PlexSettingsFindFirstArgs} args - Arguments to find a PlexSettings
   * @example
   * // Get one PlexSettings
   * const plexSettings = await prisma.plexSettings.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends PlexSettingsFindFirstArgs>(args?: Prisma.SelectSubset<T, PlexSettingsFindFirstArgs<ExtArgs>>): Prisma.Prisma__PlexSettingsClient<runtime.Types.Result.GetResult<Prisma.$PlexSettingsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first PlexSettings that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PlexSettingsFindFirstOrThrowArgs} args - Arguments to find a PlexSettings
   * @example
   * // Get one PlexSettings
   * const plexSettings = await prisma.plexSettings.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends PlexSettingsFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, PlexSettingsFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__PlexSettingsClient<runtime.Types.Result.GetResult<Prisma.$PlexSettingsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more PlexSettings that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PlexSettingsFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all PlexSettings
   * const plexSettings = await prisma.plexSettings.findMany()
   * 
   * // Get first 10 PlexSettings
   * const plexSettings = await prisma.plexSettings.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const plexSettingsWithIdOnly = await prisma.plexSettings.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends PlexSettingsFindManyArgs>(args?: Prisma.SelectSubset<T, PlexSettingsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PlexSettingsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a PlexSettings.
   * @param {PlexSettingsCreateArgs} args - Arguments to create a PlexSettings.
   * @example
   * // Create one PlexSettings
   * const PlexSettings = await prisma.plexSettings.create({
   *   data: {
   *     // ... data to create a PlexSettings
   *   }
   * })
   * 
   */
  create<T extends PlexSettingsCreateArgs>(args: Prisma.SelectSubset<T, PlexSettingsCreateArgs<ExtArgs>>): Prisma.Prisma__PlexSettingsClient<runtime.Types.Result.GetResult<Prisma.$PlexSettingsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many PlexSettings.
   * @param {PlexSettingsCreateManyArgs} args - Arguments to create many PlexSettings.
   * @example
   * // Create many PlexSettings
   * const plexSettings = await prisma.plexSettings.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends PlexSettingsCreateManyArgs>(args?: Prisma.SelectSubset<T, PlexSettingsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many PlexSettings and returns the data saved in the database.
   * @param {PlexSettingsCreateManyAndReturnArgs} args - Arguments to create many PlexSettings.
   * @example
   * // Create many PlexSettings
   * const plexSettings = await prisma.plexSettings.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many PlexSettings and only return the `id`
   * const plexSettingsWithIdOnly = await prisma.plexSettings.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends PlexSettingsCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, PlexSettingsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PlexSettingsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a PlexSettings.
   * @param {PlexSettingsDeleteArgs} args - Arguments to delete one PlexSettings.
   * @example
   * // Delete one PlexSettings
   * const PlexSettings = await prisma.plexSettings.delete({
   *   where: {
   *     // ... filter to delete one PlexSettings
   *   }
   * })
   * 
   */
  delete<T extends PlexSettingsDeleteArgs>(args: Prisma.SelectSubset<T, PlexSettingsDeleteArgs<ExtArgs>>): Prisma.Prisma__PlexSettingsClient<runtime.Types.Result.GetResult<Prisma.$PlexSettingsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one PlexSettings.
   * @param {PlexSettingsUpdateArgs} args - Arguments to update one PlexSettings.
   * @example
   * // Update one PlexSettings
   * const plexSettings = await prisma.plexSettings.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends PlexSettingsUpdateArgs>(args: Prisma.SelectSubset<T, PlexSettingsUpdateArgs<ExtArgs>>): Prisma.Prisma__PlexSettingsClient<runtime.Types.Result.GetResult<Prisma.$PlexSettingsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more PlexSettings.
   * @param {PlexSettingsDeleteManyArgs} args - Arguments to filter PlexSettings to delete.
   * @example
   * // Delete a few PlexSettings
   * const { count } = await prisma.plexSettings.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends PlexSettingsDeleteManyArgs>(args?: Prisma.SelectSubset<T, PlexSettingsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more PlexSettings.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PlexSettingsUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many PlexSettings
   * const plexSettings = await prisma.plexSettings.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends PlexSettingsUpdateManyArgs>(args: Prisma.SelectSubset<T, PlexSettingsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more PlexSettings and returns the data updated in the database.
   * @param {PlexSettingsUpdateManyAndReturnArgs} args - Arguments to update many PlexSettings.
   * @example
   * // Update many PlexSettings
   * const plexSettings = await prisma.plexSettings.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more PlexSettings and only return the `id`
   * const plexSettingsWithIdOnly = await prisma.plexSettings.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends PlexSettingsUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, PlexSettingsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PlexSettingsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one PlexSettings.
   * @param {PlexSettingsUpsertArgs} args - Arguments to update or create a PlexSettings.
   * @example
   * // Update or create a PlexSettings
   * const plexSettings = await prisma.plexSettings.upsert({
   *   create: {
   *     // ... data to create a PlexSettings
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the PlexSettings we want to update
   *   }
   * })
   */
  upsert<T extends PlexSettingsUpsertArgs>(args: Prisma.SelectSubset<T, PlexSettingsUpsertArgs<ExtArgs>>): Prisma.Prisma__PlexSettingsClient<runtime.Types.Result.GetResult<Prisma.$PlexSettingsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of PlexSettings.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PlexSettingsCountArgs} args - Arguments to filter PlexSettings to count.
   * @example
   * // Count the number of PlexSettings
   * const count = await prisma.plexSettings.count({
   *   where: {
   *     // ... the filter for the PlexSettings we want to count
   *   }
   * })
  **/
  count<T extends PlexSettingsCountArgs>(
    args?: Prisma.Subset<T, PlexSettingsCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], PlexSettingsCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a PlexSettings.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PlexSettingsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends PlexSettingsAggregateArgs>(args: Prisma.Subset<T, PlexSettingsAggregateArgs>): Prisma.PrismaPromise<GetPlexSettingsAggregateType<T>>

  /**
   * Group by PlexSettings.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PlexSettingsGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends PlexSettingsGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: PlexSettingsGroupByArgs['orderBy'] }
      : { orderBy?: PlexSettingsGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, PlexSettingsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPlexSettingsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the PlexSettings model
 */
readonly fields: PlexSettingsFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for PlexSettings.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__PlexSettingsClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  settings<T extends Prisma.SettingsDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.SettingsDefaultArgs<ExtArgs>>): Prisma.Prisma__SettingsClient<runtime.Types.Result.GetResult<Prisma.$SettingsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the PlexSettings model
 */
export interface PlexSettingsFieldRefs {
  readonly id: Prisma.FieldRef<"PlexSettings", 'String'>
  readonly url: Prisma.FieldRef<"PlexSettings", 'String'>
  readonly token: Prisma.FieldRef<"PlexSettings", 'String'>
  readonly autoRefreshLibraries: Prisma.FieldRef<"PlexSettings", 'Boolean'>
  readonly refreshInterval: Prisma.FieldRef<"PlexSettings", 'Int'>
  readonly arGuide: Prisma.FieldRef<"PlexSettings", 'Boolean'>
  readonly arChannels: Prisma.FieldRef<"PlexSettings", 'Boolean'>
  readonly webhookEnabled: Prisma.FieldRef<"PlexSettings", 'Boolean'>
  readonly connectionTimeout: Prisma.FieldRef<"PlexSettings", 'Int'>
  readonly requestTimeout: Prisma.FieldRef<"PlexSettings", 'Int'>
  readonly settingsId: Prisma.FieldRef<"PlexSettings", 'String'>
  readonly createdAt: Prisma.FieldRef<"PlexSettings", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"PlexSettings", 'DateTime'>
}
    

// Custom InputTypes
/**
 * PlexSettings findUnique
 */
export type PlexSettingsFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PlexSettings
   */
  select?: Prisma.PlexSettingsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PlexSettings
   */
  omit?: Prisma.PlexSettingsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlexSettingsInclude<ExtArgs> | null
  /**
   * Filter, which PlexSettings to fetch.
   */
  where: Prisma.PlexSettingsWhereUniqueInput
}

/**
 * PlexSettings findUniqueOrThrow
 */
export type PlexSettingsFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PlexSettings
   */
  select?: Prisma.PlexSettingsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PlexSettings
   */
  omit?: Prisma.PlexSettingsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlexSettingsInclude<ExtArgs> | null
  /**
   * Filter, which PlexSettings to fetch.
   */
  where: Prisma.PlexSettingsWhereUniqueInput
}

/**
 * PlexSettings findFirst
 */
export type PlexSettingsFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PlexSettings
   */
  select?: Prisma.PlexSettingsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PlexSettings
   */
  omit?: Prisma.PlexSettingsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlexSettingsInclude<ExtArgs> | null
  /**
   * Filter, which PlexSettings to fetch.
   */
  where?: Prisma.PlexSettingsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PlexSettings to fetch.
   */
  orderBy?: Prisma.PlexSettingsOrderByWithRelationInput | Prisma.PlexSettingsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for PlexSettings.
   */
  cursor?: Prisma.PlexSettingsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PlexSettings from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PlexSettings.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of PlexSettings.
   */
  distinct?: Prisma.PlexSettingsScalarFieldEnum | Prisma.PlexSettingsScalarFieldEnum[]
}

/**
 * PlexSettings findFirstOrThrow
 */
export type PlexSettingsFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PlexSettings
   */
  select?: Prisma.PlexSettingsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PlexSettings
   */
  omit?: Prisma.PlexSettingsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlexSettingsInclude<ExtArgs> | null
  /**
   * Filter, which PlexSettings to fetch.
   */
  where?: Prisma.PlexSettingsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PlexSettings to fetch.
   */
  orderBy?: Prisma.PlexSettingsOrderByWithRelationInput | Prisma.PlexSettingsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for PlexSettings.
   */
  cursor?: Prisma.PlexSettingsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PlexSettings from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PlexSettings.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of PlexSettings.
   */
  distinct?: Prisma.PlexSettingsScalarFieldEnum | Prisma.PlexSettingsScalarFieldEnum[]
}

/**
 * PlexSettings findMany
 */
export type PlexSettingsFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PlexSettings
   */
  select?: Prisma.PlexSettingsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PlexSettings
   */
  omit?: Prisma.PlexSettingsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlexSettingsInclude<ExtArgs> | null
  /**
   * Filter, which PlexSettings to fetch.
   */
  where?: Prisma.PlexSettingsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PlexSettings to fetch.
   */
  orderBy?: Prisma.PlexSettingsOrderByWithRelationInput | Prisma.PlexSettingsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing PlexSettings.
   */
  cursor?: Prisma.PlexSettingsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PlexSettings from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PlexSettings.
   */
  skip?: number
  distinct?: Prisma.PlexSettingsScalarFieldEnum | Prisma.PlexSettingsScalarFieldEnum[]
}

/**
 * PlexSettings create
 */
export type PlexSettingsCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PlexSettings
   */
  select?: Prisma.PlexSettingsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PlexSettings
   */
  omit?: Prisma.PlexSettingsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlexSettingsInclude<ExtArgs> | null
  /**
   * The data needed to create a PlexSettings.
   */
  data: Prisma.XOR<Prisma.PlexSettingsCreateInput, Prisma.PlexSettingsUncheckedCreateInput>
}

/**
 * PlexSettings createMany
 */
export type PlexSettingsCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many PlexSettings.
   */
  data: Prisma.PlexSettingsCreateManyInput | Prisma.PlexSettingsCreateManyInput[]
}

/**
 * PlexSettings createManyAndReturn
 */
export type PlexSettingsCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PlexSettings
   */
  select?: Prisma.PlexSettingsSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the PlexSettings
   */
  omit?: Prisma.PlexSettingsOmit<ExtArgs> | null
  /**
   * The data used to create many PlexSettings.
   */
  data: Prisma.PlexSettingsCreateManyInput | Prisma.PlexSettingsCreateManyInput[]
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlexSettingsIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * PlexSettings update
 */
export type PlexSettingsUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PlexSettings
   */
  select?: Prisma.PlexSettingsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PlexSettings
   */
  omit?: Prisma.PlexSettingsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlexSettingsInclude<ExtArgs> | null
  /**
   * The data needed to update a PlexSettings.
   */
  data: Prisma.XOR<Prisma.PlexSettingsUpdateInput, Prisma.PlexSettingsUncheckedUpdateInput>
  /**
   * Choose, which PlexSettings to update.
   */
  where: Prisma.PlexSettingsWhereUniqueInput
}

/**
 * PlexSettings updateMany
 */
export type PlexSettingsUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update PlexSettings.
   */
  data: Prisma.XOR<Prisma.PlexSettingsUpdateManyMutationInput, Prisma.PlexSettingsUncheckedUpdateManyInput>
  /**
   * Filter which PlexSettings to update
   */
  where?: Prisma.PlexSettingsWhereInput
  /**
   * Limit how many PlexSettings to update.
   */
  limit?: number
}

/**
 * PlexSettings updateManyAndReturn
 */
export type PlexSettingsUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PlexSettings
   */
  select?: Prisma.PlexSettingsSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the PlexSettings
   */
  omit?: Prisma.PlexSettingsOmit<ExtArgs> | null
  /**
   * The data used to update PlexSettings.
   */
  data: Prisma.XOR<Prisma.PlexSettingsUpdateManyMutationInput, Prisma.PlexSettingsUncheckedUpdateManyInput>
  /**
   * Filter which PlexSettings to update
   */
  where?: Prisma.PlexSettingsWhereInput
  /**
   * Limit how many PlexSettings to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlexSettingsIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * PlexSettings upsert
 */
export type PlexSettingsUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PlexSettings
   */
  select?: Prisma.PlexSettingsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PlexSettings
   */
  omit?: Prisma.PlexSettingsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlexSettingsInclude<ExtArgs> | null
  /**
   * The filter to search for the PlexSettings to update in case it exists.
   */
  where: Prisma.PlexSettingsWhereUniqueInput
  /**
   * In case the PlexSettings found by the `where` argument doesn't exist, create a new PlexSettings with this data.
   */
  create: Prisma.XOR<Prisma.PlexSettingsCreateInput, Prisma.PlexSettingsUncheckedCreateInput>
  /**
   * In case the PlexSettings was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.PlexSettingsUpdateInput, Prisma.PlexSettingsUncheckedUpdateInput>
}

/**
 * PlexSettings delete
 */
export type PlexSettingsDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PlexSettings
   */
  select?: Prisma.PlexSettingsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PlexSettings
   */
  omit?: Prisma.PlexSettingsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlexSettingsInclude<ExtArgs> | null
  /**
   * Filter which PlexSettings to delete.
   */
  where: Prisma.PlexSettingsWhereUniqueInput
}

/**
 * PlexSettings deleteMany
 */
export type PlexSettingsDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which PlexSettings to delete
   */
  where?: Prisma.PlexSettingsWhereInput
  /**
   * Limit how many PlexSettings to delete.
   */
  limit?: number
}

/**
 * PlexSettings without action
 */
export type PlexSettingsDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PlexSettings
   */
  select?: Prisma.PlexSettingsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PlexSettings
   */
  omit?: Prisma.PlexSettingsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlexSettingsInclude<ExtArgs> | null
}
