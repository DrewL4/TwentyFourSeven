
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `MediaLibrary` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model MediaLibrary
 * 
 */
export type MediaLibraryModel = runtime.Types.Result.DefaultSelection<Prisma.$MediaLibraryPayload>

export type AggregateMediaLibrary = {
  _count: MediaLibraryCountAggregateOutputType | null
  _min: MediaLibraryMinAggregateOutputType | null
  _max: MediaLibraryMaxAggregateOutputType | null
}

export type MediaLibraryMinAggregateOutputType = {
  id: string | null
  name: string | null
  key: string | null
  type: $Enums.LibraryType | null
  serverId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type MediaLibraryMaxAggregateOutputType = {
  id: string | null
  name: string | null
  key: string | null
  type: $Enums.LibraryType | null
  serverId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type MediaLibraryCountAggregateOutputType = {
  id: number
  name: number
  key: number
  type: number
  serverId: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type MediaLibraryMinAggregateInputType = {
  id?: true
  name?: true
  key?: true
  type?: true
  serverId?: true
  createdAt?: true
  updatedAt?: true
}

export type MediaLibraryMaxAggregateInputType = {
  id?: true
  name?: true
  key?: true
  type?: true
  serverId?: true
  createdAt?: true
  updatedAt?: true
}

export type MediaLibraryCountAggregateInputType = {
  id?: true
  name?: true
  key?: true
  type?: true
  serverId?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type MediaLibraryAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which MediaLibrary to aggregate.
   */
  where?: Prisma.MediaLibraryWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MediaLibraries to fetch.
   */
  orderBy?: Prisma.MediaLibraryOrderByWithRelationInput | Prisma.MediaLibraryOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.MediaLibraryWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MediaLibraries from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MediaLibraries.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned MediaLibraries
  **/
  _count?: true | MediaLibraryCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: MediaLibraryMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: MediaLibraryMaxAggregateInputType
}

export type GetMediaLibraryAggregateType<T extends MediaLibraryAggregateArgs> = {
      [P in keyof T & keyof AggregateMediaLibrary]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateMediaLibrary[P]>
    : Prisma.GetScalarType<T[P], AggregateMediaLibrary[P]>
}




export type MediaLibraryGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.MediaLibraryWhereInput
  orderBy?: Prisma.MediaLibraryOrderByWithAggregationInput | Prisma.MediaLibraryOrderByWithAggregationInput[]
  by: Prisma.MediaLibraryScalarFieldEnum[] | Prisma.MediaLibraryScalarFieldEnum
  having?: Prisma.MediaLibraryScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: MediaLibraryCountAggregateInputType | true
  _min?: MediaLibraryMinAggregateInputType
  _max?: MediaLibraryMaxAggregateInputType
}

export type MediaLibraryGroupByOutputType = {
  id: string
  name: string
  key: string
  type: $Enums.LibraryType
  serverId: string
  createdAt: Date
  updatedAt: Date
  _count: MediaLibraryCountAggregateOutputType | null
  _min: MediaLibraryMinAggregateOutputType | null
  _max: MediaLibraryMaxAggregateOutputType | null
}

type GetMediaLibraryGroupByPayload<T extends MediaLibraryGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<MediaLibraryGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof MediaLibraryGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], MediaLibraryGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], MediaLibraryGroupByOutputType[P]>
      }
    >
  > 



export type MediaLibraryWhereInput = {
  AND?: Prisma.MediaLibraryWhereInput | Prisma.MediaLibraryWhereInput[]
  OR?: Prisma.MediaLibraryWhereInput[]
  NOT?: Prisma.MediaLibraryWhereInput | Prisma.MediaLibraryWhereInput[]
  id?: Prisma.StringFilter<"MediaLibrary"> | string
  name?: Prisma.StringFilter<"MediaLibrary"> | string
  key?: Prisma.StringFilter<"MediaLibrary"> | string
  type?: Prisma.EnumLibraryTypeFilter<"MediaLibrary"> | $Enums.LibraryType
  serverId?: Prisma.StringFilter<"MediaLibrary"> | string
  createdAt?: Prisma.DateTimeFilter<"MediaLibrary"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"MediaLibrary"> | Date | string
  server?: Prisma.XOR<Prisma.MediaServerScalarRelationFilter, Prisma.MediaServerWhereInput>
  shows?: Prisma.MediaShowListRelationFilter
  movies?: Prisma.MediaMovieListRelationFilter
}

export type MediaLibraryOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  key?: Prisma.SortOrder
  type?: Prisma.SortOrder
  serverId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  server?: Prisma.MediaServerOrderByWithRelationInput
  shows?: Prisma.MediaShowOrderByRelationAggregateInput
  movies?: Prisma.MediaMovieOrderByRelationAggregateInput
}

export type MediaLibraryWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  serverId_key?: Prisma.MediaLibraryServerIdKeyCompoundUniqueInput
  AND?: Prisma.MediaLibraryWhereInput | Prisma.MediaLibraryWhereInput[]
  OR?: Prisma.MediaLibraryWhereInput[]
  NOT?: Prisma.MediaLibraryWhereInput | Prisma.MediaLibraryWhereInput[]
  name?: Prisma.StringFilter<"MediaLibrary"> | string
  key?: Prisma.StringFilter<"MediaLibrary"> | string
  type?: Prisma.EnumLibraryTypeFilter<"MediaLibrary"> | $Enums.LibraryType
  serverId?: Prisma.StringFilter<"MediaLibrary"> | string
  createdAt?: Prisma.DateTimeFilter<"MediaLibrary"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"MediaLibrary"> | Date | string
  server?: Prisma.XOR<Prisma.MediaServerScalarRelationFilter, Prisma.MediaServerWhereInput>
  shows?: Prisma.MediaShowListRelationFilter
  movies?: Prisma.MediaMovieListRelationFilter
}, "id" | "serverId_key">

export type MediaLibraryOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  key?: Prisma.SortOrder
  type?: Prisma.SortOrder
  serverId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.MediaLibraryCountOrderByAggregateInput
  _max?: Prisma.MediaLibraryMaxOrderByAggregateInput
  _min?: Prisma.MediaLibraryMinOrderByAggregateInput
}

export type MediaLibraryScalarWhereWithAggregatesInput = {
  AND?: Prisma.MediaLibraryScalarWhereWithAggregatesInput | Prisma.MediaLibraryScalarWhereWithAggregatesInput[]
  OR?: Prisma.MediaLibraryScalarWhereWithAggregatesInput[]
  NOT?: Prisma.MediaLibraryScalarWhereWithAggregatesInput | Prisma.MediaLibraryScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"MediaLibrary"> | string
  name?: Prisma.StringWithAggregatesFilter<"MediaLibrary"> | string
  key?: Prisma.StringWithAggregatesFilter<"MediaLibrary"> | string
  type?: Prisma.EnumLibraryTypeWithAggregatesFilter<"MediaLibrary"> | $Enums.LibraryType
  serverId?: Prisma.StringWithAggregatesFilter<"MediaLibrary"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"MediaLibrary"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"MediaLibrary"> | Date | string
}

export type MediaLibraryCreateInput = {
  id?: string
  name: string
  key: string
  type: $Enums.LibraryType
  createdAt?: Date | string
  updatedAt?: Date | string
  server: Prisma.MediaServerCreateNestedOneWithoutLibrariesInput
  shows?: Prisma.MediaShowCreateNestedManyWithoutLibraryInput
  movies?: Prisma.MediaMovieCreateNestedManyWithoutLibraryInput
}

export type MediaLibraryUncheckedCreateInput = {
  id?: string
  name: string
  key: string
  type: $Enums.LibraryType
  serverId: string
  createdAt?: Date | string
  updatedAt?: Date | string
  shows?: Prisma.MediaShowUncheckedCreateNestedManyWithoutLibraryInput
  movies?: Prisma.MediaMovieUncheckedCreateNestedManyWithoutLibraryInput
}

export type MediaLibraryUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  key?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.EnumLibraryTypeFieldUpdateOperationsInput | $Enums.LibraryType
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  server?: Prisma.MediaServerUpdateOneRequiredWithoutLibrariesNestedInput
  shows?: Prisma.MediaShowUpdateManyWithoutLibraryNestedInput
  movies?: Prisma.MediaMovieUpdateManyWithoutLibraryNestedInput
}

export type MediaLibraryUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  key?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.EnumLibraryTypeFieldUpdateOperationsInput | $Enums.LibraryType
  serverId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  shows?: Prisma.MediaShowUncheckedUpdateManyWithoutLibraryNestedInput
  movies?: Prisma.MediaMovieUncheckedUpdateManyWithoutLibraryNestedInput
}

export type MediaLibraryCreateManyInput = {
  id?: string
  name: string
  key: string
  type: $Enums.LibraryType
  serverId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type MediaLibraryUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  key?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.EnumLibraryTypeFieldUpdateOperationsInput | $Enums.LibraryType
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type MediaLibraryUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  key?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.EnumLibraryTypeFieldUpdateOperationsInput | $Enums.LibraryType
  serverId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type MediaLibraryListRelationFilter = {
  every?: Prisma.MediaLibraryWhereInput
  some?: Prisma.MediaLibraryWhereInput
  none?: Prisma.MediaLibraryWhereInput
}

export type MediaLibraryOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type MediaLibraryServerIdKeyCompoundUniqueInput = {
  serverId: string
  key: string
}

export type MediaLibraryCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  key?: Prisma.SortOrder
  type?: Prisma.SortOrder
  serverId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type MediaLibraryMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  key?: Prisma.SortOrder
  type?: Prisma.SortOrder
  serverId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type MediaLibraryMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  key?: Prisma.SortOrder
  type?: Prisma.SortOrder
  serverId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type MediaLibraryScalarRelationFilter = {
  is?: Prisma.MediaLibraryWhereInput
  isNot?: Prisma.MediaLibraryWhereInput
}

export type MediaLibraryCreateNestedManyWithoutServerInput = {
  create?: Prisma.XOR<Prisma.MediaLibraryCreateWithoutServerInput, Prisma.MediaLibraryUncheckedCreateWithoutServerInput> | Prisma.MediaLibraryCreateWithoutServerInput[] | Prisma.MediaLibraryUncheckedCreateWithoutServerInput[]
  connectOrCreate?: Prisma.MediaLibraryCreateOrConnectWithoutServerInput | Prisma.MediaLibraryCreateOrConnectWithoutServerInput[]
  createMany?: Prisma.MediaLibraryCreateManyServerInputEnvelope
  connect?: Prisma.MediaLibraryWhereUniqueInput | Prisma.MediaLibraryWhereUniqueInput[]
}

export type MediaLibraryUncheckedCreateNestedManyWithoutServerInput = {
  create?: Prisma.XOR<Prisma.MediaLibraryCreateWithoutServerInput, Prisma.MediaLibraryUncheckedCreateWithoutServerInput> | Prisma.MediaLibraryCreateWithoutServerInput[] | Prisma.MediaLibraryUncheckedCreateWithoutServerInput[]
  connectOrCreate?: Prisma.MediaLibraryCreateOrConnectWithoutServerInput | Prisma.MediaLibraryCreateOrConnectWithoutServerInput[]
  createMany?: Prisma.MediaLibraryCreateManyServerInputEnvelope
  connect?: Prisma.MediaLibraryWhereUniqueInput | Prisma.MediaLibraryWhereUniqueInput[]
}

export type MediaLibraryUpdateManyWithoutServerNestedInput = {
  create?: Prisma.XOR<Prisma.MediaLibraryCreateWithoutServerInput, Prisma.MediaLibraryUncheckedCreateWithoutServerInput> | Prisma.MediaLibraryCreateWithoutServerInput[] | Prisma.MediaLibraryUncheckedCreateWithoutServerInput[]
  connectOrCreate?: Prisma.MediaLibraryCreateOrConnectWithoutServerInput | Prisma.MediaLibraryCreateOrConnectWithoutServerInput[]
  upsert?: Prisma.MediaLibraryUpsertWithWhereUniqueWithoutServerInput | Prisma.MediaLibraryUpsertWithWhereUniqueWithoutServerInput[]
  createMany?: Prisma.MediaLibraryCreateManyServerInputEnvelope
  set?: Prisma.MediaLibraryWhereUniqueInput | Prisma.MediaLibraryWhereUniqueInput[]
  disconnect?: Prisma.MediaLibraryWhereUniqueInput | Prisma.MediaLibraryWhereUniqueInput[]
  delete?: Prisma.MediaLibraryWhereUniqueInput | Prisma.MediaLibraryWhereUniqueInput[]
  connect?: Prisma.MediaLibraryWhereUniqueInput | Prisma.MediaLibraryWhereUniqueInput[]
  update?: Prisma.MediaLibraryUpdateWithWhereUniqueWithoutServerInput | Prisma.MediaLibraryUpdateWithWhereUniqueWithoutServerInput[]
  updateMany?: Prisma.MediaLibraryUpdateManyWithWhereWithoutServerInput | Prisma.MediaLibraryUpdateManyWithWhereWithoutServerInput[]
  deleteMany?: Prisma.MediaLibraryScalarWhereInput | Prisma.MediaLibraryScalarWhereInput[]
}

export type MediaLibraryUncheckedUpdateManyWithoutServerNestedInput = {
  create?: Prisma.XOR<Prisma.MediaLibraryCreateWithoutServerInput, Prisma.MediaLibraryUncheckedCreateWithoutServerInput> | Prisma.MediaLibraryCreateWithoutServerInput[] | Prisma.MediaLibraryUncheckedCreateWithoutServerInput[]
  connectOrCreate?: Prisma.MediaLibraryCreateOrConnectWithoutServerInput | Prisma.MediaLibraryCreateOrConnectWithoutServerInput[]
  upsert?: Prisma.MediaLibraryUpsertWithWhereUniqueWithoutServerInput | Prisma.MediaLibraryUpsertWithWhereUniqueWithoutServerInput[]
  createMany?: Prisma.MediaLibraryCreateManyServerInputEnvelope
  set?: Prisma.MediaLibraryWhereUniqueInput | Prisma.MediaLibraryWhereUniqueInput[]
  disconnect?: Prisma.MediaLibraryWhereUniqueInput | Prisma.MediaLibraryWhereUniqueInput[]
  delete?: Prisma.MediaLibraryWhereUniqueInput | Prisma.MediaLibraryWhereUniqueInput[]
  connect?: Prisma.MediaLibraryWhereUniqueInput | Prisma.MediaLibraryWhereUniqueInput[]
  update?: Prisma.MediaLibraryUpdateWithWhereUniqueWithoutServerInput | Prisma.MediaLibraryUpdateWithWhereUniqueWithoutServerInput[]
  updateMany?: Prisma.MediaLibraryUpdateManyWithWhereWithoutServerInput | Prisma.MediaLibraryUpdateManyWithWhereWithoutServerInput[]
  deleteMany?: Prisma.MediaLibraryScalarWhereInput | Prisma.MediaLibraryScalarWhereInput[]
}

export type EnumLibraryTypeFieldUpdateOperationsInput = {
  set?: $Enums.LibraryType
}

export type MediaLibraryCreateNestedOneWithoutShowsInput = {
  create?: Prisma.XOR<Prisma.MediaLibraryCreateWithoutShowsInput, Prisma.MediaLibraryUncheckedCreateWithoutShowsInput>
  connectOrCreate?: Prisma.MediaLibraryCreateOrConnectWithoutShowsInput
  connect?: Prisma.MediaLibraryWhereUniqueInput
}

export type MediaLibraryUpdateOneRequiredWithoutShowsNestedInput = {
  create?: Prisma.XOR<Prisma.MediaLibraryCreateWithoutShowsInput, Prisma.MediaLibraryUncheckedCreateWithoutShowsInput>
  connectOrCreate?: Prisma.MediaLibraryCreateOrConnectWithoutShowsInput
  upsert?: Prisma.MediaLibraryUpsertWithoutShowsInput
  connect?: Prisma.MediaLibraryWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.MediaLibraryUpdateToOneWithWhereWithoutShowsInput, Prisma.MediaLibraryUpdateWithoutShowsInput>, Prisma.MediaLibraryUncheckedUpdateWithoutShowsInput>
}

export type MediaLibraryCreateNestedOneWithoutMoviesInput = {
  create?: Prisma.XOR<Prisma.MediaLibraryCreateWithoutMoviesInput, Prisma.MediaLibraryUncheckedCreateWithoutMoviesInput>
  connectOrCreate?: Prisma.MediaLibraryCreateOrConnectWithoutMoviesInput
  connect?: Prisma.MediaLibraryWhereUniqueInput
}

export type MediaLibraryUpdateOneRequiredWithoutMoviesNestedInput = {
  create?: Prisma.XOR<Prisma.MediaLibraryCreateWithoutMoviesInput, Prisma.MediaLibraryUncheckedCreateWithoutMoviesInput>
  connectOrCreate?: Prisma.MediaLibraryCreateOrConnectWithoutMoviesInput
  upsert?: Prisma.MediaLibraryUpsertWithoutMoviesInput
  connect?: Prisma.MediaLibraryWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.MediaLibraryUpdateToOneWithWhereWithoutMoviesInput, Prisma.MediaLibraryUpdateWithoutMoviesInput>, Prisma.MediaLibraryUncheckedUpdateWithoutMoviesInput>
}

export type MediaLibraryCreateWithoutServerInput = {
  id?: string
  name: string
  key: string
  type: $Enums.LibraryType
  createdAt?: Date | string
  updatedAt?: Date | string
  shows?: Prisma.MediaShowCreateNestedManyWithoutLibraryInput
  movies?: Prisma.MediaMovieCreateNestedManyWithoutLibraryInput
}

export type MediaLibraryUncheckedCreateWithoutServerInput = {
  id?: string
  name: string
  key: string
  type: $Enums.LibraryType
  createdAt?: Date | string
  updatedAt?: Date | string
  shows?: Prisma.MediaShowUncheckedCreateNestedManyWithoutLibraryInput
  movies?: Prisma.MediaMovieUncheckedCreateNestedManyWithoutLibraryInput
}

export type MediaLibraryCreateOrConnectWithoutServerInput = {
  where: Prisma.MediaLibraryWhereUniqueInput
  create: Prisma.XOR<Prisma.MediaLibraryCreateWithoutServerInput, Prisma.MediaLibraryUncheckedCreateWithoutServerInput>
}

export type MediaLibraryCreateManyServerInputEnvelope = {
  data: Prisma.MediaLibraryCreateManyServerInput | Prisma.MediaLibraryCreateManyServerInput[]
}

export type MediaLibraryUpsertWithWhereUniqueWithoutServerInput = {
  where: Prisma.MediaLibraryWhereUniqueInput
  update: Prisma.XOR<Prisma.MediaLibraryUpdateWithoutServerInput, Prisma.MediaLibraryUncheckedUpdateWithoutServerInput>
  create: Prisma.XOR<Prisma.MediaLibraryCreateWithoutServerInput, Prisma.MediaLibraryUncheckedCreateWithoutServerInput>
}

export type MediaLibraryUpdateWithWhereUniqueWithoutServerInput = {
  where: Prisma.MediaLibraryWhereUniqueInput
  data: Prisma.XOR<Prisma.MediaLibraryUpdateWithoutServerInput, Prisma.MediaLibraryUncheckedUpdateWithoutServerInput>
}

export type MediaLibraryUpdateManyWithWhereWithoutServerInput = {
  where: Prisma.MediaLibraryScalarWhereInput
  data: Prisma.XOR<Prisma.MediaLibraryUpdateManyMutationInput, Prisma.MediaLibraryUncheckedUpdateManyWithoutServerInput>
}

export type MediaLibraryScalarWhereInput = {
  AND?: Prisma.MediaLibraryScalarWhereInput | Prisma.MediaLibraryScalarWhereInput[]
  OR?: Prisma.MediaLibraryScalarWhereInput[]
  NOT?: Prisma.MediaLibraryScalarWhereInput | Prisma.MediaLibraryScalarWhereInput[]
  id?: Prisma.StringFilter<"MediaLibrary"> | string
  name?: Prisma.StringFilter<"MediaLibrary"> | string
  key?: Prisma.StringFilter<"MediaLibrary"> | string
  type?: Prisma.EnumLibraryTypeFilter<"MediaLibrary"> | $Enums.LibraryType
  serverId?: Prisma.StringFilter<"MediaLibrary"> | string
  createdAt?: Prisma.DateTimeFilter<"MediaLibrary"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"MediaLibrary"> | Date | string
}

export type MediaLibraryCreateWithoutShowsInput = {
  id?: string
  name: string
  key: string
  type: $Enums.LibraryType
  createdAt?: Date | string
  updatedAt?: Date | string
  server: Prisma.MediaServerCreateNestedOneWithoutLibrariesInput
  movies?: Prisma.MediaMovieCreateNestedManyWithoutLibraryInput
}

export type MediaLibraryUncheckedCreateWithoutShowsInput = {
  id?: string
  name: string
  key: string
  type: $Enums.LibraryType
  serverId: string
  createdAt?: Date | string
  updatedAt?: Date | string
  movies?: Prisma.MediaMovieUncheckedCreateNestedManyWithoutLibraryInput
}

export type MediaLibraryCreateOrConnectWithoutShowsInput = {
  where: Prisma.MediaLibraryWhereUniqueInput
  create: Prisma.XOR<Prisma.MediaLibraryCreateWithoutShowsInput, Prisma.MediaLibraryUncheckedCreateWithoutShowsInput>
}

export type MediaLibraryUpsertWithoutShowsInput = {
  update: Prisma.XOR<Prisma.MediaLibraryUpdateWithoutShowsInput, Prisma.MediaLibraryUncheckedUpdateWithoutShowsInput>
  create: Prisma.XOR<Prisma.MediaLibraryCreateWithoutShowsInput, Prisma.MediaLibraryUncheckedCreateWithoutShowsInput>
  where?: Prisma.MediaLibraryWhereInput
}

export type MediaLibraryUpdateToOneWithWhereWithoutShowsInput = {
  where?: Prisma.MediaLibraryWhereInput
  data: Prisma.XOR<Prisma.MediaLibraryUpdateWithoutShowsInput, Prisma.MediaLibraryUncheckedUpdateWithoutShowsInput>
}

export type MediaLibraryUpdateWithoutShowsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  key?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.EnumLibraryTypeFieldUpdateOperationsInput | $Enums.LibraryType
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  server?: Prisma.MediaServerUpdateOneRequiredWithoutLibrariesNestedInput
  movies?: Prisma.MediaMovieUpdateManyWithoutLibraryNestedInput
}

export type MediaLibraryUncheckedUpdateWithoutShowsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  key?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.EnumLibraryTypeFieldUpdateOperationsInput | $Enums.LibraryType
  serverId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  movies?: Prisma.MediaMovieUncheckedUpdateManyWithoutLibraryNestedInput
}

export type MediaLibraryCreateWithoutMoviesInput = {
  id?: string
  name: string
  key: string
  type: $Enums.LibraryType
  createdAt?: Date | string
  updatedAt?: Date | string
  server: Prisma.MediaServerCreateNestedOneWithoutLibrariesInput
  shows?: Prisma.MediaShowCreateNestedManyWithoutLibraryInput
}

export type MediaLibraryUncheckedCreateWithoutMoviesInput = {
  id?: string
  name: string
  key: string
  type: $Enums.LibraryType
  serverId: string
  createdAt?: Date | string
  updatedAt?: Date | string
  shows?: Prisma.MediaShowUncheckedCreateNestedManyWithoutLibraryInput
}

export type MediaLibraryCreateOrConnectWithoutMoviesInput = {
  where: Prisma.MediaLibraryWhereUniqueInput
  create: Prisma.XOR<Prisma.MediaLibraryCreateWithoutMoviesInput, Prisma.MediaLibraryUncheckedCreateWithoutMoviesInput>
}

export type MediaLibraryUpsertWithoutMoviesInput = {
  update: Prisma.XOR<Prisma.MediaLibraryUpdateWithoutMoviesInput, Prisma.MediaLibraryUncheckedUpdateWithoutMoviesInput>
  create: Prisma.XOR<Prisma.MediaLibraryCreateWithoutMoviesInput, Prisma.MediaLibraryUncheckedCreateWithoutMoviesInput>
  where?: Prisma.MediaLibraryWhereInput
}

export type MediaLibraryUpdateToOneWithWhereWithoutMoviesInput = {
  where?: Prisma.MediaLibraryWhereInput
  data: Prisma.XOR<Prisma.MediaLibraryUpdateWithoutMoviesInput, Prisma.MediaLibraryUncheckedUpdateWithoutMoviesInput>
}

export type MediaLibraryUpdateWithoutMoviesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  key?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.EnumLibraryTypeFieldUpdateOperationsInput | $Enums.LibraryType
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  server?: Prisma.MediaServerUpdateOneRequiredWithoutLibrariesNestedInput
  shows?: Prisma.MediaShowUpdateManyWithoutLibraryNestedInput
}

export type MediaLibraryUncheckedUpdateWithoutMoviesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  key?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.EnumLibraryTypeFieldUpdateOperationsInput | $Enums.LibraryType
  serverId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  shows?: Prisma.MediaShowUncheckedUpdateManyWithoutLibraryNestedInput
}

export type MediaLibraryCreateManyServerInput = {
  id?: string
  name: string
  key: string
  type: $Enums.LibraryType
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type MediaLibraryUpdateWithoutServerInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  key?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.EnumLibraryTypeFieldUpdateOperationsInput | $Enums.LibraryType
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  shows?: Prisma.MediaShowUpdateManyWithoutLibraryNestedInput
  movies?: Prisma.MediaMovieUpdateManyWithoutLibraryNestedInput
}

export type MediaLibraryUncheckedUpdateWithoutServerInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  key?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.EnumLibraryTypeFieldUpdateOperationsInput | $Enums.LibraryType
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  shows?: Prisma.MediaShowUncheckedUpdateManyWithoutLibraryNestedInput
  movies?: Prisma.MediaMovieUncheckedUpdateManyWithoutLibraryNestedInput
}

export type MediaLibraryUncheckedUpdateManyWithoutServerInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  key?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.EnumLibraryTypeFieldUpdateOperationsInput | $Enums.LibraryType
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}


/**
 * Count Type MediaLibraryCountOutputType
 */

export type MediaLibraryCountOutputType = {
  shows: number
  movies: number
}

export type MediaLibraryCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  shows?: boolean | MediaLibraryCountOutputTypeCountShowsArgs
  movies?: boolean | MediaLibraryCountOutputTypeCountMoviesArgs
}

/**
 * MediaLibraryCountOutputType without action
 */
export type MediaLibraryCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MediaLibraryCountOutputType
   */
  select?: Prisma.MediaLibraryCountOutputTypeSelect<ExtArgs> | null
}

/**
 * MediaLibraryCountOutputType without action
 */
export type MediaLibraryCountOutputTypeCountShowsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.MediaShowWhereInput
}

/**
 * MediaLibraryCountOutputType without action
 */
export type MediaLibraryCountOutputTypeCountMoviesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.MediaMovieWhereInput
}


export type MediaLibrarySelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  key?: boolean
  type?: boolean
  serverId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  server?: boolean | Prisma.MediaServerDefaultArgs<ExtArgs>
  shows?: boolean | Prisma.MediaLibrary$showsArgs<ExtArgs>
  movies?: boolean | Prisma.MediaLibrary$moviesArgs<ExtArgs>
  _count?: boolean | Prisma.MediaLibraryCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["mediaLibrary"]>

export type MediaLibrarySelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  key?: boolean
  type?: boolean
  serverId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  server?: boolean | Prisma.MediaServerDefaultArgs<ExtArgs>
}, ExtArgs["result"]["mediaLibrary"]>

export type MediaLibrarySelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  key?: boolean
  type?: boolean
  serverId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  server?: boolean | Prisma.MediaServerDefaultArgs<ExtArgs>
}, ExtArgs["result"]["mediaLibrary"]>

export type MediaLibrarySelectScalar = {
  id?: boolean
  name?: boolean
  key?: boolean
  type?: boolean
  serverId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type MediaLibraryOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "name" | "key" | "type" | "serverId" | "createdAt" | "updatedAt", ExtArgs["result"]["mediaLibrary"]>
export type MediaLibraryInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  server?: boolean | Prisma.MediaServerDefaultArgs<ExtArgs>
  shows?: boolean | Prisma.MediaLibrary$showsArgs<ExtArgs>
  movies?: boolean | Prisma.MediaLibrary$moviesArgs<ExtArgs>
  _count?: boolean | Prisma.MediaLibraryCountOutputTypeDefaultArgs<ExtArgs>
}
export type MediaLibraryIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  server?: boolean | Prisma.MediaServerDefaultArgs<ExtArgs>
}
export type MediaLibraryIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  server?: boolean | Prisma.MediaServerDefaultArgs<ExtArgs>
}

export type $MediaLibraryPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "MediaLibrary"
  objects: {
    server: Prisma.$MediaServerPayload<ExtArgs>
    shows: Prisma.$MediaShowPayload<ExtArgs>[]
    movies: Prisma.$MediaMoviePayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    name: string
    key: string
    type: $Enums.LibraryType
    serverId: string
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["mediaLibrary"]>
  composites: {}
}

export type MediaLibraryGetPayload<S extends boolean | null | undefined | MediaLibraryDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$MediaLibraryPayload, S>

export type MediaLibraryCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<MediaLibraryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: MediaLibraryCountAggregateInputType | true
  }

export interface MediaLibraryDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MediaLibrary'], meta: { name: 'MediaLibrary' } }
  /**
   * Find zero or one MediaLibrary that matches the filter.
   * @param {MediaLibraryFindUniqueArgs} args - Arguments to find a MediaLibrary
   * @example
   * // Get one MediaLibrary
   * const mediaLibrary = await prisma.mediaLibrary.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends MediaLibraryFindUniqueArgs>(args: Prisma.SelectSubset<T, MediaLibraryFindUniqueArgs<ExtArgs>>): Prisma.Prisma__MediaLibraryClient<runtime.Types.Result.GetResult<Prisma.$MediaLibraryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one MediaLibrary that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {MediaLibraryFindUniqueOrThrowArgs} args - Arguments to find a MediaLibrary
   * @example
   * // Get one MediaLibrary
   * const mediaLibrary = await prisma.mediaLibrary.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends MediaLibraryFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, MediaLibraryFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__MediaLibraryClient<runtime.Types.Result.GetResult<Prisma.$MediaLibraryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first MediaLibrary that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MediaLibraryFindFirstArgs} args - Arguments to find a MediaLibrary
   * @example
   * // Get one MediaLibrary
   * const mediaLibrary = await prisma.mediaLibrary.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends MediaLibraryFindFirstArgs>(args?: Prisma.SelectSubset<T, MediaLibraryFindFirstArgs<ExtArgs>>): Prisma.Prisma__MediaLibraryClient<runtime.Types.Result.GetResult<Prisma.$MediaLibraryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first MediaLibrary that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MediaLibraryFindFirstOrThrowArgs} args - Arguments to find a MediaLibrary
   * @example
   * // Get one MediaLibrary
   * const mediaLibrary = await prisma.mediaLibrary.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends MediaLibraryFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, MediaLibraryFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__MediaLibraryClient<runtime.Types.Result.GetResult<Prisma.$MediaLibraryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more MediaLibraries that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MediaLibraryFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all MediaLibraries
   * const mediaLibraries = await prisma.mediaLibrary.findMany()
   * 
   * // Get first 10 MediaLibraries
   * const mediaLibraries = await prisma.mediaLibrary.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const mediaLibraryWithIdOnly = await prisma.mediaLibrary.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends MediaLibraryFindManyArgs>(args?: Prisma.SelectSubset<T, MediaLibraryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MediaLibraryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a MediaLibrary.
   * @param {MediaLibraryCreateArgs} args - Arguments to create a MediaLibrary.
   * @example
   * // Create one MediaLibrary
   * const MediaLibrary = await prisma.mediaLibrary.create({
   *   data: {
   *     // ... data to create a MediaLibrary
   *   }
   * })
   * 
   */
  create<T extends MediaLibraryCreateArgs>(args: Prisma.SelectSubset<T, MediaLibraryCreateArgs<ExtArgs>>): Prisma.Prisma__MediaLibraryClient<runtime.Types.Result.GetResult<Prisma.$MediaLibraryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many MediaLibraries.
   * @param {MediaLibraryCreateManyArgs} args - Arguments to create many MediaLibraries.
   * @example
   * // Create many MediaLibraries
   * const mediaLibrary = await prisma.mediaLibrary.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends MediaLibraryCreateManyArgs>(args?: Prisma.SelectSubset<T, MediaLibraryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many MediaLibraries and returns the data saved in the database.
   * @param {MediaLibraryCreateManyAndReturnArgs} args - Arguments to create many MediaLibraries.
   * @example
   * // Create many MediaLibraries
   * const mediaLibrary = await prisma.mediaLibrary.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many MediaLibraries and only return the `id`
   * const mediaLibraryWithIdOnly = await prisma.mediaLibrary.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends MediaLibraryCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, MediaLibraryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MediaLibraryPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a MediaLibrary.
   * @param {MediaLibraryDeleteArgs} args - Arguments to delete one MediaLibrary.
   * @example
   * // Delete one MediaLibrary
   * const MediaLibrary = await prisma.mediaLibrary.delete({
   *   where: {
   *     // ... filter to delete one MediaLibrary
   *   }
   * })
   * 
   */
  delete<T extends MediaLibraryDeleteArgs>(args: Prisma.SelectSubset<T, MediaLibraryDeleteArgs<ExtArgs>>): Prisma.Prisma__MediaLibraryClient<runtime.Types.Result.GetResult<Prisma.$MediaLibraryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one MediaLibrary.
   * @param {MediaLibraryUpdateArgs} args - Arguments to update one MediaLibrary.
   * @example
   * // Update one MediaLibrary
   * const mediaLibrary = await prisma.mediaLibrary.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends MediaLibraryUpdateArgs>(args: Prisma.SelectSubset<T, MediaLibraryUpdateArgs<ExtArgs>>): Prisma.Prisma__MediaLibraryClient<runtime.Types.Result.GetResult<Prisma.$MediaLibraryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more MediaLibraries.
   * @param {MediaLibraryDeleteManyArgs} args - Arguments to filter MediaLibraries to delete.
   * @example
   * // Delete a few MediaLibraries
   * const { count } = await prisma.mediaLibrary.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends MediaLibraryDeleteManyArgs>(args?: Prisma.SelectSubset<T, MediaLibraryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more MediaLibraries.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MediaLibraryUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many MediaLibraries
   * const mediaLibrary = await prisma.mediaLibrary.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends MediaLibraryUpdateManyArgs>(args: Prisma.SelectSubset<T, MediaLibraryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more MediaLibraries and returns the data updated in the database.
   * @param {MediaLibraryUpdateManyAndReturnArgs} args - Arguments to update many MediaLibraries.
   * @example
   * // Update many MediaLibraries
   * const mediaLibrary = await prisma.mediaLibrary.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more MediaLibraries and only return the `id`
   * const mediaLibraryWithIdOnly = await prisma.mediaLibrary.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends MediaLibraryUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, MediaLibraryUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MediaLibraryPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one MediaLibrary.
   * @param {MediaLibraryUpsertArgs} args - Arguments to update or create a MediaLibrary.
   * @example
   * // Update or create a MediaLibrary
   * const mediaLibrary = await prisma.mediaLibrary.upsert({
   *   create: {
   *     // ... data to create a MediaLibrary
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the MediaLibrary we want to update
   *   }
   * })
   */
  upsert<T extends MediaLibraryUpsertArgs>(args: Prisma.SelectSubset<T, MediaLibraryUpsertArgs<ExtArgs>>): Prisma.Prisma__MediaLibraryClient<runtime.Types.Result.GetResult<Prisma.$MediaLibraryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of MediaLibraries.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MediaLibraryCountArgs} args - Arguments to filter MediaLibraries to count.
   * @example
   * // Count the number of MediaLibraries
   * const count = await prisma.mediaLibrary.count({
   *   where: {
   *     // ... the filter for the MediaLibraries we want to count
   *   }
   * })
  **/
  count<T extends MediaLibraryCountArgs>(
    args?: Prisma.Subset<T, MediaLibraryCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], MediaLibraryCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a MediaLibrary.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MediaLibraryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends MediaLibraryAggregateArgs>(args: Prisma.Subset<T, MediaLibraryAggregateArgs>): Prisma.PrismaPromise<GetMediaLibraryAggregateType<T>>

  /**
   * Group by MediaLibrary.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MediaLibraryGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends MediaLibraryGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: MediaLibraryGroupByArgs['orderBy'] }
      : { orderBy?: MediaLibraryGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, MediaLibraryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMediaLibraryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the MediaLibrary model
 */
readonly fields: MediaLibraryFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for MediaLibrary.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__MediaLibraryClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  server<T extends Prisma.MediaServerDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.MediaServerDefaultArgs<ExtArgs>>): Prisma.Prisma__MediaServerClient<runtime.Types.Result.GetResult<Prisma.$MediaServerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  shows<T extends Prisma.MediaLibrary$showsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.MediaLibrary$showsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MediaShowPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  movies<T extends Prisma.MediaLibrary$moviesArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.MediaLibrary$moviesArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MediaMoviePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the MediaLibrary model
 */
export interface MediaLibraryFieldRefs {
  readonly id: Prisma.FieldRef<"MediaLibrary", 'String'>
  readonly name: Prisma.FieldRef<"MediaLibrary", 'String'>
  readonly key: Prisma.FieldRef<"MediaLibrary", 'String'>
  readonly type: Prisma.FieldRef<"MediaLibrary", 'LibraryType'>
  readonly serverId: Prisma.FieldRef<"MediaLibrary", 'String'>
  readonly createdAt: Prisma.FieldRef<"MediaLibrary", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"MediaLibrary", 'DateTime'>
}
    

// Custom InputTypes
/**
 * MediaLibrary findUnique
 */
export type MediaLibraryFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MediaLibrary
   */
  select?: Prisma.MediaLibrarySelect<ExtArgs> | null
  /**
   * Omit specific fields from the MediaLibrary
   */
  omit?: Prisma.MediaLibraryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MediaLibraryInclude<ExtArgs> | null
  /**
   * Filter, which MediaLibrary to fetch.
   */
  where: Prisma.MediaLibraryWhereUniqueInput
}

/**
 * MediaLibrary findUniqueOrThrow
 */
export type MediaLibraryFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MediaLibrary
   */
  select?: Prisma.MediaLibrarySelect<ExtArgs> | null
  /**
   * Omit specific fields from the MediaLibrary
   */
  omit?: Prisma.MediaLibraryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MediaLibraryInclude<ExtArgs> | null
  /**
   * Filter, which MediaLibrary to fetch.
   */
  where: Prisma.MediaLibraryWhereUniqueInput
}

/**
 * MediaLibrary findFirst
 */
export type MediaLibraryFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MediaLibrary
   */
  select?: Prisma.MediaLibrarySelect<ExtArgs> | null
  /**
   * Omit specific fields from the MediaLibrary
   */
  omit?: Prisma.MediaLibraryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MediaLibraryInclude<ExtArgs> | null
  /**
   * Filter, which MediaLibrary to fetch.
   */
  where?: Prisma.MediaLibraryWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MediaLibraries to fetch.
   */
  orderBy?: Prisma.MediaLibraryOrderByWithRelationInput | Prisma.MediaLibraryOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for MediaLibraries.
   */
  cursor?: Prisma.MediaLibraryWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MediaLibraries from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MediaLibraries.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of MediaLibraries.
   */
  distinct?: Prisma.MediaLibraryScalarFieldEnum | Prisma.MediaLibraryScalarFieldEnum[]
}

/**
 * MediaLibrary findFirstOrThrow
 */
export type MediaLibraryFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MediaLibrary
   */
  select?: Prisma.MediaLibrarySelect<ExtArgs> | null
  /**
   * Omit specific fields from the MediaLibrary
   */
  omit?: Prisma.MediaLibraryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MediaLibraryInclude<ExtArgs> | null
  /**
   * Filter, which MediaLibrary to fetch.
   */
  where?: Prisma.MediaLibraryWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MediaLibraries to fetch.
   */
  orderBy?: Prisma.MediaLibraryOrderByWithRelationInput | Prisma.MediaLibraryOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for MediaLibraries.
   */
  cursor?: Prisma.MediaLibraryWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MediaLibraries from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MediaLibraries.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of MediaLibraries.
   */
  distinct?: Prisma.MediaLibraryScalarFieldEnum | Prisma.MediaLibraryScalarFieldEnum[]
}

/**
 * MediaLibrary findMany
 */
export type MediaLibraryFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MediaLibrary
   */
  select?: Prisma.MediaLibrarySelect<ExtArgs> | null
  /**
   * Omit specific fields from the MediaLibrary
   */
  omit?: Prisma.MediaLibraryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MediaLibraryInclude<ExtArgs> | null
  /**
   * Filter, which MediaLibraries to fetch.
   */
  where?: Prisma.MediaLibraryWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MediaLibraries to fetch.
   */
  orderBy?: Prisma.MediaLibraryOrderByWithRelationInput | Prisma.MediaLibraryOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing MediaLibraries.
   */
  cursor?: Prisma.MediaLibraryWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MediaLibraries from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MediaLibraries.
   */
  skip?: number
  distinct?: Prisma.MediaLibraryScalarFieldEnum | Prisma.MediaLibraryScalarFieldEnum[]
}

/**
 * MediaLibrary create
 */
export type MediaLibraryCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MediaLibrary
   */
  select?: Prisma.MediaLibrarySelect<ExtArgs> | null
  /**
   * Omit specific fields from the MediaLibrary
   */
  omit?: Prisma.MediaLibraryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MediaLibraryInclude<ExtArgs> | null
  /**
   * The data needed to create a MediaLibrary.
   */
  data: Prisma.XOR<Prisma.MediaLibraryCreateInput, Prisma.MediaLibraryUncheckedCreateInput>
}

/**
 * MediaLibrary createMany
 */
export type MediaLibraryCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many MediaLibraries.
   */
  data: Prisma.MediaLibraryCreateManyInput | Prisma.MediaLibraryCreateManyInput[]
}

/**
 * MediaLibrary createManyAndReturn
 */
export type MediaLibraryCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MediaLibrary
   */
  select?: Prisma.MediaLibrarySelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the MediaLibrary
   */
  omit?: Prisma.MediaLibraryOmit<ExtArgs> | null
  /**
   * The data used to create many MediaLibraries.
   */
  data: Prisma.MediaLibraryCreateManyInput | Prisma.MediaLibraryCreateManyInput[]
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MediaLibraryIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * MediaLibrary update
 */
export type MediaLibraryUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MediaLibrary
   */
  select?: Prisma.MediaLibrarySelect<ExtArgs> | null
  /**
   * Omit specific fields from the MediaLibrary
   */
  omit?: Prisma.MediaLibraryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MediaLibraryInclude<ExtArgs> | null
  /**
   * The data needed to update a MediaLibrary.
   */
  data: Prisma.XOR<Prisma.MediaLibraryUpdateInput, Prisma.MediaLibraryUncheckedUpdateInput>
  /**
   * Choose, which MediaLibrary to update.
   */
  where: Prisma.MediaLibraryWhereUniqueInput
}

/**
 * MediaLibrary updateMany
 */
export type MediaLibraryUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update MediaLibraries.
   */
  data: Prisma.XOR<Prisma.MediaLibraryUpdateManyMutationInput, Prisma.MediaLibraryUncheckedUpdateManyInput>
  /**
   * Filter which MediaLibraries to update
   */
  where?: Prisma.MediaLibraryWhereInput
  /**
   * Limit how many MediaLibraries to update.
   */
  limit?: number
}

/**
 * MediaLibrary updateManyAndReturn
 */
export type MediaLibraryUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MediaLibrary
   */
  select?: Prisma.MediaLibrarySelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the MediaLibrary
   */
  omit?: Prisma.MediaLibraryOmit<ExtArgs> | null
  /**
   * The data used to update MediaLibraries.
   */
  data: Prisma.XOR<Prisma.MediaLibraryUpdateManyMutationInput, Prisma.MediaLibraryUncheckedUpdateManyInput>
  /**
   * Filter which MediaLibraries to update
   */
  where?: Prisma.MediaLibraryWhereInput
  /**
   * Limit how many MediaLibraries to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MediaLibraryIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * MediaLibrary upsert
 */
export type MediaLibraryUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MediaLibrary
   */
  select?: Prisma.MediaLibrarySelect<ExtArgs> | null
  /**
   * Omit specific fields from the MediaLibrary
   */
  omit?: Prisma.MediaLibraryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MediaLibraryInclude<ExtArgs> | null
  /**
   * The filter to search for the MediaLibrary to update in case it exists.
   */
  where: Prisma.MediaLibraryWhereUniqueInput
  /**
   * In case the MediaLibrary found by the `where` argument doesn't exist, create a new MediaLibrary with this data.
   */
  create: Prisma.XOR<Prisma.MediaLibraryCreateInput, Prisma.MediaLibraryUncheckedCreateInput>
  /**
   * In case the MediaLibrary was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.MediaLibraryUpdateInput, Prisma.MediaLibraryUncheckedUpdateInput>
}

/**
 * MediaLibrary delete
 */
export type MediaLibraryDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MediaLibrary
   */
  select?: Prisma.MediaLibrarySelect<ExtArgs> | null
  /**
   * Omit specific fields from the MediaLibrary
   */
  omit?: Prisma.MediaLibraryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MediaLibraryInclude<ExtArgs> | null
  /**
   * Filter which MediaLibrary to delete.
   */
  where: Prisma.MediaLibraryWhereUniqueInput
}

/**
 * MediaLibrary deleteMany
 */
export type MediaLibraryDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which MediaLibraries to delete
   */
  where?: Prisma.MediaLibraryWhereInput
  /**
   * Limit how many MediaLibraries to delete.
   */
  limit?: number
}

/**
 * MediaLibrary.shows
 */
export type MediaLibrary$showsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MediaShow
   */
  select?: Prisma.MediaShowSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MediaShow
   */
  omit?: Prisma.MediaShowOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MediaShowInclude<ExtArgs> | null
  where?: Prisma.MediaShowWhereInput
  orderBy?: Prisma.MediaShowOrderByWithRelationInput | Prisma.MediaShowOrderByWithRelationInput[]
  cursor?: Prisma.MediaShowWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.MediaShowScalarFieldEnum | Prisma.MediaShowScalarFieldEnum[]
}

/**
 * MediaLibrary.movies
 */
export type MediaLibrary$moviesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MediaMovie
   */
  select?: Prisma.MediaMovieSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MediaMovie
   */
  omit?: Prisma.MediaMovieOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MediaMovieInclude<ExtArgs> | null
  where?: Prisma.MediaMovieWhereInput
  orderBy?: Prisma.MediaMovieOrderByWithRelationInput | Prisma.MediaMovieOrderByWithRelationInput[]
  cursor?: Prisma.MediaMovieWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.MediaMovieScalarFieldEnum | Prisma.MediaMovieScalarFieldEnum[]
}

/**
 * MediaLibrary without action
 */
export type MediaLibraryDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MediaLibrary
   */
  select?: Prisma.MediaLibrarySelect<ExtArgs> | null
  /**
   * Omit specific fields from the MediaLibrary
   */
  omit?: Prisma.MediaLibraryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MediaLibraryInclude<ExtArgs> | null
}
