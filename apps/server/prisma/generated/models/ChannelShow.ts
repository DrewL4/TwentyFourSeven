
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `ChannelShow` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model ChannelShow
 * 
 */
export type ChannelShowModel = runtime.Types.Result.DefaultSelection<Prisma.$ChannelShowPayload>

export type AggregateChannelShow = {
  _count: ChannelShowCountAggregateOutputType | null
  _avg: ChannelShowAvgAggregateOutputType | null
  _sum: ChannelShowSumAggregateOutputType | null
  _min: ChannelShowMinAggregateOutputType | null
  _max: ChannelShowMaxAggregateOutputType | null
}

export type ChannelShowAvgAggregateOutputType = {
  order: number | null
  weight: number | null
  blockShuffleSize: number | null
  maxConsecutiveEpisodes: number | null
}

export type ChannelShowSumAggregateOutputType = {
  order: number | null
  weight: number | null
  blockShuffleSize: number | null
  maxConsecutiveEpisodes: number | null
}

export type ChannelShowMinAggregateOutputType = {
  id: string | null
  channelId: string | null
  showId: string | null
  order: number | null
  weight: number | null
  shuffle: boolean | null
  shuffleOrder: string | null
  blockShuffle: boolean | null
  blockShuffleSize: number | null
  lastPlayedEpisodeId: string | null
  lastPlayedAt: Date | null
  respectOrder: boolean | null
  maxConsecutiveEpisodes: number | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type ChannelShowMaxAggregateOutputType = {
  id: string | null
  channelId: string | null
  showId: string | null
  order: number | null
  weight: number | null
  shuffle: boolean | null
  shuffleOrder: string | null
  blockShuffle: boolean | null
  blockShuffleSize: number | null
  lastPlayedEpisodeId: string | null
  lastPlayedAt: Date | null
  respectOrder: boolean | null
  maxConsecutiveEpisodes: number | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type ChannelShowCountAggregateOutputType = {
  id: number
  channelId: number
  showId: number
  order: number
  weight: number
  shuffle: number
  shuffleOrder: number
  blockShuffle: number
  blockShuffleSize: number
  lastPlayedEpisodeId: number
  lastPlayedAt: number
  respectOrder: number
  maxConsecutiveEpisodes: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type ChannelShowAvgAggregateInputType = {
  order?: true
  weight?: true
  blockShuffleSize?: true
  maxConsecutiveEpisodes?: true
}

export type ChannelShowSumAggregateInputType = {
  order?: true
  weight?: true
  blockShuffleSize?: true
  maxConsecutiveEpisodes?: true
}

export type ChannelShowMinAggregateInputType = {
  id?: true
  channelId?: true
  showId?: true
  order?: true
  weight?: true
  shuffle?: true
  shuffleOrder?: true
  blockShuffle?: true
  blockShuffleSize?: true
  lastPlayedEpisodeId?: true
  lastPlayedAt?: true
  respectOrder?: true
  maxConsecutiveEpisodes?: true
  createdAt?: true
  updatedAt?: true
}

export type ChannelShowMaxAggregateInputType = {
  id?: true
  channelId?: true
  showId?: true
  order?: true
  weight?: true
  shuffle?: true
  shuffleOrder?: true
  blockShuffle?: true
  blockShuffleSize?: true
  lastPlayedEpisodeId?: true
  lastPlayedAt?: true
  respectOrder?: true
  maxConsecutiveEpisodes?: true
  createdAt?: true
  updatedAt?: true
}

export type ChannelShowCountAggregateInputType = {
  id?: true
  channelId?: true
  showId?: true
  order?: true
  weight?: true
  shuffle?: true
  shuffleOrder?: true
  blockShuffle?: true
  blockShuffleSize?: true
  lastPlayedEpisodeId?: true
  lastPlayedAt?: true
  respectOrder?: true
  maxConsecutiveEpisodes?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type ChannelShowAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ChannelShow to aggregate.
   */
  where?: Prisma.ChannelShowWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ChannelShows to fetch.
   */
  orderBy?: Prisma.ChannelShowOrderByWithRelationInput | Prisma.ChannelShowOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ChannelShowWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ChannelShows from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ChannelShows.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned ChannelShows
  **/
  _count?: true | ChannelShowCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: ChannelShowAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: ChannelShowSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ChannelShowMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ChannelShowMaxAggregateInputType
}

export type GetChannelShowAggregateType<T extends ChannelShowAggregateArgs> = {
      [P in keyof T & keyof AggregateChannelShow]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateChannelShow[P]>
    : Prisma.GetScalarType<T[P], AggregateChannelShow[P]>
}




export type ChannelShowGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ChannelShowWhereInput
  orderBy?: Prisma.ChannelShowOrderByWithAggregationInput | Prisma.ChannelShowOrderByWithAggregationInput[]
  by: Prisma.ChannelShowScalarFieldEnum[] | Prisma.ChannelShowScalarFieldEnum
  having?: Prisma.ChannelShowScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ChannelShowCountAggregateInputType | true
  _avg?: ChannelShowAvgAggregateInputType
  _sum?: ChannelShowSumAggregateInputType
  _min?: ChannelShowMinAggregateInputType
  _max?: ChannelShowMaxAggregateInputType
}

export type ChannelShowGroupByOutputType = {
  id: string
  channelId: string
  showId: string
  order: number
  weight: number
  shuffle: boolean
  shuffleOrder: string
  blockShuffle: boolean
  blockShuffleSize: number
  lastPlayedEpisodeId: string | null
  lastPlayedAt: Date | null
  respectOrder: boolean
  maxConsecutiveEpisodes: number
  createdAt: Date
  updatedAt: Date
  _count: ChannelShowCountAggregateOutputType | null
  _avg: ChannelShowAvgAggregateOutputType | null
  _sum: ChannelShowSumAggregateOutputType | null
  _min: ChannelShowMinAggregateOutputType | null
  _max: ChannelShowMaxAggregateOutputType | null
}

type GetChannelShowGroupByPayload<T extends ChannelShowGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ChannelShowGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ChannelShowGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ChannelShowGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ChannelShowGroupByOutputType[P]>
      }
    >
  > 



export type ChannelShowWhereInput = {
  AND?: Prisma.ChannelShowWhereInput | Prisma.ChannelShowWhereInput[]
  OR?: Prisma.ChannelShowWhereInput[]
  NOT?: Prisma.ChannelShowWhereInput | Prisma.ChannelShowWhereInput[]
  id?: Prisma.StringFilter<"ChannelShow"> | string
  channelId?: Prisma.StringFilter<"ChannelShow"> | string
  showId?: Prisma.StringFilter<"ChannelShow"> | string
  order?: Prisma.IntFilter<"ChannelShow"> | number
  weight?: Prisma.IntFilter<"ChannelShow"> | number
  shuffle?: Prisma.BoolFilter<"ChannelShow"> | boolean
  shuffleOrder?: Prisma.StringFilter<"ChannelShow"> | string
  blockShuffle?: Prisma.BoolFilter<"ChannelShow"> | boolean
  blockShuffleSize?: Prisma.IntFilter<"ChannelShow"> | number
  lastPlayedEpisodeId?: Prisma.StringNullableFilter<"ChannelShow"> | string | null
  lastPlayedAt?: Prisma.DateTimeNullableFilter<"ChannelShow"> | Date | string | null
  respectOrder?: Prisma.BoolFilter<"ChannelShow"> | boolean
  maxConsecutiveEpisodes?: Prisma.IntFilter<"ChannelShow"> | number
  createdAt?: Prisma.DateTimeFilter<"ChannelShow"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"ChannelShow"> | Date | string
  channel?: Prisma.XOR<Prisma.ChannelScalarRelationFilter, Prisma.ChannelWhereInput>
  show?: Prisma.XOR<Prisma.MediaShowScalarRelationFilter, Prisma.MediaShowWhereInput>
}

export type ChannelShowOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  channelId?: Prisma.SortOrder
  showId?: Prisma.SortOrder
  order?: Prisma.SortOrder
  weight?: Prisma.SortOrder
  shuffle?: Prisma.SortOrder
  shuffleOrder?: Prisma.SortOrder
  blockShuffle?: Prisma.SortOrder
  blockShuffleSize?: Prisma.SortOrder
  lastPlayedEpisodeId?: Prisma.SortOrderInput | Prisma.SortOrder
  lastPlayedAt?: Prisma.SortOrderInput | Prisma.SortOrder
  respectOrder?: Prisma.SortOrder
  maxConsecutiveEpisodes?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  channel?: Prisma.ChannelOrderByWithRelationInput
  show?: Prisma.MediaShowOrderByWithRelationInput
}

export type ChannelShowWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  channelId_showId?: Prisma.ChannelShowChannelIdShowIdCompoundUniqueInput
  AND?: Prisma.ChannelShowWhereInput | Prisma.ChannelShowWhereInput[]
  OR?: Prisma.ChannelShowWhereInput[]
  NOT?: Prisma.ChannelShowWhereInput | Prisma.ChannelShowWhereInput[]
  channelId?: Prisma.StringFilter<"ChannelShow"> | string
  showId?: Prisma.StringFilter<"ChannelShow"> | string
  order?: Prisma.IntFilter<"ChannelShow"> | number
  weight?: Prisma.IntFilter<"ChannelShow"> | number
  shuffle?: Prisma.BoolFilter<"ChannelShow"> | boolean
  shuffleOrder?: Prisma.StringFilter<"ChannelShow"> | string
  blockShuffle?: Prisma.BoolFilter<"ChannelShow"> | boolean
  blockShuffleSize?: Prisma.IntFilter<"ChannelShow"> | number
  lastPlayedEpisodeId?: Prisma.StringNullableFilter<"ChannelShow"> | string | null
  lastPlayedAt?: Prisma.DateTimeNullableFilter<"ChannelShow"> | Date | string | null
  respectOrder?: Prisma.BoolFilter<"ChannelShow"> | boolean
  maxConsecutiveEpisodes?: Prisma.IntFilter<"ChannelShow"> | number
  createdAt?: Prisma.DateTimeFilter<"ChannelShow"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"ChannelShow"> | Date | string
  channel?: Prisma.XOR<Prisma.ChannelScalarRelationFilter, Prisma.ChannelWhereInput>
  show?: Prisma.XOR<Prisma.MediaShowScalarRelationFilter, Prisma.MediaShowWhereInput>
}, "id" | "channelId_showId">

export type ChannelShowOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  channelId?: Prisma.SortOrder
  showId?: Prisma.SortOrder
  order?: Prisma.SortOrder
  weight?: Prisma.SortOrder
  shuffle?: Prisma.SortOrder
  shuffleOrder?: Prisma.SortOrder
  blockShuffle?: Prisma.SortOrder
  blockShuffleSize?: Prisma.SortOrder
  lastPlayedEpisodeId?: Prisma.SortOrderInput | Prisma.SortOrder
  lastPlayedAt?: Prisma.SortOrderInput | Prisma.SortOrder
  respectOrder?: Prisma.SortOrder
  maxConsecutiveEpisodes?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.ChannelShowCountOrderByAggregateInput
  _avg?: Prisma.ChannelShowAvgOrderByAggregateInput
  _max?: Prisma.ChannelShowMaxOrderByAggregateInput
  _min?: Prisma.ChannelShowMinOrderByAggregateInput
  _sum?: Prisma.ChannelShowSumOrderByAggregateInput
}

export type ChannelShowScalarWhereWithAggregatesInput = {
  AND?: Prisma.ChannelShowScalarWhereWithAggregatesInput | Prisma.ChannelShowScalarWhereWithAggregatesInput[]
  OR?: Prisma.ChannelShowScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ChannelShowScalarWhereWithAggregatesInput | Prisma.ChannelShowScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"ChannelShow"> | string
  channelId?: Prisma.StringWithAggregatesFilter<"ChannelShow"> | string
  showId?: Prisma.StringWithAggregatesFilter<"ChannelShow"> | string
  order?: Prisma.IntWithAggregatesFilter<"ChannelShow"> | number
  weight?: Prisma.IntWithAggregatesFilter<"ChannelShow"> | number
  shuffle?: Prisma.BoolWithAggregatesFilter<"ChannelShow"> | boolean
  shuffleOrder?: Prisma.StringWithAggregatesFilter<"ChannelShow"> | string
  blockShuffle?: Prisma.BoolWithAggregatesFilter<"ChannelShow"> | boolean
  blockShuffleSize?: Prisma.IntWithAggregatesFilter<"ChannelShow"> | number
  lastPlayedEpisodeId?: Prisma.StringNullableWithAggregatesFilter<"ChannelShow"> | string | null
  lastPlayedAt?: Prisma.DateTimeNullableWithAggregatesFilter<"ChannelShow"> | Date | string | null
  respectOrder?: Prisma.BoolWithAggregatesFilter<"ChannelShow"> | boolean
  maxConsecutiveEpisodes?: Prisma.IntWithAggregatesFilter<"ChannelShow"> | number
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"ChannelShow"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"ChannelShow"> | Date | string
}

export type ChannelShowCreateInput = {
  id?: string
  order?: number
  weight?: number
  shuffle?: boolean
  shuffleOrder?: string
  blockShuffle?: boolean
  blockShuffleSize?: number
  lastPlayedEpisodeId?: string | null
  lastPlayedAt?: Date | string | null
  respectOrder?: boolean
  maxConsecutiveEpisodes?: number
  createdAt?: Date | string
  updatedAt?: Date | string
  channel: Prisma.ChannelCreateNestedOneWithoutChannelShowsInput
  show: Prisma.MediaShowCreateNestedOneWithoutChannelShowsInput
}

export type ChannelShowUncheckedCreateInput = {
  id?: string
  channelId: string
  showId: string
  order?: number
  weight?: number
  shuffle?: boolean
  shuffleOrder?: string
  blockShuffle?: boolean
  blockShuffleSize?: number
  lastPlayedEpisodeId?: string | null
  lastPlayedAt?: Date | string | null
  respectOrder?: boolean
  maxConsecutiveEpisodes?: number
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ChannelShowUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  order?: Prisma.IntFieldUpdateOperationsInput | number
  weight?: Prisma.IntFieldUpdateOperationsInput | number
  shuffle?: Prisma.BoolFieldUpdateOperationsInput | boolean
  shuffleOrder?: Prisma.StringFieldUpdateOperationsInput | string
  blockShuffle?: Prisma.BoolFieldUpdateOperationsInput | boolean
  blockShuffleSize?: Prisma.IntFieldUpdateOperationsInput | number
  lastPlayedEpisodeId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  lastPlayedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  respectOrder?: Prisma.BoolFieldUpdateOperationsInput | boolean
  maxConsecutiveEpisodes?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  channel?: Prisma.ChannelUpdateOneRequiredWithoutChannelShowsNestedInput
  show?: Prisma.MediaShowUpdateOneRequiredWithoutChannelShowsNestedInput
}

export type ChannelShowUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  channelId?: Prisma.StringFieldUpdateOperationsInput | string
  showId?: Prisma.StringFieldUpdateOperationsInput | string
  order?: Prisma.IntFieldUpdateOperationsInput | number
  weight?: Prisma.IntFieldUpdateOperationsInput | number
  shuffle?: Prisma.BoolFieldUpdateOperationsInput | boolean
  shuffleOrder?: Prisma.StringFieldUpdateOperationsInput | string
  blockShuffle?: Prisma.BoolFieldUpdateOperationsInput | boolean
  blockShuffleSize?: Prisma.IntFieldUpdateOperationsInput | number
  lastPlayedEpisodeId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  lastPlayedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  respectOrder?: Prisma.BoolFieldUpdateOperationsInput | boolean
  maxConsecutiveEpisodes?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ChannelShowCreateManyInput = {
  id?: string
  channelId: string
  showId: string
  order?: number
  weight?: number
  shuffle?: boolean
  shuffleOrder?: string
  blockShuffle?: boolean
  blockShuffleSize?: number
  lastPlayedEpisodeId?: string | null
  lastPlayedAt?: Date | string | null
  respectOrder?: boolean
  maxConsecutiveEpisodes?: number
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ChannelShowUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  order?: Prisma.IntFieldUpdateOperationsInput | number
  weight?: Prisma.IntFieldUpdateOperationsInput | number
  shuffle?: Prisma.BoolFieldUpdateOperationsInput | boolean
  shuffleOrder?: Prisma.StringFieldUpdateOperationsInput | string
  blockShuffle?: Prisma.BoolFieldUpdateOperationsInput | boolean
  blockShuffleSize?: Prisma.IntFieldUpdateOperationsInput | number
  lastPlayedEpisodeId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  lastPlayedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  respectOrder?: Prisma.BoolFieldUpdateOperationsInput | boolean
  maxConsecutiveEpisodes?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ChannelShowUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  channelId?: Prisma.StringFieldUpdateOperationsInput | string
  showId?: Prisma.StringFieldUpdateOperationsInput | string
  order?: Prisma.IntFieldUpdateOperationsInput | number
  weight?: Prisma.IntFieldUpdateOperationsInput | number
  shuffle?: Prisma.BoolFieldUpdateOperationsInput | boolean
  shuffleOrder?: Prisma.StringFieldUpdateOperationsInput | string
  blockShuffle?: Prisma.BoolFieldUpdateOperationsInput | boolean
  blockShuffleSize?: Prisma.IntFieldUpdateOperationsInput | number
  lastPlayedEpisodeId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  lastPlayedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  respectOrder?: Prisma.BoolFieldUpdateOperationsInput | boolean
  maxConsecutiveEpisodes?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ChannelShowListRelationFilter = {
  every?: Prisma.ChannelShowWhereInput
  some?: Prisma.ChannelShowWhereInput
  none?: Prisma.ChannelShowWhereInput
}

export type ChannelShowOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type ChannelShowChannelIdShowIdCompoundUniqueInput = {
  channelId: string
  showId: string
}

export type ChannelShowCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  channelId?: Prisma.SortOrder
  showId?: Prisma.SortOrder
  order?: Prisma.SortOrder
  weight?: Prisma.SortOrder
  shuffle?: Prisma.SortOrder
  shuffleOrder?: Prisma.SortOrder
  blockShuffle?: Prisma.SortOrder
  blockShuffleSize?: Prisma.SortOrder
  lastPlayedEpisodeId?: Prisma.SortOrder
  lastPlayedAt?: Prisma.SortOrder
  respectOrder?: Prisma.SortOrder
  maxConsecutiveEpisodes?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ChannelShowAvgOrderByAggregateInput = {
  order?: Prisma.SortOrder
  weight?: Prisma.SortOrder
  blockShuffleSize?: Prisma.SortOrder
  maxConsecutiveEpisodes?: Prisma.SortOrder
}

export type ChannelShowMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  channelId?: Prisma.SortOrder
  showId?: Prisma.SortOrder
  order?: Prisma.SortOrder
  weight?: Prisma.SortOrder
  shuffle?: Prisma.SortOrder
  shuffleOrder?: Prisma.SortOrder
  blockShuffle?: Prisma.SortOrder
  blockShuffleSize?: Prisma.SortOrder
  lastPlayedEpisodeId?: Prisma.SortOrder
  lastPlayedAt?: Prisma.SortOrder
  respectOrder?: Prisma.SortOrder
  maxConsecutiveEpisodes?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ChannelShowMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  channelId?: Prisma.SortOrder
  showId?: Prisma.SortOrder
  order?: Prisma.SortOrder
  weight?: Prisma.SortOrder
  shuffle?: Prisma.SortOrder
  shuffleOrder?: Prisma.SortOrder
  blockShuffle?: Prisma.SortOrder
  blockShuffleSize?: Prisma.SortOrder
  lastPlayedEpisodeId?: Prisma.SortOrder
  lastPlayedAt?: Prisma.SortOrder
  respectOrder?: Prisma.SortOrder
  maxConsecutiveEpisodes?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ChannelShowSumOrderByAggregateInput = {
  order?: Prisma.SortOrder
  weight?: Prisma.SortOrder
  blockShuffleSize?: Prisma.SortOrder
  maxConsecutiveEpisodes?: Prisma.SortOrder
}

export type ChannelShowCreateNestedManyWithoutShowInput = {
  create?: Prisma.XOR<Prisma.ChannelShowCreateWithoutShowInput, Prisma.ChannelShowUncheckedCreateWithoutShowInput> | Prisma.ChannelShowCreateWithoutShowInput[] | Prisma.ChannelShowUncheckedCreateWithoutShowInput[]
  connectOrCreate?: Prisma.ChannelShowCreateOrConnectWithoutShowInput | Prisma.ChannelShowCreateOrConnectWithoutShowInput[]
  createMany?: Prisma.ChannelShowCreateManyShowInputEnvelope
  connect?: Prisma.ChannelShowWhereUniqueInput | Prisma.ChannelShowWhereUniqueInput[]
}

export type ChannelShowUncheckedCreateNestedManyWithoutShowInput = {
  create?: Prisma.XOR<Prisma.ChannelShowCreateWithoutShowInput, Prisma.ChannelShowUncheckedCreateWithoutShowInput> | Prisma.ChannelShowCreateWithoutShowInput[] | Prisma.ChannelShowUncheckedCreateWithoutShowInput[]
  connectOrCreate?: Prisma.ChannelShowCreateOrConnectWithoutShowInput | Prisma.ChannelShowCreateOrConnectWithoutShowInput[]
  createMany?: Prisma.ChannelShowCreateManyShowInputEnvelope
  connect?: Prisma.ChannelShowWhereUniqueInput | Prisma.ChannelShowWhereUniqueInput[]
}

export type ChannelShowUpdateManyWithoutShowNestedInput = {
  create?: Prisma.XOR<Prisma.ChannelShowCreateWithoutShowInput, Prisma.ChannelShowUncheckedCreateWithoutShowInput> | Prisma.ChannelShowCreateWithoutShowInput[] | Prisma.ChannelShowUncheckedCreateWithoutShowInput[]
  connectOrCreate?: Prisma.ChannelShowCreateOrConnectWithoutShowInput | Prisma.ChannelShowCreateOrConnectWithoutShowInput[]
  upsert?: Prisma.ChannelShowUpsertWithWhereUniqueWithoutShowInput | Prisma.ChannelShowUpsertWithWhereUniqueWithoutShowInput[]
  createMany?: Prisma.ChannelShowCreateManyShowInputEnvelope
  set?: Prisma.ChannelShowWhereUniqueInput | Prisma.ChannelShowWhereUniqueInput[]
  disconnect?: Prisma.ChannelShowWhereUniqueInput | Prisma.ChannelShowWhereUniqueInput[]
  delete?: Prisma.ChannelShowWhereUniqueInput | Prisma.ChannelShowWhereUniqueInput[]
  connect?: Prisma.ChannelShowWhereUniqueInput | Prisma.ChannelShowWhereUniqueInput[]
  update?: Prisma.ChannelShowUpdateWithWhereUniqueWithoutShowInput | Prisma.ChannelShowUpdateWithWhereUniqueWithoutShowInput[]
  updateMany?: Prisma.ChannelShowUpdateManyWithWhereWithoutShowInput | Prisma.ChannelShowUpdateManyWithWhereWithoutShowInput[]
  deleteMany?: Prisma.ChannelShowScalarWhereInput | Prisma.ChannelShowScalarWhereInput[]
}

export type ChannelShowUncheckedUpdateManyWithoutShowNestedInput = {
  create?: Prisma.XOR<Prisma.ChannelShowCreateWithoutShowInput, Prisma.ChannelShowUncheckedCreateWithoutShowInput> | Prisma.ChannelShowCreateWithoutShowInput[] | Prisma.ChannelShowUncheckedCreateWithoutShowInput[]
  connectOrCreate?: Prisma.ChannelShowCreateOrConnectWithoutShowInput | Prisma.ChannelShowCreateOrConnectWithoutShowInput[]
  upsert?: Prisma.ChannelShowUpsertWithWhereUniqueWithoutShowInput | Prisma.ChannelShowUpsertWithWhereUniqueWithoutShowInput[]
  createMany?: Prisma.ChannelShowCreateManyShowInputEnvelope
  set?: Prisma.ChannelShowWhereUniqueInput | Prisma.ChannelShowWhereUniqueInput[]
  disconnect?: Prisma.ChannelShowWhereUniqueInput | Prisma.ChannelShowWhereUniqueInput[]
  delete?: Prisma.ChannelShowWhereUniqueInput | Prisma.ChannelShowWhereUniqueInput[]
  connect?: Prisma.ChannelShowWhereUniqueInput | Prisma.ChannelShowWhereUniqueInput[]
  update?: Prisma.ChannelShowUpdateWithWhereUniqueWithoutShowInput | Prisma.ChannelShowUpdateWithWhereUniqueWithoutShowInput[]
  updateMany?: Prisma.ChannelShowUpdateManyWithWhereWithoutShowInput | Prisma.ChannelShowUpdateManyWithWhereWithoutShowInput[]
  deleteMany?: Prisma.ChannelShowScalarWhereInput | Prisma.ChannelShowScalarWhereInput[]
}

export type ChannelShowCreateNestedManyWithoutChannelInput = {
  create?: Prisma.XOR<Prisma.ChannelShowCreateWithoutChannelInput, Prisma.ChannelShowUncheckedCreateWithoutChannelInput> | Prisma.ChannelShowCreateWithoutChannelInput[] | Prisma.ChannelShowUncheckedCreateWithoutChannelInput[]
  connectOrCreate?: Prisma.ChannelShowCreateOrConnectWithoutChannelInput | Prisma.ChannelShowCreateOrConnectWithoutChannelInput[]
  createMany?: Prisma.ChannelShowCreateManyChannelInputEnvelope
  connect?: Prisma.ChannelShowWhereUniqueInput | Prisma.ChannelShowWhereUniqueInput[]
}

export type ChannelShowUncheckedCreateNestedManyWithoutChannelInput = {
  create?: Prisma.XOR<Prisma.ChannelShowCreateWithoutChannelInput, Prisma.ChannelShowUncheckedCreateWithoutChannelInput> | Prisma.ChannelShowCreateWithoutChannelInput[] | Prisma.ChannelShowUncheckedCreateWithoutChannelInput[]
  connectOrCreate?: Prisma.ChannelShowCreateOrConnectWithoutChannelInput | Prisma.ChannelShowCreateOrConnectWithoutChannelInput[]
  createMany?: Prisma.ChannelShowCreateManyChannelInputEnvelope
  connect?: Prisma.ChannelShowWhereUniqueInput | Prisma.ChannelShowWhereUniqueInput[]
}

export type ChannelShowUpdateManyWithoutChannelNestedInput = {
  create?: Prisma.XOR<Prisma.ChannelShowCreateWithoutChannelInput, Prisma.ChannelShowUncheckedCreateWithoutChannelInput> | Prisma.ChannelShowCreateWithoutChannelInput[] | Prisma.ChannelShowUncheckedCreateWithoutChannelInput[]
  connectOrCreate?: Prisma.ChannelShowCreateOrConnectWithoutChannelInput | Prisma.ChannelShowCreateOrConnectWithoutChannelInput[]
  upsert?: Prisma.ChannelShowUpsertWithWhereUniqueWithoutChannelInput | Prisma.ChannelShowUpsertWithWhereUniqueWithoutChannelInput[]
  createMany?: Prisma.ChannelShowCreateManyChannelInputEnvelope
  set?: Prisma.ChannelShowWhereUniqueInput | Prisma.ChannelShowWhereUniqueInput[]
  disconnect?: Prisma.ChannelShowWhereUniqueInput | Prisma.ChannelShowWhereUniqueInput[]
  delete?: Prisma.ChannelShowWhereUniqueInput | Prisma.ChannelShowWhereUniqueInput[]
  connect?: Prisma.ChannelShowWhereUniqueInput | Prisma.ChannelShowWhereUniqueInput[]
  update?: Prisma.ChannelShowUpdateWithWhereUniqueWithoutChannelInput | Prisma.ChannelShowUpdateWithWhereUniqueWithoutChannelInput[]
  updateMany?: Prisma.ChannelShowUpdateManyWithWhereWithoutChannelInput | Prisma.ChannelShowUpdateManyWithWhereWithoutChannelInput[]
  deleteMany?: Prisma.ChannelShowScalarWhereInput | Prisma.ChannelShowScalarWhereInput[]
}

export type ChannelShowUncheckedUpdateManyWithoutChannelNestedInput = {
  create?: Prisma.XOR<Prisma.ChannelShowCreateWithoutChannelInput, Prisma.ChannelShowUncheckedCreateWithoutChannelInput> | Prisma.ChannelShowCreateWithoutChannelInput[] | Prisma.ChannelShowUncheckedCreateWithoutChannelInput[]
  connectOrCreate?: Prisma.ChannelShowCreateOrConnectWithoutChannelInput | Prisma.ChannelShowCreateOrConnectWithoutChannelInput[]
  upsert?: Prisma.ChannelShowUpsertWithWhereUniqueWithoutChannelInput | Prisma.ChannelShowUpsertWithWhereUniqueWithoutChannelInput[]
  createMany?: Prisma.ChannelShowCreateManyChannelInputEnvelope
  set?: Prisma.ChannelShowWhereUniqueInput | Prisma.ChannelShowWhereUniqueInput[]
  disconnect?: Prisma.ChannelShowWhereUniqueInput | Prisma.ChannelShowWhereUniqueInput[]
  delete?: Prisma.ChannelShowWhereUniqueInput | Prisma.ChannelShowWhereUniqueInput[]
  connect?: Prisma.ChannelShowWhereUniqueInput | Prisma.ChannelShowWhereUniqueInput[]
  update?: Prisma.ChannelShowUpdateWithWhereUniqueWithoutChannelInput | Prisma.ChannelShowUpdateWithWhereUniqueWithoutChannelInput[]
  updateMany?: Prisma.ChannelShowUpdateManyWithWhereWithoutChannelInput | Prisma.ChannelShowUpdateManyWithWhereWithoutChannelInput[]
  deleteMany?: Prisma.ChannelShowScalarWhereInput | Prisma.ChannelShowScalarWhereInput[]
}

export type ChannelShowCreateWithoutShowInput = {
  id?: string
  order?: number
  weight?: number
  shuffle?: boolean
  shuffleOrder?: string
  blockShuffle?: boolean
  blockShuffleSize?: number
  lastPlayedEpisodeId?: string | null
  lastPlayedAt?: Date | string | null
  respectOrder?: boolean
  maxConsecutiveEpisodes?: number
  createdAt?: Date | string
  updatedAt?: Date | string
  channel: Prisma.ChannelCreateNestedOneWithoutChannelShowsInput
}

export type ChannelShowUncheckedCreateWithoutShowInput = {
  id?: string
  channelId: string
  order?: number
  weight?: number
  shuffle?: boolean
  shuffleOrder?: string
  blockShuffle?: boolean
  blockShuffleSize?: number
  lastPlayedEpisodeId?: string | null
  lastPlayedAt?: Date | string | null
  respectOrder?: boolean
  maxConsecutiveEpisodes?: number
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ChannelShowCreateOrConnectWithoutShowInput = {
  where: Prisma.ChannelShowWhereUniqueInput
  create: Prisma.XOR<Prisma.ChannelShowCreateWithoutShowInput, Prisma.ChannelShowUncheckedCreateWithoutShowInput>
}

export type ChannelShowCreateManyShowInputEnvelope = {
  data: Prisma.ChannelShowCreateManyShowInput | Prisma.ChannelShowCreateManyShowInput[]
}

export type ChannelShowUpsertWithWhereUniqueWithoutShowInput = {
  where: Prisma.ChannelShowWhereUniqueInput
  update: Prisma.XOR<Prisma.ChannelShowUpdateWithoutShowInput, Prisma.ChannelShowUncheckedUpdateWithoutShowInput>
  create: Prisma.XOR<Prisma.ChannelShowCreateWithoutShowInput, Prisma.ChannelShowUncheckedCreateWithoutShowInput>
}

export type ChannelShowUpdateWithWhereUniqueWithoutShowInput = {
  where: Prisma.ChannelShowWhereUniqueInput
  data: Prisma.XOR<Prisma.ChannelShowUpdateWithoutShowInput, Prisma.ChannelShowUncheckedUpdateWithoutShowInput>
}

export type ChannelShowUpdateManyWithWhereWithoutShowInput = {
  where: Prisma.ChannelShowScalarWhereInput
  data: Prisma.XOR<Prisma.ChannelShowUpdateManyMutationInput, Prisma.ChannelShowUncheckedUpdateManyWithoutShowInput>
}

export type ChannelShowScalarWhereInput = {
  AND?: Prisma.ChannelShowScalarWhereInput | Prisma.ChannelShowScalarWhereInput[]
  OR?: Prisma.ChannelShowScalarWhereInput[]
  NOT?: Prisma.ChannelShowScalarWhereInput | Prisma.ChannelShowScalarWhereInput[]
  id?: Prisma.StringFilter<"ChannelShow"> | string
  channelId?: Prisma.StringFilter<"ChannelShow"> | string
  showId?: Prisma.StringFilter<"ChannelShow"> | string
  order?: Prisma.IntFilter<"ChannelShow"> | number
  weight?: Prisma.IntFilter<"ChannelShow"> | number
  shuffle?: Prisma.BoolFilter<"ChannelShow"> | boolean
  shuffleOrder?: Prisma.StringFilter<"ChannelShow"> | string
  blockShuffle?: Prisma.BoolFilter<"ChannelShow"> | boolean
  blockShuffleSize?: Prisma.IntFilter<"ChannelShow"> | number
  lastPlayedEpisodeId?: Prisma.StringNullableFilter<"ChannelShow"> | string | null
  lastPlayedAt?: Prisma.DateTimeNullableFilter<"ChannelShow"> | Date | string | null
  respectOrder?: Prisma.BoolFilter<"ChannelShow"> | boolean
  maxConsecutiveEpisodes?: Prisma.IntFilter<"ChannelShow"> | number
  createdAt?: Prisma.DateTimeFilter<"ChannelShow"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"ChannelShow"> | Date | string
}

export type ChannelShowCreateWithoutChannelInput = {
  id?: string
  order?: number
  weight?: number
  shuffle?: boolean
  shuffleOrder?: string
  blockShuffle?: boolean
  blockShuffleSize?: number
  lastPlayedEpisodeId?: string | null
  lastPlayedAt?: Date | string | null
  respectOrder?: boolean
  maxConsecutiveEpisodes?: number
  createdAt?: Date | string
  updatedAt?: Date | string
  show: Prisma.MediaShowCreateNestedOneWithoutChannelShowsInput
}

export type ChannelShowUncheckedCreateWithoutChannelInput = {
  id?: string
  showId: string
  order?: number
  weight?: number
  shuffle?: boolean
  shuffleOrder?: string
  blockShuffle?: boolean
  blockShuffleSize?: number
  lastPlayedEpisodeId?: string | null
  lastPlayedAt?: Date | string | null
  respectOrder?: boolean
  maxConsecutiveEpisodes?: number
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ChannelShowCreateOrConnectWithoutChannelInput = {
  where: Prisma.ChannelShowWhereUniqueInput
  create: Prisma.XOR<Prisma.ChannelShowCreateWithoutChannelInput, Prisma.ChannelShowUncheckedCreateWithoutChannelInput>
}

export type ChannelShowCreateManyChannelInputEnvelope = {
  data: Prisma.ChannelShowCreateManyChannelInput | Prisma.ChannelShowCreateManyChannelInput[]
}

export type ChannelShowUpsertWithWhereUniqueWithoutChannelInput = {
  where: Prisma.ChannelShowWhereUniqueInput
  update: Prisma.XOR<Prisma.ChannelShowUpdateWithoutChannelInput, Prisma.ChannelShowUncheckedUpdateWithoutChannelInput>
  create: Prisma.XOR<Prisma.ChannelShowCreateWithoutChannelInput, Prisma.ChannelShowUncheckedCreateWithoutChannelInput>
}

export type ChannelShowUpdateWithWhereUniqueWithoutChannelInput = {
  where: Prisma.ChannelShowWhereUniqueInput
  data: Prisma.XOR<Prisma.ChannelShowUpdateWithoutChannelInput, Prisma.ChannelShowUncheckedUpdateWithoutChannelInput>
}

export type ChannelShowUpdateManyWithWhereWithoutChannelInput = {
  where: Prisma.ChannelShowScalarWhereInput
  data: Prisma.XOR<Prisma.ChannelShowUpdateManyMutationInput, Prisma.ChannelShowUncheckedUpdateManyWithoutChannelInput>
}

export type ChannelShowCreateManyShowInput = {
  id?: string
  channelId: string
  order?: number
  weight?: number
  shuffle?: boolean
  shuffleOrder?: string
  blockShuffle?: boolean
  blockShuffleSize?: number
  lastPlayedEpisodeId?: string | null
  lastPlayedAt?: Date | string | null
  respectOrder?: boolean
  maxConsecutiveEpisodes?: number
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ChannelShowUpdateWithoutShowInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  order?: Prisma.IntFieldUpdateOperationsInput | number
  weight?: Prisma.IntFieldUpdateOperationsInput | number
  shuffle?: Prisma.BoolFieldUpdateOperationsInput | boolean
  shuffleOrder?: Prisma.StringFieldUpdateOperationsInput | string
  blockShuffle?: Prisma.BoolFieldUpdateOperationsInput | boolean
  blockShuffleSize?: Prisma.IntFieldUpdateOperationsInput | number
  lastPlayedEpisodeId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  lastPlayedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  respectOrder?: Prisma.BoolFieldUpdateOperationsInput | boolean
  maxConsecutiveEpisodes?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  channel?: Prisma.ChannelUpdateOneRequiredWithoutChannelShowsNestedInput
}

export type ChannelShowUncheckedUpdateWithoutShowInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  channelId?: Prisma.StringFieldUpdateOperationsInput | string
  order?: Prisma.IntFieldUpdateOperationsInput | number
  weight?: Prisma.IntFieldUpdateOperationsInput | number
  shuffle?: Prisma.BoolFieldUpdateOperationsInput | boolean
  shuffleOrder?: Prisma.StringFieldUpdateOperationsInput | string
  blockShuffle?: Prisma.BoolFieldUpdateOperationsInput | boolean
  blockShuffleSize?: Prisma.IntFieldUpdateOperationsInput | number
  lastPlayedEpisodeId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  lastPlayedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  respectOrder?: Prisma.BoolFieldUpdateOperationsInput | boolean
  maxConsecutiveEpisodes?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ChannelShowUncheckedUpdateManyWithoutShowInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  channelId?: Prisma.StringFieldUpdateOperationsInput | string
  order?: Prisma.IntFieldUpdateOperationsInput | number
  weight?: Prisma.IntFieldUpdateOperationsInput | number
  shuffle?: Prisma.BoolFieldUpdateOperationsInput | boolean
  shuffleOrder?: Prisma.StringFieldUpdateOperationsInput | string
  blockShuffle?: Prisma.BoolFieldUpdateOperationsInput | boolean
  blockShuffleSize?: Prisma.IntFieldUpdateOperationsInput | number
  lastPlayedEpisodeId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  lastPlayedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  respectOrder?: Prisma.BoolFieldUpdateOperationsInput | boolean
  maxConsecutiveEpisodes?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ChannelShowCreateManyChannelInput = {
  id?: string
  showId: string
  order?: number
  weight?: number
  shuffle?: boolean
  shuffleOrder?: string
  blockShuffle?: boolean
  blockShuffleSize?: number
  lastPlayedEpisodeId?: string | null
  lastPlayedAt?: Date | string | null
  respectOrder?: boolean
  maxConsecutiveEpisodes?: number
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ChannelShowUpdateWithoutChannelInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  order?: Prisma.IntFieldUpdateOperationsInput | number
  weight?: Prisma.IntFieldUpdateOperationsInput | number
  shuffle?: Prisma.BoolFieldUpdateOperationsInput | boolean
  shuffleOrder?: Prisma.StringFieldUpdateOperationsInput | string
  blockShuffle?: Prisma.BoolFieldUpdateOperationsInput | boolean
  blockShuffleSize?: Prisma.IntFieldUpdateOperationsInput | number
  lastPlayedEpisodeId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  lastPlayedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  respectOrder?: Prisma.BoolFieldUpdateOperationsInput | boolean
  maxConsecutiveEpisodes?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  show?: Prisma.MediaShowUpdateOneRequiredWithoutChannelShowsNestedInput
}

export type ChannelShowUncheckedUpdateWithoutChannelInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  showId?: Prisma.StringFieldUpdateOperationsInput | string
  order?: Prisma.IntFieldUpdateOperationsInput | number
  weight?: Prisma.IntFieldUpdateOperationsInput | number
  shuffle?: Prisma.BoolFieldUpdateOperationsInput | boolean
  shuffleOrder?: Prisma.StringFieldUpdateOperationsInput | string
  blockShuffle?: Prisma.BoolFieldUpdateOperationsInput | boolean
  blockShuffleSize?: Prisma.IntFieldUpdateOperationsInput | number
  lastPlayedEpisodeId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  lastPlayedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  respectOrder?: Prisma.BoolFieldUpdateOperationsInput | boolean
  maxConsecutiveEpisodes?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ChannelShowUncheckedUpdateManyWithoutChannelInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  showId?: Prisma.StringFieldUpdateOperationsInput | string
  order?: Prisma.IntFieldUpdateOperationsInput | number
  weight?: Prisma.IntFieldUpdateOperationsInput | number
  shuffle?: Prisma.BoolFieldUpdateOperationsInput | boolean
  shuffleOrder?: Prisma.StringFieldUpdateOperationsInput | string
  blockShuffle?: Prisma.BoolFieldUpdateOperationsInput | boolean
  blockShuffleSize?: Prisma.IntFieldUpdateOperationsInput | number
  lastPlayedEpisodeId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  lastPlayedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  respectOrder?: Prisma.BoolFieldUpdateOperationsInput | boolean
  maxConsecutiveEpisodes?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type ChannelShowSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  channelId?: boolean
  showId?: boolean
  order?: boolean
  weight?: boolean
  shuffle?: boolean
  shuffleOrder?: boolean
  blockShuffle?: boolean
  blockShuffleSize?: boolean
  lastPlayedEpisodeId?: boolean
  lastPlayedAt?: boolean
  respectOrder?: boolean
  maxConsecutiveEpisodes?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  channel?: boolean | Prisma.ChannelDefaultArgs<ExtArgs>
  show?: boolean | Prisma.MediaShowDefaultArgs<ExtArgs>
}, ExtArgs["result"]["channelShow"]>

export type ChannelShowSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  channelId?: boolean
  showId?: boolean
  order?: boolean
  weight?: boolean
  shuffle?: boolean
  shuffleOrder?: boolean
  blockShuffle?: boolean
  blockShuffleSize?: boolean
  lastPlayedEpisodeId?: boolean
  lastPlayedAt?: boolean
  respectOrder?: boolean
  maxConsecutiveEpisodes?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  channel?: boolean | Prisma.ChannelDefaultArgs<ExtArgs>
  show?: boolean | Prisma.MediaShowDefaultArgs<ExtArgs>
}, ExtArgs["result"]["channelShow"]>

export type ChannelShowSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  channelId?: boolean
  showId?: boolean
  order?: boolean
  weight?: boolean
  shuffle?: boolean
  shuffleOrder?: boolean
  blockShuffle?: boolean
  blockShuffleSize?: boolean
  lastPlayedEpisodeId?: boolean
  lastPlayedAt?: boolean
  respectOrder?: boolean
  maxConsecutiveEpisodes?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  channel?: boolean | Prisma.ChannelDefaultArgs<ExtArgs>
  show?: boolean | Prisma.MediaShowDefaultArgs<ExtArgs>
}, ExtArgs["result"]["channelShow"]>

export type ChannelShowSelectScalar = {
  id?: boolean
  channelId?: boolean
  showId?: boolean
  order?: boolean
  weight?: boolean
  shuffle?: boolean
  shuffleOrder?: boolean
  blockShuffle?: boolean
  blockShuffleSize?: boolean
  lastPlayedEpisodeId?: boolean
  lastPlayedAt?: boolean
  respectOrder?: boolean
  maxConsecutiveEpisodes?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type ChannelShowOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "channelId" | "showId" | "order" | "weight" | "shuffle" | "shuffleOrder" | "blockShuffle" | "blockShuffleSize" | "lastPlayedEpisodeId" | "lastPlayedAt" | "respectOrder" | "maxConsecutiveEpisodes" | "createdAt" | "updatedAt", ExtArgs["result"]["channelShow"]>
export type ChannelShowInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  channel?: boolean | Prisma.ChannelDefaultArgs<ExtArgs>
  show?: boolean | Prisma.MediaShowDefaultArgs<ExtArgs>
}
export type ChannelShowIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  channel?: boolean | Prisma.ChannelDefaultArgs<ExtArgs>
  show?: boolean | Prisma.MediaShowDefaultArgs<ExtArgs>
}
export type ChannelShowIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  channel?: boolean | Prisma.ChannelDefaultArgs<ExtArgs>
  show?: boolean | Prisma.MediaShowDefaultArgs<ExtArgs>
}

export type $ChannelShowPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "ChannelShow"
  objects: {
    channel: Prisma.$ChannelPayload<ExtArgs>
    show: Prisma.$MediaShowPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    channelId: string
    showId: string
    order: number
    weight: number
    shuffle: boolean
    shuffleOrder: string
    blockShuffle: boolean
    blockShuffleSize: number
    lastPlayedEpisodeId: string | null
    lastPlayedAt: Date | null
    respectOrder: boolean
    maxConsecutiveEpisodes: number
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["channelShow"]>
  composites: {}
}

export type ChannelShowGetPayload<S extends boolean | null | undefined | ChannelShowDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ChannelShowPayload, S>

export type ChannelShowCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ChannelShowFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ChannelShowCountAggregateInputType | true
  }

export interface ChannelShowDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ChannelShow'], meta: { name: 'ChannelShow' } }
  /**
   * Find zero or one ChannelShow that matches the filter.
   * @param {ChannelShowFindUniqueArgs} args - Arguments to find a ChannelShow
   * @example
   * // Get one ChannelShow
   * const channelShow = await prisma.channelShow.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ChannelShowFindUniqueArgs>(args: Prisma.SelectSubset<T, ChannelShowFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ChannelShowClient<runtime.Types.Result.GetResult<Prisma.$ChannelShowPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one ChannelShow that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ChannelShowFindUniqueOrThrowArgs} args - Arguments to find a ChannelShow
   * @example
   * // Get one ChannelShow
   * const channelShow = await prisma.channelShow.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ChannelShowFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ChannelShowFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ChannelShowClient<runtime.Types.Result.GetResult<Prisma.$ChannelShowPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ChannelShow that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChannelShowFindFirstArgs} args - Arguments to find a ChannelShow
   * @example
   * // Get one ChannelShow
   * const channelShow = await prisma.channelShow.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ChannelShowFindFirstArgs>(args?: Prisma.SelectSubset<T, ChannelShowFindFirstArgs<ExtArgs>>): Prisma.Prisma__ChannelShowClient<runtime.Types.Result.GetResult<Prisma.$ChannelShowPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ChannelShow that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChannelShowFindFirstOrThrowArgs} args - Arguments to find a ChannelShow
   * @example
   * // Get one ChannelShow
   * const channelShow = await prisma.channelShow.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ChannelShowFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ChannelShowFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ChannelShowClient<runtime.Types.Result.GetResult<Prisma.$ChannelShowPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more ChannelShows that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChannelShowFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all ChannelShows
   * const channelShows = await prisma.channelShow.findMany()
   * 
   * // Get first 10 ChannelShows
   * const channelShows = await prisma.channelShow.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const channelShowWithIdOnly = await prisma.channelShow.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ChannelShowFindManyArgs>(args?: Prisma.SelectSubset<T, ChannelShowFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ChannelShowPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a ChannelShow.
   * @param {ChannelShowCreateArgs} args - Arguments to create a ChannelShow.
   * @example
   * // Create one ChannelShow
   * const ChannelShow = await prisma.channelShow.create({
   *   data: {
   *     // ... data to create a ChannelShow
   *   }
   * })
   * 
   */
  create<T extends ChannelShowCreateArgs>(args: Prisma.SelectSubset<T, ChannelShowCreateArgs<ExtArgs>>): Prisma.Prisma__ChannelShowClient<runtime.Types.Result.GetResult<Prisma.$ChannelShowPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many ChannelShows.
   * @param {ChannelShowCreateManyArgs} args - Arguments to create many ChannelShows.
   * @example
   * // Create many ChannelShows
   * const channelShow = await prisma.channelShow.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ChannelShowCreateManyArgs>(args?: Prisma.SelectSubset<T, ChannelShowCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many ChannelShows and returns the data saved in the database.
   * @param {ChannelShowCreateManyAndReturnArgs} args - Arguments to create many ChannelShows.
   * @example
   * // Create many ChannelShows
   * const channelShow = await prisma.channelShow.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many ChannelShows and only return the `id`
   * const channelShowWithIdOnly = await prisma.channelShow.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ChannelShowCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ChannelShowCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ChannelShowPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a ChannelShow.
   * @param {ChannelShowDeleteArgs} args - Arguments to delete one ChannelShow.
   * @example
   * // Delete one ChannelShow
   * const ChannelShow = await prisma.channelShow.delete({
   *   where: {
   *     // ... filter to delete one ChannelShow
   *   }
   * })
   * 
   */
  delete<T extends ChannelShowDeleteArgs>(args: Prisma.SelectSubset<T, ChannelShowDeleteArgs<ExtArgs>>): Prisma.Prisma__ChannelShowClient<runtime.Types.Result.GetResult<Prisma.$ChannelShowPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one ChannelShow.
   * @param {ChannelShowUpdateArgs} args - Arguments to update one ChannelShow.
   * @example
   * // Update one ChannelShow
   * const channelShow = await prisma.channelShow.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ChannelShowUpdateArgs>(args: Prisma.SelectSubset<T, ChannelShowUpdateArgs<ExtArgs>>): Prisma.Prisma__ChannelShowClient<runtime.Types.Result.GetResult<Prisma.$ChannelShowPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more ChannelShows.
   * @param {ChannelShowDeleteManyArgs} args - Arguments to filter ChannelShows to delete.
   * @example
   * // Delete a few ChannelShows
   * const { count } = await prisma.channelShow.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ChannelShowDeleteManyArgs>(args?: Prisma.SelectSubset<T, ChannelShowDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ChannelShows.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChannelShowUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many ChannelShows
   * const channelShow = await prisma.channelShow.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ChannelShowUpdateManyArgs>(args: Prisma.SelectSubset<T, ChannelShowUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ChannelShows and returns the data updated in the database.
   * @param {ChannelShowUpdateManyAndReturnArgs} args - Arguments to update many ChannelShows.
   * @example
   * // Update many ChannelShows
   * const channelShow = await prisma.channelShow.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more ChannelShows and only return the `id`
   * const channelShowWithIdOnly = await prisma.channelShow.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ChannelShowUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ChannelShowUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ChannelShowPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one ChannelShow.
   * @param {ChannelShowUpsertArgs} args - Arguments to update or create a ChannelShow.
   * @example
   * // Update or create a ChannelShow
   * const channelShow = await prisma.channelShow.upsert({
   *   create: {
   *     // ... data to create a ChannelShow
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the ChannelShow we want to update
   *   }
   * })
   */
  upsert<T extends ChannelShowUpsertArgs>(args: Prisma.SelectSubset<T, ChannelShowUpsertArgs<ExtArgs>>): Prisma.Prisma__ChannelShowClient<runtime.Types.Result.GetResult<Prisma.$ChannelShowPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of ChannelShows.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChannelShowCountArgs} args - Arguments to filter ChannelShows to count.
   * @example
   * // Count the number of ChannelShows
   * const count = await prisma.channelShow.count({
   *   where: {
   *     // ... the filter for the ChannelShows we want to count
   *   }
   * })
  **/
  count<T extends ChannelShowCountArgs>(
    args?: Prisma.Subset<T, ChannelShowCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ChannelShowCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a ChannelShow.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChannelShowAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ChannelShowAggregateArgs>(args: Prisma.Subset<T, ChannelShowAggregateArgs>): Prisma.PrismaPromise<GetChannelShowAggregateType<T>>

  /**
   * Group by ChannelShow.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChannelShowGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ChannelShowGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ChannelShowGroupByArgs['orderBy'] }
      : { orderBy?: ChannelShowGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ChannelShowGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChannelShowGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the ChannelShow model
 */
readonly fields: ChannelShowFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for ChannelShow.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ChannelShowClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  channel<T extends Prisma.ChannelDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ChannelDefaultArgs<ExtArgs>>): Prisma.Prisma__ChannelClient<runtime.Types.Result.GetResult<Prisma.$ChannelPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  show<T extends Prisma.MediaShowDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.MediaShowDefaultArgs<ExtArgs>>): Prisma.Prisma__MediaShowClient<runtime.Types.Result.GetResult<Prisma.$MediaShowPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the ChannelShow model
 */
export interface ChannelShowFieldRefs {
  readonly id: Prisma.FieldRef<"ChannelShow", 'String'>
  readonly channelId: Prisma.FieldRef<"ChannelShow", 'String'>
  readonly showId: Prisma.FieldRef<"ChannelShow", 'String'>
  readonly order: Prisma.FieldRef<"ChannelShow", 'Int'>
  readonly weight: Prisma.FieldRef<"ChannelShow", 'Int'>
  readonly shuffle: Prisma.FieldRef<"ChannelShow", 'Boolean'>
  readonly shuffleOrder: Prisma.FieldRef<"ChannelShow", 'String'>
  readonly blockShuffle: Prisma.FieldRef<"ChannelShow", 'Boolean'>
  readonly blockShuffleSize: Prisma.FieldRef<"ChannelShow", 'Int'>
  readonly lastPlayedEpisodeId: Prisma.FieldRef<"ChannelShow", 'String'>
  readonly lastPlayedAt: Prisma.FieldRef<"ChannelShow", 'DateTime'>
  readonly respectOrder: Prisma.FieldRef<"ChannelShow", 'Boolean'>
  readonly maxConsecutiveEpisodes: Prisma.FieldRef<"ChannelShow", 'Int'>
  readonly createdAt: Prisma.FieldRef<"ChannelShow", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"ChannelShow", 'DateTime'>
}
    

// Custom InputTypes
/**
 * ChannelShow findUnique
 */
export type ChannelShowFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChannelShow
   */
  select?: Prisma.ChannelShowSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ChannelShow
   */
  omit?: Prisma.ChannelShowOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChannelShowInclude<ExtArgs> | null
  /**
   * Filter, which ChannelShow to fetch.
   */
  where: Prisma.ChannelShowWhereUniqueInput
}

/**
 * ChannelShow findUniqueOrThrow
 */
export type ChannelShowFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChannelShow
   */
  select?: Prisma.ChannelShowSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ChannelShow
   */
  omit?: Prisma.ChannelShowOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChannelShowInclude<ExtArgs> | null
  /**
   * Filter, which ChannelShow to fetch.
   */
  where: Prisma.ChannelShowWhereUniqueInput
}

/**
 * ChannelShow findFirst
 */
export type ChannelShowFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChannelShow
   */
  select?: Prisma.ChannelShowSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ChannelShow
   */
  omit?: Prisma.ChannelShowOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChannelShowInclude<ExtArgs> | null
  /**
   * Filter, which ChannelShow to fetch.
   */
  where?: Prisma.ChannelShowWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ChannelShows to fetch.
   */
  orderBy?: Prisma.ChannelShowOrderByWithRelationInput | Prisma.ChannelShowOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ChannelShows.
   */
  cursor?: Prisma.ChannelShowWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ChannelShows from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ChannelShows.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ChannelShows.
   */
  distinct?: Prisma.ChannelShowScalarFieldEnum | Prisma.ChannelShowScalarFieldEnum[]
}

/**
 * ChannelShow findFirstOrThrow
 */
export type ChannelShowFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChannelShow
   */
  select?: Prisma.ChannelShowSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ChannelShow
   */
  omit?: Prisma.ChannelShowOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChannelShowInclude<ExtArgs> | null
  /**
   * Filter, which ChannelShow to fetch.
   */
  where?: Prisma.ChannelShowWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ChannelShows to fetch.
   */
  orderBy?: Prisma.ChannelShowOrderByWithRelationInput | Prisma.ChannelShowOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ChannelShows.
   */
  cursor?: Prisma.ChannelShowWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ChannelShows from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ChannelShows.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ChannelShows.
   */
  distinct?: Prisma.ChannelShowScalarFieldEnum | Prisma.ChannelShowScalarFieldEnum[]
}

/**
 * ChannelShow findMany
 */
export type ChannelShowFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChannelShow
   */
  select?: Prisma.ChannelShowSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ChannelShow
   */
  omit?: Prisma.ChannelShowOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChannelShowInclude<ExtArgs> | null
  /**
   * Filter, which ChannelShows to fetch.
   */
  where?: Prisma.ChannelShowWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ChannelShows to fetch.
   */
  orderBy?: Prisma.ChannelShowOrderByWithRelationInput | Prisma.ChannelShowOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing ChannelShows.
   */
  cursor?: Prisma.ChannelShowWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ChannelShows from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ChannelShows.
   */
  skip?: number
  distinct?: Prisma.ChannelShowScalarFieldEnum | Prisma.ChannelShowScalarFieldEnum[]
}

/**
 * ChannelShow create
 */
export type ChannelShowCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChannelShow
   */
  select?: Prisma.ChannelShowSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ChannelShow
   */
  omit?: Prisma.ChannelShowOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChannelShowInclude<ExtArgs> | null
  /**
   * The data needed to create a ChannelShow.
   */
  data: Prisma.XOR<Prisma.ChannelShowCreateInput, Prisma.ChannelShowUncheckedCreateInput>
}

/**
 * ChannelShow createMany
 */
export type ChannelShowCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many ChannelShows.
   */
  data: Prisma.ChannelShowCreateManyInput | Prisma.ChannelShowCreateManyInput[]
}

/**
 * ChannelShow createManyAndReturn
 */
export type ChannelShowCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChannelShow
   */
  select?: Prisma.ChannelShowSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ChannelShow
   */
  omit?: Prisma.ChannelShowOmit<ExtArgs> | null
  /**
   * The data used to create many ChannelShows.
   */
  data: Prisma.ChannelShowCreateManyInput | Prisma.ChannelShowCreateManyInput[]
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChannelShowIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * ChannelShow update
 */
export type ChannelShowUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChannelShow
   */
  select?: Prisma.ChannelShowSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ChannelShow
   */
  omit?: Prisma.ChannelShowOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChannelShowInclude<ExtArgs> | null
  /**
   * The data needed to update a ChannelShow.
   */
  data: Prisma.XOR<Prisma.ChannelShowUpdateInput, Prisma.ChannelShowUncheckedUpdateInput>
  /**
   * Choose, which ChannelShow to update.
   */
  where: Prisma.ChannelShowWhereUniqueInput
}

/**
 * ChannelShow updateMany
 */
export type ChannelShowUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update ChannelShows.
   */
  data: Prisma.XOR<Prisma.ChannelShowUpdateManyMutationInput, Prisma.ChannelShowUncheckedUpdateManyInput>
  /**
   * Filter which ChannelShows to update
   */
  where?: Prisma.ChannelShowWhereInput
  /**
   * Limit how many ChannelShows to update.
   */
  limit?: number
}

/**
 * ChannelShow updateManyAndReturn
 */
export type ChannelShowUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChannelShow
   */
  select?: Prisma.ChannelShowSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ChannelShow
   */
  omit?: Prisma.ChannelShowOmit<ExtArgs> | null
  /**
   * The data used to update ChannelShows.
   */
  data: Prisma.XOR<Prisma.ChannelShowUpdateManyMutationInput, Prisma.ChannelShowUncheckedUpdateManyInput>
  /**
   * Filter which ChannelShows to update
   */
  where?: Prisma.ChannelShowWhereInput
  /**
   * Limit how many ChannelShows to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChannelShowIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * ChannelShow upsert
 */
export type ChannelShowUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChannelShow
   */
  select?: Prisma.ChannelShowSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ChannelShow
   */
  omit?: Prisma.ChannelShowOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChannelShowInclude<ExtArgs> | null
  /**
   * The filter to search for the ChannelShow to update in case it exists.
   */
  where: Prisma.ChannelShowWhereUniqueInput
  /**
   * In case the ChannelShow found by the `where` argument doesn't exist, create a new ChannelShow with this data.
   */
  create: Prisma.XOR<Prisma.ChannelShowCreateInput, Prisma.ChannelShowUncheckedCreateInput>
  /**
   * In case the ChannelShow was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ChannelShowUpdateInput, Prisma.ChannelShowUncheckedUpdateInput>
}

/**
 * ChannelShow delete
 */
export type ChannelShowDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChannelShow
   */
  select?: Prisma.ChannelShowSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ChannelShow
   */
  omit?: Prisma.ChannelShowOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChannelShowInclude<ExtArgs> | null
  /**
   * Filter which ChannelShow to delete.
   */
  where: Prisma.ChannelShowWhereUniqueInput
}

/**
 * ChannelShow deleteMany
 */
export type ChannelShowDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ChannelShows to delete
   */
  where?: Prisma.ChannelShowWhereInput
  /**
   * Limit how many ChannelShows to delete.
   */
  limit?: number
}

/**
 * ChannelShow without action
 */
export type ChannelShowDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChannelShow
   */
  select?: Prisma.ChannelShowSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ChannelShow
   */
  omit?: Prisma.ChannelShowOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChannelShowInclude<ExtArgs> | null
}
