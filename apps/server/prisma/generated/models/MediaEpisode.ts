
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `MediaEpisode` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model MediaEpisode
 * 
 */
export type MediaEpisodeModel = runtime.Types.Result.DefaultSelection<Prisma.$MediaEpisodePayload>

export type AggregateMediaEpisode = {
  _count: MediaEpisodeCountAggregateOutputType | null
  _avg: MediaEpisodeAvgAggregateOutputType | null
  _sum: MediaEpisodeSumAggregateOutputType | null
  _min: MediaEpisodeMinAggregateOutputType | null
  _max: MediaEpisodeMaxAggregateOutputType | null
}

export type MediaEpisodeAvgAggregateOutputType = {
  duration: number | null
  seasonNumber: number | null
  episodeNumber: number | null
}

export type MediaEpisodeSumAggregateOutputType = {
  duration: number | null
  seasonNumber: number | null
  episodeNumber: number | null
}

export type MediaEpisodeMinAggregateOutputType = {
  id: string | null
  title: string | null
  summary: string | null
  duration: number | null
  seasonNumber: number | null
  episodeNumber: number | null
  thumb: string | null
  ratingKey: string | null
  showId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type MediaEpisodeMaxAggregateOutputType = {
  id: string | null
  title: string | null
  summary: string | null
  duration: number | null
  seasonNumber: number | null
  episodeNumber: number | null
  thumb: string | null
  ratingKey: string | null
  showId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type MediaEpisodeCountAggregateOutputType = {
  id: number
  title: number
  summary: number
  duration: number
  seasonNumber: number
  episodeNumber: number
  thumb: number
  ratingKey: number
  showId: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type MediaEpisodeAvgAggregateInputType = {
  duration?: true
  seasonNumber?: true
  episodeNumber?: true
}

export type MediaEpisodeSumAggregateInputType = {
  duration?: true
  seasonNumber?: true
  episodeNumber?: true
}

export type MediaEpisodeMinAggregateInputType = {
  id?: true
  title?: true
  summary?: true
  duration?: true
  seasonNumber?: true
  episodeNumber?: true
  thumb?: true
  ratingKey?: true
  showId?: true
  createdAt?: true
  updatedAt?: true
}

export type MediaEpisodeMaxAggregateInputType = {
  id?: true
  title?: true
  summary?: true
  duration?: true
  seasonNumber?: true
  episodeNumber?: true
  thumb?: true
  ratingKey?: true
  showId?: true
  createdAt?: true
  updatedAt?: true
}

export type MediaEpisodeCountAggregateInputType = {
  id?: true
  title?: true
  summary?: true
  duration?: true
  seasonNumber?: true
  episodeNumber?: true
  thumb?: true
  ratingKey?: true
  showId?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type MediaEpisodeAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which MediaEpisode to aggregate.
   */
  where?: Prisma.MediaEpisodeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MediaEpisodes to fetch.
   */
  orderBy?: Prisma.MediaEpisodeOrderByWithRelationInput | Prisma.MediaEpisodeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.MediaEpisodeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MediaEpisodes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MediaEpisodes.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned MediaEpisodes
  **/
  _count?: true | MediaEpisodeCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: MediaEpisodeAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: MediaEpisodeSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: MediaEpisodeMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: MediaEpisodeMaxAggregateInputType
}

export type GetMediaEpisodeAggregateType<T extends MediaEpisodeAggregateArgs> = {
      [P in keyof T & keyof AggregateMediaEpisode]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateMediaEpisode[P]>
    : Prisma.GetScalarType<T[P], AggregateMediaEpisode[P]>
}




export type MediaEpisodeGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.MediaEpisodeWhereInput
  orderBy?: Prisma.MediaEpisodeOrderByWithAggregationInput | Prisma.MediaEpisodeOrderByWithAggregationInput[]
  by: Prisma.MediaEpisodeScalarFieldEnum[] | Prisma.MediaEpisodeScalarFieldEnum
  having?: Prisma.MediaEpisodeScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: MediaEpisodeCountAggregateInputType | true
  _avg?: MediaEpisodeAvgAggregateInputType
  _sum?: MediaEpisodeSumAggregateInputType
  _min?: MediaEpisodeMinAggregateInputType
  _max?: MediaEpisodeMaxAggregateInputType
}

export type MediaEpisodeGroupByOutputType = {
  id: string
  title: string
  summary: string | null
  duration: number
  seasonNumber: number
  episodeNumber: number
  thumb: string | null
  ratingKey: string
  showId: string
  createdAt: Date
  updatedAt: Date
  _count: MediaEpisodeCountAggregateOutputType | null
  _avg: MediaEpisodeAvgAggregateOutputType | null
  _sum: MediaEpisodeSumAggregateOutputType | null
  _min: MediaEpisodeMinAggregateOutputType | null
  _max: MediaEpisodeMaxAggregateOutputType | null
}

type GetMediaEpisodeGroupByPayload<T extends MediaEpisodeGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<MediaEpisodeGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof MediaEpisodeGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], MediaEpisodeGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], MediaEpisodeGroupByOutputType[P]>
      }
    >
  > 



export type MediaEpisodeWhereInput = {
  AND?: Prisma.MediaEpisodeWhereInput | Prisma.MediaEpisodeWhereInput[]
  OR?: Prisma.MediaEpisodeWhereInput[]
  NOT?: Prisma.MediaEpisodeWhereInput | Prisma.MediaEpisodeWhereInput[]
  id?: Prisma.StringFilter<"MediaEpisode"> | string
  title?: Prisma.StringFilter<"MediaEpisode"> | string
  summary?: Prisma.StringNullableFilter<"MediaEpisode"> | string | null
  duration?: Prisma.IntFilter<"MediaEpisode"> | number
  seasonNumber?: Prisma.IntFilter<"MediaEpisode"> | number
  episodeNumber?: Prisma.IntFilter<"MediaEpisode"> | number
  thumb?: Prisma.StringNullableFilter<"MediaEpisode"> | string | null
  ratingKey?: Prisma.StringFilter<"MediaEpisode"> | string
  showId?: Prisma.StringFilter<"MediaEpisode"> | string
  createdAt?: Prisma.DateTimeFilter<"MediaEpisode"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"MediaEpisode"> | Date | string
  show?: Prisma.XOR<Prisma.MediaShowScalarRelationFilter, Prisma.MediaShowWhereInput>
  programs?: Prisma.ProgramListRelationFilter
}

export type MediaEpisodeOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  summary?: Prisma.SortOrderInput | Prisma.SortOrder
  duration?: Prisma.SortOrder
  seasonNumber?: Prisma.SortOrder
  episodeNumber?: Prisma.SortOrder
  thumb?: Prisma.SortOrderInput | Prisma.SortOrder
  ratingKey?: Prisma.SortOrder
  showId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  show?: Prisma.MediaShowOrderByWithRelationInput
  programs?: Prisma.ProgramOrderByRelationAggregateInput
}

export type MediaEpisodeWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  showId_ratingKey?: Prisma.MediaEpisodeShowIdRatingKeyCompoundUniqueInput
  AND?: Prisma.MediaEpisodeWhereInput | Prisma.MediaEpisodeWhereInput[]
  OR?: Prisma.MediaEpisodeWhereInput[]
  NOT?: Prisma.MediaEpisodeWhereInput | Prisma.MediaEpisodeWhereInput[]
  title?: Prisma.StringFilter<"MediaEpisode"> | string
  summary?: Prisma.StringNullableFilter<"MediaEpisode"> | string | null
  duration?: Prisma.IntFilter<"MediaEpisode"> | number
  seasonNumber?: Prisma.IntFilter<"MediaEpisode"> | number
  episodeNumber?: Prisma.IntFilter<"MediaEpisode"> | number
  thumb?: Prisma.StringNullableFilter<"MediaEpisode"> | string | null
  ratingKey?: Prisma.StringFilter<"MediaEpisode"> | string
  showId?: Prisma.StringFilter<"MediaEpisode"> | string
  createdAt?: Prisma.DateTimeFilter<"MediaEpisode"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"MediaEpisode"> | Date | string
  show?: Prisma.XOR<Prisma.MediaShowScalarRelationFilter, Prisma.MediaShowWhereInput>
  programs?: Prisma.ProgramListRelationFilter
}, "id" | "showId_ratingKey">

export type MediaEpisodeOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  summary?: Prisma.SortOrderInput | Prisma.SortOrder
  duration?: Prisma.SortOrder
  seasonNumber?: Prisma.SortOrder
  episodeNumber?: Prisma.SortOrder
  thumb?: Prisma.SortOrderInput | Prisma.SortOrder
  ratingKey?: Prisma.SortOrder
  showId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.MediaEpisodeCountOrderByAggregateInput
  _avg?: Prisma.MediaEpisodeAvgOrderByAggregateInput
  _max?: Prisma.MediaEpisodeMaxOrderByAggregateInput
  _min?: Prisma.MediaEpisodeMinOrderByAggregateInput
  _sum?: Prisma.MediaEpisodeSumOrderByAggregateInput
}

export type MediaEpisodeScalarWhereWithAggregatesInput = {
  AND?: Prisma.MediaEpisodeScalarWhereWithAggregatesInput | Prisma.MediaEpisodeScalarWhereWithAggregatesInput[]
  OR?: Prisma.MediaEpisodeScalarWhereWithAggregatesInput[]
  NOT?: Prisma.MediaEpisodeScalarWhereWithAggregatesInput | Prisma.MediaEpisodeScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"MediaEpisode"> | string
  title?: Prisma.StringWithAggregatesFilter<"MediaEpisode"> | string
  summary?: Prisma.StringNullableWithAggregatesFilter<"MediaEpisode"> | string | null
  duration?: Prisma.IntWithAggregatesFilter<"MediaEpisode"> | number
  seasonNumber?: Prisma.IntWithAggregatesFilter<"MediaEpisode"> | number
  episodeNumber?: Prisma.IntWithAggregatesFilter<"MediaEpisode"> | number
  thumb?: Prisma.StringNullableWithAggregatesFilter<"MediaEpisode"> | string | null
  ratingKey?: Prisma.StringWithAggregatesFilter<"MediaEpisode"> | string
  showId?: Prisma.StringWithAggregatesFilter<"MediaEpisode"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"MediaEpisode"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"MediaEpisode"> | Date | string
}

export type MediaEpisodeCreateInput = {
  id?: string
  title: string
  summary?: string | null
  duration: number
  seasonNumber: number
  episodeNumber: number
  thumb?: string | null
  ratingKey: string
  createdAt?: Date | string
  updatedAt?: Date | string
  show: Prisma.MediaShowCreateNestedOneWithoutEpisodesInput
  programs?: Prisma.ProgramCreateNestedManyWithoutEpisodeInput
}

export type MediaEpisodeUncheckedCreateInput = {
  id?: string
  title: string
  summary?: string | null
  duration: number
  seasonNumber: number
  episodeNumber: number
  thumb?: string | null
  ratingKey: string
  showId: string
  createdAt?: Date | string
  updatedAt?: Date | string
  programs?: Prisma.ProgramUncheckedCreateNestedManyWithoutEpisodeInput
}

export type MediaEpisodeUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  summary?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  duration?: Prisma.IntFieldUpdateOperationsInput | number
  seasonNumber?: Prisma.IntFieldUpdateOperationsInput | number
  episodeNumber?: Prisma.IntFieldUpdateOperationsInput | number
  thumb?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  ratingKey?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  show?: Prisma.MediaShowUpdateOneRequiredWithoutEpisodesNestedInput
  programs?: Prisma.ProgramUpdateManyWithoutEpisodeNestedInput
}

export type MediaEpisodeUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  summary?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  duration?: Prisma.IntFieldUpdateOperationsInput | number
  seasonNumber?: Prisma.IntFieldUpdateOperationsInput | number
  episodeNumber?: Prisma.IntFieldUpdateOperationsInput | number
  thumb?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  ratingKey?: Prisma.StringFieldUpdateOperationsInput | string
  showId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  programs?: Prisma.ProgramUncheckedUpdateManyWithoutEpisodeNestedInput
}

export type MediaEpisodeCreateManyInput = {
  id?: string
  title: string
  summary?: string | null
  duration: number
  seasonNumber: number
  episodeNumber: number
  thumb?: string | null
  ratingKey: string
  showId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type MediaEpisodeUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  summary?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  duration?: Prisma.IntFieldUpdateOperationsInput | number
  seasonNumber?: Prisma.IntFieldUpdateOperationsInput | number
  episodeNumber?: Prisma.IntFieldUpdateOperationsInput | number
  thumb?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  ratingKey?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type MediaEpisodeUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  summary?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  duration?: Prisma.IntFieldUpdateOperationsInput | number
  seasonNumber?: Prisma.IntFieldUpdateOperationsInput | number
  episodeNumber?: Prisma.IntFieldUpdateOperationsInput | number
  thumb?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  ratingKey?: Prisma.StringFieldUpdateOperationsInput | string
  showId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type MediaEpisodeListRelationFilter = {
  every?: Prisma.MediaEpisodeWhereInput
  some?: Prisma.MediaEpisodeWhereInput
  none?: Prisma.MediaEpisodeWhereInput
}

export type MediaEpisodeOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type MediaEpisodeShowIdRatingKeyCompoundUniqueInput = {
  showId: string
  ratingKey: string
}

export type MediaEpisodeCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  summary?: Prisma.SortOrder
  duration?: Prisma.SortOrder
  seasonNumber?: Prisma.SortOrder
  episodeNumber?: Prisma.SortOrder
  thumb?: Prisma.SortOrder
  ratingKey?: Prisma.SortOrder
  showId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type MediaEpisodeAvgOrderByAggregateInput = {
  duration?: Prisma.SortOrder
  seasonNumber?: Prisma.SortOrder
  episodeNumber?: Prisma.SortOrder
}

export type MediaEpisodeMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  summary?: Prisma.SortOrder
  duration?: Prisma.SortOrder
  seasonNumber?: Prisma.SortOrder
  episodeNumber?: Prisma.SortOrder
  thumb?: Prisma.SortOrder
  ratingKey?: Prisma.SortOrder
  showId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type MediaEpisodeMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  summary?: Prisma.SortOrder
  duration?: Prisma.SortOrder
  seasonNumber?: Prisma.SortOrder
  episodeNumber?: Prisma.SortOrder
  thumb?: Prisma.SortOrder
  ratingKey?: Prisma.SortOrder
  showId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type MediaEpisodeSumOrderByAggregateInput = {
  duration?: Prisma.SortOrder
  seasonNumber?: Prisma.SortOrder
  episodeNumber?: Prisma.SortOrder
}

export type MediaEpisodeNullableScalarRelationFilter = {
  is?: Prisma.MediaEpisodeWhereInput | null
  isNot?: Prisma.MediaEpisodeWhereInput | null
}

export type MediaEpisodeCreateNestedManyWithoutShowInput = {
  create?: Prisma.XOR<Prisma.MediaEpisodeCreateWithoutShowInput, Prisma.MediaEpisodeUncheckedCreateWithoutShowInput> | Prisma.MediaEpisodeCreateWithoutShowInput[] | Prisma.MediaEpisodeUncheckedCreateWithoutShowInput[]
  connectOrCreate?: Prisma.MediaEpisodeCreateOrConnectWithoutShowInput | Prisma.MediaEpisodeCreateOrConnectWithoutShowInput[]
  createMany?: Prisma.MediaEpisodeCreateManyShowInputEnvelope
  connect?: Prisma.MediaEpisodeWhereUniqueInput | Prisma.MediaEpisodeWhereUniqueInput[]
}

export type MediaEpisodeUncheckedCreateNestedManyWithoutShowInput = {
  create?: Prisma.XOR<Prisma.MediaEpisodeCreateWithoutShowInput, Prisma.MediaEpisodeUncheckedCreateWithoutShowInput> | Prisma.MediaEpisodeCreateWithoutShowInput[] | Prisma.MediaEpisodeUncheckedCreateWithoutShowInput[]
  connectOrCreate?: Prisma.MediaEpisodeCreateOrConnectWithoutShowInput | Prisma.MediaEpisodeCreateOrConnectWithoutShowInput[]
  createMany?: Prisma.MediaEpisodeCreateManyShowInputEnvelope
  connect?: Prisma.MediaEpisodeWhereUniqueInput | Prisma.MediaEpisodeWhereUniqueInput[]
}

export type MediaEpisodeUpdateManyWithoutShowNestedInput = {
  create?: Prisma.XOR<Prisma.MediaEpisodeCreateWithoutShowInput, Prisma.MediaEpisodeUncheckedCreateWithoutShowInput> | Prisma.MediaEpisodeCreateWithoutShowInput[] | Prisma.MediaEpisodeUncheckedCreateWithoutShowInput[]
  connectOrCreate?: Prisma.MediaEpisodeCreateOrConnectWithoutShowInput | Prisma.MediaEpisodeCreateOrConnectWithoutShowInput[]
  upsert?: Prisma.MediaEpisodeUpsertWithWhereUniqueWithoutShowInput | Prisma.MediaEpisodeUpsertWithWhereUniqueWithoutShowInput[]
  createMany?: Prisma.MediaEpisodeCreateManyShowInputEnvelope
  set?: Prisma.MediaEpisodeWhereUniqueInput | Prisma.MediaEpisodeWhereUniqueInput[]
  disconnect?: Prisma.MediaEpisodeWhereUniqueInput | Prisma.MediaEpisodeWhereUniqueInput[]
  delete?: Prisma.MediaEpisodeWhereUniqueInput | Prisma.MediaEpisodeWhereUniqueInput[]
  connect?: Prisma.MediaEpisodeWhereUniqueInput | Prisma.MediaEpisodeWhereUniqueInput[]
  update?: Prisma.MediaEpisodeUpdateWithWhereUniqueWithoutShowInput | Prisma.MediaEpisodeUpdateWithWhereUniqueWithoutShowInput[]
  updateMany?: Prisma.MediaEpisodeUpdateManyWithWhereWithoutShowInput | Prisma.MediaEpisodeUpdateManyWithWhereWithoutShowInput[]
  deleteMany?: Prisma.MediaEpisodeScalarWhereInput | Prisma.MediaEpisodeScalarWhereInput[]
}

export type MediaEpisodeUncheckedUpdateManyWithoutShowNestedInput = {
  create?: Prisma.XOR<Prisma.MediaEpisodeCreateWithoutShowInput, Prisma.MediaEpisodeUncheckedCreateWithoutShowInput> | Prisma.MediaEpisodeCreateWithoutShowInput[] | Prisma.MediaEpisodeUncheckedCreateWithoutShowInput[]
  connectOrCreate?: Prisma.MediaEpisodeCreateOrConnectWithoutShowInput | Prisma.MediaEpisodeCreateOrConnectWithoutShowInput[]
  upsert?: Prisma.MediaEpisodeUpsertWithWhereUniqueWithoutShowInput | Prisma.MediaEpisodeUpsertWithWhereUniqueWithoutShowInput[]
  createMany?: Prisma.MediaEpisodeCreateManyShowInputEnvelope
  set?: Prisma.MediaEpisodeWhereUniqueInput | Prisma.MediaEpisodeWhereUniqueInput[]
  disconnect?: Prisma.MediaEpisodeWhereUniqueInput | Prisma.MediaEpisodeWhereUniqueInput[]
  delete?: Prisma.MediaEpisodeWhereUniqueInput | Prisma.MediaEpisodeWhereUniqueInput[]
  connect?: Prisma.MediaEpisodeWhereUniqueInput | Prisma.MediaEpisodeWhereUniqueInput[]
  update?: Prisma.MediaEpisodeUpdateWithWhereUniqueWithoutShowInput | Prisma.MediaEpisodeUpdateWithWhereUniqueWithoutShowInput[]
  updateMany?: Prisma.MediaEpisodeUpdateManyWithWhereWithoutShowInput | Prisma.MediaEpisodeUpdateManyWithWhereWithoutShowInput[]
  deleteMany?: Prisma.MediaEpisodeScalarWhereInput | Prisma.MediaEpisodeScalarWhereInput[]
}

export type IntFieldUpdateOperationsInput = {
  set?: number
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type MediaEpisodeCreateNestedOneWithoutProgramsInput = {
  create?: Prisma.XOR<Prisma.MediaEpisodeCreateWithoutProgramsInput, Prisma.MediaEpisodeUncheckedCreateWithoutProgramsInput>
  connectOrCreate?: Prisma.MediaEpisodeCreateOrConnectWithoutProgramsInput
  connect?: Prisma.MediaEpisodeWhereUniqueInput
}

export type MediaEpisodeUpdateOneWithoutProgramsNestedInput = {
  create?: Prisma.XOR<Prisma.MediaEpisodeCreateWithoutProgramsInput, Prisma.MediaEpisodeUncheckedCreateWithoutProgramsInput>
  connectOrCreate?: Prisma.MediaEpisodeCreateOrConnectWithoutProgramsInput
  upsert?: Prisma.MediaEpisodeUpsertWithoutProgramsInput
  disconnect?: Prisma.MediaEpisodeWhereInput | boolean
  delete?: Prisma.MediaEpisodeWhereInput | boolean
  connect?: Prisma.MediaEpisodeWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.MediaEpisodeUpdateToOneWithWhereWithoutProgramsInput, Prisma.MediaEpisodeUpdateWithoutProgramsInput>, Prisma.MediaEpisodeUncheckedUpdateWithoutProgramsInput>
}

export type MediaEpisodeCreateWithoutShowInput = {
  id?: string
  title: string
  summary?: string | null
  duration: number
  seasonNumber: number
  episodeNumber: number
  thumb?: string | null
  ratingKey: string
  createdAt?: Date | string
  updatedAt?: Date | string
  programs?: Prisma.ProgramCreateNestedManyWithoutEpisodeInput
}

export type MediaEpisodeUncheckedCreateWithoutShowInput = {
  id?: string
  title: string
  summary?: string | null
  duration: number
  seasonNumber: number
  episodeNumber: number
  thumb?: string | null
  ratingKey: string
  createdAt?: Date | string
  updatedAt?: Date | string
  programs?: Prisma.ProgramUncheckedCreateNestedManyWithoutEpisodeInput
}

export type MediaEpisodeCreateOrConnectWithoutShowInput = {
  where: Prisma.MediaEpisodeWhereUniqueInput
  create: Prisma.XOR<Prisma.MediaEpisodeCreateWithoutShowInput, Prisma.MediaEpisodeUncheckedCreateWithoutShowInput>
}

export type MediaEpisodeCreateManyShowInputEnvelope = {
  data: Prisma.MediaEpisodeCreateManyShowInput | Prisma.MediaEpisodeCreateManyShowInput[]
}

export type MediaEpisodeUpsertWithWhereUniqueWithoutShowInput = {
  where: Prisma.MediaEpisodeWhereUniqueInput
  update: Prisma.XOR<Prisma.MediaEpisodeUpdateWithoutShowInput, Prisma.MediaEpisodeUncheckedUpdateWithoutShowInput>
  create: Prisma.XOR<Prisma.MediaEpisodeCreateWithoutShowInput, Prisma.MediaEpisodeUncheckedCreateWithoutShowInput>
}

export type MediaEpisodeUpdateWithWhereUniqueWithoutShowInput = {
  where: Prisma.MediaEpisodeWhereUniqueInput
  data: Prisma.XOR<Prisma.MediaEpisodeUpdateWithoutShowInput, Prisma.MediaEpisodeUncheckedUpdateWithoutShowInput>
}

export type MediaEpisodeUpdateManyWithWhereWithoutShowInput = {
  where: Prisma.MediaEpisodeScalarWhereInput
  data: Prisma.XOR<Prisma.MediaEpisodeUpdateManyMutationInput, Prisma.MediaEpisodeUncheckedUpdateManyWithoutShowInput>
}

export type MediaEpisodeScalarWhereInput = {
  AND?: Prisma.MediaEpisodeScalarWhereInput | Prisma.MediaEpisodeScalarWhereInput[]
  OR?: Prisma.MediaEpisodeScalarWhereInput[]
  NOT?: Prisma.MediaEpisodeScalarWhereInput | Prisma.MediaEpisodeScalarWhereInput[]
  id?: Prisma.StringFilter<"MediaEpisode"> | string
  title?: Prisma.StringFilter<"MediaEpisode"> | string
  summary?: Prisma.StringNullableFilter<"MediaEpisode"> | string | null
  duration?: Prisma.IntFilter<"MediaEpisode"> | number
  seasonNumber?: Prisma.IntFilter<"MediaEpisode"> | number
  episodeNumber?: Prisma.IntFilter<"MediaEpisode"> | number
  thumb?: Prisma.StringNullableFilter<"MediaEpisode"> | string | null
  ratingKey?: Prisma.StringFilter<"MediaEpisode"> | string
  showId?: Prisma.StringFilter<"MediaEpisode"> | string
  createdAt?: Prisma.DateTimeFilter<"MediaEpisode"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"MediaEpisode"> | Date | string
}

export type MediaEpisodeCreateWithoutProgramsInput = {
  id?: string
  title: string
  summary?: string | null
  duration: number
  seasonNumber: number
  episodeNumber: number
  thumb?: string | null
  ratingKey: string
  createdAt?: Date | string
  updatedAt?: Date | string
  show: Prisma.MediaShowCreateNestedOneWithoutEpisodesInput
}

export type MediaEpisodeUncheckedCreateWithoutProgramsInput = {
  id?: string
  title: string
  summary?: string | null
  duration: number
  seasonNumber: number
  episodeNumber: number
  thumb?: string | null
  ratingKey: string
  showId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type MediaEpisodeCreateOrConnectWithoutProgramsInput = {
  where: Prisma.MediaEpisodeWhereUniqueInput
  create: Prisma.XOR<Prisma.MediaEpisodeCreateWithoutProgramsInput, Prisma.MediaEpisodeUncheckedCreateWithoutProgramsInput>
}

export type MediaEpisodeUpsertWithoutProgramsInput = {
  update: Prisma.XOR<Prisma.MediaEpisodeUpdateWithoutProgramsInput, Prisma.MediaEpisodeUncheckedUpdateWithoutProgramsInput>
  create: Prisma.XOR<Prisma.MediaEpisodeCreateWithoutProgramsInput, Prisma.MediaEpisodeUncheckedCreateWithoutProgramsInput>
  where?: Prisma.MediaEpisodeWhereInput
}

export type MediaEpisodeUpdateToOneWithWhereWithoutProgramsInput = {
  where?: Prisma.MediaEpisodeWhereInput
  data: Prisma.XOR<Prisma.MediaEpisodeUpdateWithoutProgramsInput, Prisma.MediaEpisodeUncheckedUpdateWithoutProgramsInput>
}

export type MediaEpisodeUpdateWithoutProgramsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  summary?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  duration?: Prisma.IntFieldUpdateOperationsInput | number
  seasonNumber?: Prisma.IntFieldUpdateOperationsInput | number
  episodeNumber?: Prisma.IntFieldUpdateOperationsInput | number
  thumb?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  ratingKey?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  show?: Prisma.MediaShowUpdateOneRequiredWithoutEpisodesNestedInput
}

export type MediaEpisodeUncheckedUpdateWithoutProgramsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  summary?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  duration?: Prisma.IntFieldUpdateOperationsInput | number
  seasonNumber?: Prisma.IntFieldUpdateOperationsInput | number
  episodeNumber?: Prisma.IntFieldUpdateOperationsInput | number
  thumb?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  ratingKey?: Prisma.StringFieldUpdateOperationsInput | string
  showId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type MediaEpisodeCreateManyShowInput = {
  id?: string
  title: string
  summary?: string | null
  duration: number
  seasonNumber: number
  episodeNumber: number
  thumb?: string | null
  ratingKey: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type MediaEpisodeUpdateWithoutShowInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  summary?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  duration?: Prisma.IntFieldUpdateOperationsInput | number
  seasonNumber?: Prisma.IntFieldUpdateOperationsInput | number
  episodeNumber?: Prisma.IntFieldUpdateOperationsInput | number
  thumb?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  ratingKey?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  programs?: Prisma.ProgramUpdateManyWithoutEpisodeNestedInput
}

export type MediaEpisodeUncheckedUpdateWithoutShowInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  summary?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  duration?: Prisma.IntFieldUpdateOperationsInput | number
  seasonNumber?: Prisma.IntFieldUpdateOperationsInput | number
  episodeNumber?: Prisma.IntFieldUpdateOperationsInput | number
  thumb?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  ratingKey?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  programs?: Prisma.ProgramUncheckedUpdateManyWithoutEpisodeNestedInput
}

export type MediaEpisodeUncheckedUpdateManyWithoutShowInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  summary?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  duration?: Prisma.IntFieldUpdateOperationsInput | number
  seasonNumber?: Prisma.IntFieldUpdateOperationsInput | number
  episodeNumber?: Prisma.IntFieldUpdateOperationsInput | number
  thumb?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  ratingKey?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}


/**
 * Count Type MediaEpisodeCountOutputType
 */

export type MediaEpisodeCountOutputType = {
  programs: number
}

export type MediaEpisodeCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  programs?: boolean | MediaEpisodeCountOutputTypeCountProgramsArgs
}

/**
 * MediaEpisodeCountOutputType without action
 */
export type MediaEpisodeCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MediaEpisodeCountOutputType
   */
  select?: Prisma.MediaEpisodeCountOutputTypeSelect<ExtArgs> | null
}

/**
 * MediaEpisodeCountOutputType without action
 */
export type MediaEpisodeCountOutputTypeCountProgramsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ProgramWhereInput
}


export type MediaEpisodeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  title?: boolean
  summary?: boolean
  duration?: boolean
  seasonNumber?: boolean
  episodeNumber?: boolean
  thumb?: boolean
  ratingKey?: boolean
  showId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  show?: boolean | Prisma.MediaShowDefaultArgs<ExtArgs>
  programs?: boolean | Prisma.MediaEpisode$programsArgs<ExtArgs>
  _count?: boolean | Prisma.MediaEpisodeCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["mediaEpisode"]>

export type MediaEpisodeSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  title?: boolean
  summary?: boolean
  duration?: boolean
  seasonNumber?: boolean
  episodeNumber?: boolean
  thumb?: boolean
  ratingKey?: boolean
  showId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  show?: boolean | Prisma.MediaShowDefaultArgs<ExtArgs>
}, ExtArgs["result"]["mediaEpisode"]>

export type MediaEpisodeSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  title?: boolean
  summary?: boolean
  duration?: boolean
  seasonNumber?: boolean
  episodeNumber?: boolean
  thumb?: boolean
  ratingKey?: boolean
  showId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  show?: boolean | Prisma.MediaShowDefaultArgs<ExtArgs>
}, ExtArgs["result"]["mediaEpisode"]>

export type MediaEpisodeSelectScalar = {
  id?: boolean
  title?: boolean
  summary?: boolean
  duration?: boolean
  seasonNumber?: boolean
  episodeNumber?: boolean
  thumb?: boolean
  ratingKey?: boolean
  showId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type MediaEpisodeOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "title" | "summary" | "duration" | "seasonNumber" | "episodeNumber" | "thumb" | "ratingKey" | "showId" | "createdAt" | "updatedAt", ExtArgs["result"]["mediaEpisode"]>
export type MediaEpisodeInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  show?: boolean | Prisma.MediaShowDefaultArgs<ExtArgs>
  programs?: boolean | Prisma.MediaEpisode$programsArgs<ExtArgs>
  _count?: boolean | Prisma.MediaEpisodeCountOutputTypeDefaultArgs<ExtArgs>
}
export type MediaEpisodeIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  show?: boolean | Prisma.MediaShowDefaultArgs<ExtArgs>
}
export type MediaEpisodeIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  show?: boolean | Prisma.MediaShowDefaultArgs<ExtArgs>
}

export type $MediaEpisodePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "MediaEpisode"
  objects: {
    show: Prisma.$MediaShowPayload<ExtArgs>
    programs: Prisma.$ProgramPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    title: string
    summary: string | null
    duration: number
    seasonNumber: number
    episodeNumber: number
    thumb: string | null
    ratingKey: string
    showId: string
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["mediaEpisode"]>
  composites: {}
}

export type MediaEpisodeGetPayload<S extends boolean | null | undefined | MediaEpisodeDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$MediaEpisodePayload, S>

export type MediaEpisodeCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<MediaEpisodeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: MediaEpisodeCountAggregateInputType | true
  }

export interface MediaEpisodeDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MediaEpisode'], meta: { name: 'MediaEpisode' } }
  /**
   * Find zero or one MediaEpisode that matches the filter.
   * @param {MediaEpisodeFindUniqueArgs} args - Arguments to find a MediaEpisode
   * @example
   * // Get one MediaEpisode
   * const mediaEpisode = await prisma.mediaEpisode.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends MediaEpisodeFindUniqueArgs>(args: Prisma.SelectSubset<T, MediaEpisodeFindUniqueArgs<ExtArgs>>): Prisma.Prisma__MediaEpisodeClient<runtime.Types.Result.GetResult<Prisma.$MediaEpisodePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one MediaEpisode that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {MediaEpisodeFindUniqueOrThrowArgs} args - Arguments to find a MediaEpisode
   * @example
   * // Get one MediaEpisode
   * const mediaEpisode = await prisma.mediaEpisode.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends MediaEpisodeFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, MediaEpisodeFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__MediaEpisodeClient<runtime.Types.Result.GetResult<Prisma.$MediaEpisodePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first MediaEpisode that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MediaEpisodeFindFirstArgs} args - Arguments to find a MediaEpisode
   * @example
   * // Get one MediaEpisode
   * const mediaEpisode = await prisma.mediaEpisode.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends MediaEpisodeFindFirstArgs>(args?: Prisma.SelectSubset<T, MediaEpisodeFindFirstArgs<ExtArgs>>): Prisma.Prisma__MediaEpisodeClient<runtime.Types.Result.GetResult<Prisma.$MediaEpisodePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first MediaEpisode that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MediaEpisodeFindFirstOrThrowArgs} args - Arguments to find a MediaEpisode
   * @example
   * // Get one MediaEpisode
   * const mediaEpisode = await prisma.mediaEpisode.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends MediaEpisodeFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, MediaEpisodeFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__MediaEpisodeClient<runtime.Types.Result.GetResult<Prisma.$MediaEpisodePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more MediaEpisodes that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MediaEpisodeFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all MediaEpisodes
   * const mediaEpisodes = await prisma.mediaEpisode.findMany()
   * 
   * // Get first 10 MediaEpisodes
   * const mediaEpisodes = await prisma.mediaEpisode.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const mediaEpisodeWithIdOnly = await prisma.mediaEpisode.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends MediaEpisodeFindManyArgs>(args?: Prisma.SelectSubset<T, MediaEpisodeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MediaEpisodePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a MediaEpisode.
   * @param {MediaEpisodeCreateArgs} args - Arguments to create a MediaEpisode.
   * @example
   * // Create one MediaEpisode
   * const MediaEpisode = await prisma.mediaEpisode.create({
   *   data: {
   *     // ... data to create a MediaEpisode
   *   }
   * })
   * 
   */
  create<T extends MediaEpisodeCreateArgs>(args: Prisma.SelectSubset<T, MediaEpisodeCreateArgs<ExtArgs>>): Prisma.Prisma__MediaEpisodeClient<runtime.Types.Result.GetResult<Prisma.$MediaEpisodePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many MediaEpisodes.
   * @param {MediaEpisodeCreateManyArgs} args - Arguments to create many MediaEpisodes.
   * @example
   * // Create many MediaEpisodes
   * const mediaEpisode = await prisma.mediaEpisode.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends MediaEpisodeCreateManyArgs>(args?: Prisma.SelectSubset<T, MediaEpisodeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many MediaEpisodes and returns the data saved in the database.
   * @param {MediaEpisodeCreateManyAndReturnArgs} args - Arguments to create many MediaEpisodes.
   * @example
   * // Create many MediaEpisodes
   * const mediaEpisode = await prisma.mediaEpisode.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many MediaEpisodes and only return the `id`
   * const mediaEpisodeWithIdOnly = await prisma.mediaEpisode.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends MediaEpisodeCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, MediaEpisodeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MediaEpisodePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a MediaEpisode.
   * @param {MediaEpisodeDeleteArgs} args - Arguments to delete one MediaEpisode.
   * @example
   * // Delete one MediaEpisode
   * const MediaEpisode = await prisma.mediaEpisode.delete({
   *   where: {
   *     // ... filter to delete one MediaEpisode
   *   }
   * })
   * 
   */
  delete<T extends MediaEpisodeDeleteArgs>(args: Prisma.SelectSubset<T, MediaEpisodeDeleteArgs<ExtArgs>>): Prisma.Prisma__MediaEpisodeClient<runtime.Types.Result.GetResult<Prisma.$MediaEpisodePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one MediaEpisode.
   * @param {MediaEpisodeUpdateArgs} args - Arguments to update one MediaEpisode.
   * @example
   * // Update one MediaEpisode
   * const mediaEpisode = await prisma.mediaEpisode.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends MediaEpisodeUpdateArgs>(args: Prisma.SelectSubset<T, MediaEpisodeUpdateArgs<ExtArgs>>): Prisma.Prisma__MediaEpisodeClient<runtime.Types.Result.GetResult<Prisma.$MediaEpisodePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more MediaEpisodes.
   * @param {MediaEpisodeDeleteManyArgs} args - Arguments to filter MediaEpisodes to delete.
   * @example
   * // Delete a few MediaEpisodes
   * const { count } = await prisma.mediaEpisode.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends MediaEpisodeDeleteManyArgs>(args?: Prisma.SelectSubset<T, MediaEpisodeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more MediaEpisodes.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MediaEpisodeUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many MediaEpisodes
   * const mediaEpisode = await prisma.mediaEpisode.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends MediaEpisodeUpdateManyArgs>(args: Prisma.SelectSubset<T, MediaEpisodeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more MediaEpisodes and returns the data updated in the database.
   * @param {MediaEpisodeUpdateManyAndReturnArgs} args - Arguments to update many MediaEpisodes.
   * @example
   * // Update many MediaEpisodes
   * const mediaEpisode = await prisma.mediaEpisode.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more MediaEpisodes and only return the `id`
   * const mediaEpisodeWithIdOnly = await prisma.mediaEpisode.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends MediaEpisodeUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, MediaEpisodeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MediaEpisodePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one MediaEpisode.
   * @param {MediaEpisodeUpsertArgs} args - Arguments to update or create a MediaEpisode.
   * @example
   * // Update or create a MediaEpisode
   * const mediaEpisode = await prisma.mediaEpisode.upsert({
   *   create: {
   *     // ... data to create a MediaEpisode
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the MediaEpisode we want to update
   *   }
   * })
   */
  upsert<T extends MediaEpisodeUpsertArgs>(args: Prisma.SelectSubset<T, MediaEpisodeUpsertArgs<ExtArgs>>): Prisma.Prisma__MediaEpisodeClient<runtime.Types.Result.GetResult<Prisma.$MediaEpisodePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of MediaEpisodes.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MediaEpisodeCountArgs} args - Arguments to filter MediaEpisodes to count.
   * @example
   * // Count the number of MediaEpisodes
   * const count = await prisma.mediaEpisode.count({
   *   where: {
   *     // ... the filter for the MediaEpisodes we want to count
   *   }
   * })
  **/
  count<T extends MediaEpisodeCountArgs>(
    args?: Prisma.Subset<T, MediaEpisodeCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], MediaEpisodeCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a MediaEpisode.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MediaEpisodeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends MediaEpisodeAggregateArgs>(args: Prisma.Subset<T, MediaEpisodeAggregateArgs>): Prisma.PrismaPromise<GetMediaEpisodeAggregateType<T>>

  /**
   * Group by MediaEpisode.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MediaEpisodeGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends MediaEpisodeGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: MediaEpisodeGroupByArgs['orderBy'] }
      : { orderBy?: MediaEpisodeGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, MediaEpisodeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMediaEpisodeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the MediaEpisode model
 */
readonly fields: MediaEpisodeFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for MediaEpisode.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__MediaEpisodeClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  show<T extends Prisma.MediaShowDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.MediaShowDefaultArgs<ExtArgs>>): Prisma.Prisma__MediaShowClient<runtime.Types.Result.GetResult<Prisma.$MediaShowPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  programs<T extends Prisma.MediaEpisode$programsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.MediaEpisode$programsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProgramPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the MediaEpisode model
 */
export interface MediaEpisodeFieldRefs {
  readonly id: Prisma.FieldRef<"MediaEpisode", 'String'>
  readonly title: Prisma.FieldRef<"MediaEpisode", 'String'>
  readonly summary: Prisma.FieldRef<"MediaEpisode", 'String'>
  readonly duration: Prisma.FieldRef<"MediaEpisode", 'Int'>
  readonly seasonNumber: Prisma.FieldRef<"MediaEpisode", 'Int'>
  readonly episodeNumber: Prisma.FieldRef<"MediaEpisode", 'Int'>
  readonly thumb: Prisma.FieldRef<"MediaEpisode", 'String'>
  readonly ratingKey: Prisma.FieldRef<"MediaEpisode", 'String'>
  readonly showId: Prisma.FieldRef<"MediaEpisode", 'String'>
  readonly createdAt: Prisma.FieldRef<"MediaEpisode", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"MediaEpisode", 'DateTime'>
}
    

// Custom InputTypes
/**
 * MediaEpisode findUnique
 */
export type MediaEpisodeFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MediaEpisode
   */
  select?: Prisma.MediaEpisodeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MediaEpisode
   */
  omit?: Prisma.MediaEpisodeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MediaEpisodeInclude<ExtArgs> | null
  /**
   * Filter, which MediaEpisode to fetch.
   */
  where: Prisma.MediaEpisodeWhereUniqueInput
}

/**
 * MediaEpisode findUniqueOrThrow
 */
export type MediaEpisodeFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MediaEpisode
   */
  select?: Prisma.MediaEpisodeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MediaEpisode
   */
  omit?: Prisma.MediaEpisodeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MediaEpisodeInclude<ExtArgs> | null
  /**
   * Filter, which MediaEpisode to fetch.
   */
  where: Prisma.MediaEpisodeWhereUniqueInput
}

/**
 * MediaEpisode findFirst
 */
export type MediaEpisodeFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MediaEpisode
   */
  select?: Prisma.MediaEpisodeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MediaEpisode
   */
  omit?: Prisma.MediaEpisodeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MediaEpisodeInclude<ExtArgs> | null
  /**
   * Filter, which MediaEpisode to fetch.
   */
  where?: Prisma.MediaEpisodeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MediaEpisodes to fetch.
   */
  orderBy?: Prisma.MediaEpisodeOrderByWithRelationInput | Prisma.MediaEpisodeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for MediaEpisodes.
   */
  cursor?: Prisma.MediaEpisodeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MediaEpisodes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MediaEpisodes.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of MediaEpisodes.
   */
  distinct?: Prisma.MediaEpisodeScalarFieldEnum | Prisma.MediaEpisodeScalarFieldEnum[]
}

/**
 * MediaEpisode findFirstOrThrow
 */
export type MediaEpisodeFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MediaEpisode
   */
  select?: Prisma.MediaEpisodeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MediaEpisode
   */
  omit?: Prisma.MediaEpisodeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MediaEpisodeInclude<ExtArgs> | null
  /**
   * Filter, which MediaEpisode to fetch.
   */
  where?: Prisma.MediaEpisodeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MediaEpisodes to fetch.
   */
  orderBy?: Prisma.MediaEpisodeOrderByWithRelationInput | Prisma.MediaEpisodeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for MediaEpisodes.
   */
  cursor?: Prisma.MediaEpisodeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MediaEpisodes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MediaEpisodes.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of MediaEpisodes.
   */
  distinct?: Prisma.MediaEpisodeScalarFieldEnum | Prisma.MediaEpisodeScalarFieldEnum[]
}

/**
 * MediaEpisode findMany
 */
export type MediaEpisodeFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MediaEpisode
   */
  select?: Prisma.MediaEpisodeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MediaEpisode
   */
  omit?: Prisma.MediaEpisodeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MediaEpisodeInclude<ExtArgs> | null
  /**
   * Filter, which MediaEpisodes to fetch.
   */
  where?: Prisma.MediaEpisodeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MediaEpisodes to fetch.
   */
  orderBy?: Prisma.MediaEpisodeOrderByWithRelationInput | Prisma.MediaEpisodeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing MediaEpisodes.
   */
  cursor?: Prisma.MediaEpisodeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MediaEpisodes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MediaEpisodes.
   */
  skip?: number
  distinct?: Prisma.MediaEpisodeScalarFieldEnum | Prisma.MediaEpisodeScalarFieldEnum[]
}

/**
 * MediaEpisode create
 */
export type MediaEpisodeCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MediaEpisode
   */
  select?: Prisma.MediaEpisodeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MediaEpisode
   */
  omit?: Prisma.MediaEpisodeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MediaEpisodeInclude<ExtArgs> | null
  /**
   * The data needed to create a MediaEpisode.
   */
  data: Prisma.XOR<Prisma.MediaEpisodeCreateInput, Prisma.MediaEpisodeUncheckedCreateInput>
}

/**
 * MediaEpisode createMany
 */
export type MediaEpisodeCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many MediaEpisodes.
   */
  data: Prisma.MediaEpisodeCreateManyInput | Prisma.MediaEpisodeCreateManyInput[]
}

/**
 * MediaEpisode createManyAndReturn
 */
export type MediaEpisodeCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MediaEpisode
   */
  select?: Prisma.MediaEpisodeSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the MediaEpisode
   */
  omit?: Prisma.MediaEpisodeOmit<ExtArgs> | null
  /**
   * The data used to create many MediaEpisodes.
   */
  data: Prisma.MediaEpisodeCreateManyInput | Prisma.MediaEpisodeCreateManyInput[]
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MediaEpisodeIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * MediaEpisode update
 */
export type MediaEpisodeUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MediaEpisode
   */
  select?: Prisma.MediaEpisodeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MediaEpisode
   */
  omit?: Prisma.MediaEpisodeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MediaEpisodeInclude<ExtArgs> | null
  /**
   * The data needed to update a MediaEpisode.
   */
  data: Prisma.XOR<Prisma.MediaEpisodeUpdateInput, Prisma.MediaEpisodeUncheckedUpdateInput>
  /**
   * Choose, which MediaEpisode to update.
   */
  where: Prisma.MediaEpisodeWhereUniqueInput
}

/**
 * MediaEpisode updateMany
 */
export type MediaEpisodeUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update MediaEpisodes.
   */
  data: Prisma.XOR<Prisma.MediaEpisodeUpdateManyMutationInput, Prisma.MediaEpisodeUncheckedUpdateManyInput>
  /**
   * Filter which MediaEpisodes to update
   */
  where?: Prisma.MediaEpisodeWhereInput
  /**
   * Limit how many MediaEpisodes to update.
   */
  limit?: number
}

/**
 * MediaEpisode updateManyAndReturn
 */
export type MediaEpisodeUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MediaEpisode
   */
  select?: Prisma.MediaEpisodeSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the MediaEpisode
   */
  omit?: Prisma.MediaEpisodeOmit<ExtArgs> | null
  /**
   * The data used to update MediaEpisodes.
   */
  data: Prisma.XOR<Prisma.MediaEpisodeUpdateManyMutationInput, Prisma.MediaEpisodeUncheckedUpdateManyInput>
  /**
   * Filter which MediaEpisodes to update
   */
  where?: Prisma.MediaEpisodeWhereInput
  /**
   * Limit how many MediaEpisodes to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MediaEpisodeIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * MediaEpisode upsert
 */
export type MediaEpisodeUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MediaEpisode
   */
  select?: Prisma.MediaEpisodeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MediaEpisode
   */
  omit?: Prisma.MediaEpisodeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MediaEpisodeInclude<ExtArgs> | null
  /**
   * The filter to search for the MediaEpisode to update in case it exists.
   */
  where: Prisma.MediaEpisodeWhereUniqueInput
  /**
   * In case the MediaEpisode found by the `where` argument doesn't exist, create a new MediaEpisode with this data.
   */
  create: Prisma.XOR<Prisma.MediaEpisodeCreateInput, Prisma.MediaEpisodeUncheckedCreateInput>
  /**
   * In case the MediaEpisode was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.MediaEpisodeUpdateInput, Prisma.MediaEpisodeUncheckedUpdateInput>
}

/**
 * MediaEpisode delete
 */
export type MediaEpisodeDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MediaEpisode
   */
  select?: Prisma.MediaEpisodeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MediaEpisode
   */
  omit?: Prisma.MediaEpisodeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MediaEpisodeInclude<ExtArgs> | null
  /**
   * Filter which MediaEpisode to delete.
   */
  where: Prisma.MediaEpisodeWhereUniqueInput
}

/**
 * MediaEpisode deleteMany
 */
export type MediaEpisodeDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which MediaEpisodes to delete
   */
  where?: Prisma.MediaEpisodeWhereInput
  /**
   * Limit how many MediaEpisodes to delete.
   */
  limit?: number
}

/**
 * MediaEpisode.programs
 */
export type MediaEpisode$programsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Program
   */
  select?: Prisma.ProgramSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Program
   */
  omit?: Prisma.ProgramOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProgramInclude<ExtArgs> | null
  where?: Prisma.ProgramWhereInput
  orderBy?: Prisma.ProgramOrderByWithRelationInput | Prisma.ProgramOrderByWithRelationInput[]
  cursor?: Prisma.ProgramWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.ProgramScalarFieldEnum | Prisma.ProgramScalarFieldEnum[]
}

/**
 * MediaEpisode without action
 */
export type MediaEpisodeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MediaEpisode
   */
  select?: Prisma.MediaEpisodeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MediaEpisode
   */
  omit?: Prisma.MediaEpisodeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MediaEpisodeInclude<ExtArgs> | null
}
