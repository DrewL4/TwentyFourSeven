
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `MediaMovie` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model MediaMovie
 * 
 */
export type MediaMovieModel = runtime.Types.Result.DefaultSelection<Prisma.$MediaMoviePayload>

export type AggregateMediaMovie = {
  _count: MediaMovieCountAggregateOutputType | null
  _avg: MediaMovieAvgAggregateOutputType | null
  _sum: MediaMovieSumAggregateOutputType | null
  _min: MediaMovieMinAggregateOutputType | null
  _max: MediaMovieMaxAggregateOutputType | null
}

export type MediaMovieAvgAggregateOutputType = {
  year: number | null
  duration: number | null
}

export type MediaMovieSumAggregateOutputType = {
  year: number | null
  duration: number | null
}

export type MediaMovieMinAggregateOutputType = {
  id: string | null
  title: string | null
  year: number | null
  summary: string | null
  poster: string | null
  backdrop: string | null
  duration: number | null
  ratingKey: string | null
  studio: string | null
  contentRating: string | null
  genres: string | null
  directors: string | null
  writers: string | null
  actors: string | null
  countries: string | null
  collections: string | null
  libraryId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type MediaMovieMaxAggregateOutputType = {
  id: string | null
  title: string | null
  year: number | null
  summary: string | null
  poster: string | null
  backdrop: string | null
  duration: number | null
  ratingKey: string | null
  studio: string | null
  contentRating: string | null
  genres: string | null
  directors: string | null
  writers: string | null
  actors: string | null
  countries: string | null
  collections: string | null
  libraryId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type MediaMovieCountAggregateOutputType = {
  id: number
  title: number
  year: number
  summary: number
  poster: number
  backdrop: number
  duration: number
  ratingKey: number
  studio: number
  contentRating: number
  genres: number
  directors: number
  writers: number
  actors: number
  countries: number
  collections: number
  libraryId: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type MediaMovieAvgAggregateInputType = {
  year?: true
  duration?: true
}

export type MediaMovieSumAggregateInputType = {
  year?: true
  duration?: true
}

export type MediaMovieMinAggregateInputType = {
  id?: true
  title?: true
  year?: true
  summary?: true
  poster?: true
  backdrop?: true
  duration?: true
  ratingKey?: true
  studio?: true
  contentRating?: true
  genres?: true
  directors?: true
  writers?: true
  actors?: true
  countries?: true
  collections?: true
  libraryId?: true
  createdAt?: true
  updatedAt?: true
}

export type MediaMovieMaxAggregateInputType = {
  id?: true
  title?: true
  year?: true
  summary?: true
  poster?: true
  backdrop?: true
  duration?: true
  ratingKey?: true
  studio?: true
  contentRating?: true
  genres?: true
  directors?: true
  writers?: true
  actors?: true
  countries?: true
  collections?: true
  libraryId?: true
  createdAt?: true
  updatedAt?: true
}

export type MediaMovieCountAggregateInputType = {
  id?: true
  title?: true
  year?: true
  summary?: true
  poster?: true
  backdrop?: true
  duration?: true
  ratingKey?: true
  studio?: true
  contentRating?: true
  genres?: true
  directors?: true
  writers?: true
  actors?: true
  countries?: true
  collections?: true
  libraryId?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type MediaMovieAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which MediaMovie to aggregate.
   */
  where?: Prisma.MediaMovieWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MediaMovies to fetch.
   */
  orderBy?: Prisma.MediaMovieOrderByWithRelationInput | Prisma.MediaMovieOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.MediaMovieWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MediaMovies from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MediaMovies.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned MediaMovies
  **/
  _count?: true | MediaMovieCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: MediaMovieAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: MediaMovieSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: MediaMovieMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: MediaMovieMaxAggregateInputType
}

export type GetMediaMovieAggregateType<T extends MediaMovieAggregateArgs> = {
      [P in keyof T & keyof AggregateMediaMovie]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateMediaMovie[P]>
    : Prisma.GetScalarType<T[P], AggregateMediaMovie[P]>
}




export type MediaMovieGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.MediaMovieWhereInput
  orderBy?: Prisma.MediaMovieOrderByWithAggregationInput | Prisma.MediaMovieOrderByWithAggregationInput[]
  by: Prisma.MediaMovieScalarFieldEnum[] | Prisma.MediaMovieScalarFieldEnum
  having?: Prisma.MediaMovieScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: MediaMovieCountAggregateInputType | true
  _avg?: MediaMovieAvgAggregateInputType
  _sum?: MediaMovieSumAggregateInputType
  _min?: MediaMovieMinAggregateInputType
  _max?: MediaMovieMaxAggregateInputType
}

export type MediaMovieGroupByOutputType = {
  id: string
  title: string
  year: number | null
  summary: string | null
  poster: string | null
  backdrop: string | null
  duration: number
  ratingKey: string
  studio: string | null
  contentRating: string | null
  genres: string | null
  directors: string | null
  writers: string | null
  actors: string | null
  countries: string | null
  collections: string | null
  libraryId: string
  createdAt: Date
  updatedAt: Date
  _count: MediaMovieCountAggregateOutputType | null
  _avg: MediaMovieAvgAggregateOutputType | null
  _sum: MediaMovieSumAggregateOutputType | null
  _min: MediaMovieMinAggregateOutputType | null
  _max: MediaMovieMaxAggregateOutputType | null
}

type GetMediaMovieGroupByPayload<T extends MediaMovieGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<MediaMovieGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof MediaMovieGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], MediaMovieGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], MediaMovieGroupByOutputType[P]>
      }
    >
  > 



export type MediaMovieWhereInput = {
  AND?: Prisma.MediaMovieWhereInput | Prisma.MediaMovieWhereInput[]
  OR?: Prisma.MediaMovieWhereInput[]
  NOT?: Prisma.MediaMovieWhereInput | Prisma.MediaMovieWhereInput[]
  id?: Prisma.StringFilter<"MediaMovie"> | string
  title?: Prisma.StringFilter<"MediaMovie"> | string
  year?: Prisma.IntNullableFilter<"MediaMovie"> | number | null
  summary?: Prisma.StringNullableFilter<"MediaMovie"> | string | null
  poster?: Prisma.StringNullableFilter<"MediaMovie"> | string | null
  backdrop?: Prisma.StringNullableFilter<"MediaMovie"> | string | null
  duration?: Prisma.IntFilter<"MediaMovie"> | number
  ratingKey?: Prisma.StringFilter<"MediaMovie"> | string
  studio?: Prisma.StringNullableFilter<"MediaMovie"> | string | null
  contentRating?: Prisma.StringNullableFilter<"MediaMovie"> | string | null
  genres?: Prisma.StringNullableFilter<"MediaMovie"> | string | null
  directors?: Prisma.StringNullableFilter<"MediaMovie"> | string | null
  writers?: Prisma.StringNullableFilter<"MediaMovie"> | string | null
  actors?: Prisma.StringNullableFilter<"MediaMovie"> | string | null
  countries?: Prisma.StringNullableFilter<"MediaMovie"> | string | null
  collections?: Prisma.StringNullableFilter<"MediaMovie"> | string | null
  libraryId?: Prisma.StringFilter<"MediaMovie"> | string
  createdAt?: Prisma.DateTimeFilter<"MediaMovie"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"MediaMovie"> | Date | string
  library?: Prisma.XOR<Prisma.MediaLibraryScalarRelationFilter, Prisma.MediaLibraryWhereInput>
  programs?: Prisma.ProgramListRelationFilter
  channelMovies?: Prisma.ChannelMovieListRelationFilter
}

export type MediaMovieOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  year?: Prisma.SortOrderInput | Prisma.SortOrder
  summary?: Prisma.SortOrderInput | Prisma.SortOrder
  poster?: Prisma.SortOrderInput | Prisma.SortOrder
  backdrop?: Prisma.SortOrderInput | Prisma.SortOrder
  duration?: Prisma.SortOrder
  ratingKey?: Prisma.SortOrder
  studio?: Prisma.SortOrderInput | Prisma.SortOrder
  contentRating?: Prisma.SortOrderInput | Prisma.SortOrder
  genres?: Prisma.SortOrderInput | Prisma.SortOrder
  directors?: Prisma.SortOrderInput | Prisma.SortOrder
  writers?: Prisma.SortOrderInput | Prisma.SortOrder
  actors?: Prisma.SortOrderInput | Prisma.SortOrder
  countries?: Prisma.SortOrderInput | Prisma.SortOrder
  collections?: Prisma.SortOrderInput | Prisma.SortOrder
  libraryId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  library?: Prisma.MediaLibraryOrderByWithRelationInput
  programs?: Prisma.ProgramOrderByRelationAggregateInput
  channelMovies?: Prisma.ChannelMovieOrderByRelationAggregateInput
}

export type MediaMovieWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  libraryId_ratingKey?: Prisma.MediaMovieLibraryIdRatingKeyCompoundUniqueInput
  AND?: Prisma.MediaMovieWhereInput | Prisma.MediaMovieWhereInput[]
  OR?: Prisma.MediaMovieWhereInput[]
  NOT?: Prisma.MediaMovieWhereInput | Prisma.MediaMovieWhereInput[]
  title?: Prisma.StringFilter<"MediaMovie"> | string
  year?: Prisma.IntNullableFilter<"MediaMovie"> | number | null
  summary?: Prisma.StringNullableFilter<"MediaMovie"> | string | null
  poster?: Prisma.StringNullableFilter<"MediaMovie"> | string | null
  backdrop?: Prisma.StringNullableFilter<"MediaMovie"> | string | null
  duration?: Prisma.IntFilter<"MediaMovie"> | number
  ratingKey?: Prisma.StringFilter<"MediaMovie"> | string
  studio?: Prisma.StringNullableFilter<"MediaMovie"> | string | null
  contentRating?: Prisma.StringNullableFilter<"MediaMovie"> | string | null
  genres?: Prisma.StringNullableFilter<"MediaMovie"> | string | null
  directors?: Prisma.StringNullableFilter<"MediaMovie"> | string | null
  writers?: Prisma.StringNullableFilter<"MediaMovie"> | string | null
  actors?: Prisma.StringNullableFilter<"MediaMovie"> | string | null
  countries?: Prisma.StringNullableFilter<"MediaMovie"> | string | null
  collections?: Prisma.StringNullableFilter<"MediaMovie"> | string | null
  libraryId?: Prisma.StringFilter<"MediaMovie"> | string
  createdAt?: Prisma.DateTimeFilter<"MediaMovie"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"MediaMovie"> | Date | string
  library?: Prisma.XOR<Prisma.MediaLibraryScalarRelationFilter, Prisma.MediaLibraryWhereInput>
  programs?: Prisma.ProgramListRelationFilter
  channelMovies?: Prisma.ChannelMovieListRelationFilter
}, "id" | "libraryId_ratingKey">

export type MediaMovieOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  year?: Prisma.SortOrderInput | Prisma.SortOrder
  summary?: Prisma.SortOrderInput | Prisma.SortOrder
  poster?: Prisma.SortOrderInput | Prisma.SortOrder
  backdrop?: Prisma.SortOrderInput | Prisma.SortOrder
  duration?: Prisma.SortOrder
  ratingKey?: Prisma.SortOrder
  studio?: Prisma.SortOrderInput | Prisma.SortOrder
  contentRating?: Prisma.SortOrderInput | Prisma.SortOrder
  genres?: Prisma.SortOrderInput | Prisma.SortOrder
  directors?: Prisma.SortOrderInput | Prisma.SortOrder
  writers?: Prisma.SortOrderInput | Prisma.SortOrder
  actors?: Prisma.SortOrderInput | Prisma.SortOrder
  countries?: Prisma.SortOrderInput | Prisma.SortOrder
  collections?: Prisma.SortOrderInput | Prisma.SortOrder
  libraryId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.MediaMovieCountOrderByAggregateInput
  _avg?: Prisma.MediaMovieAvgOrderByAggregateInput
  _max?: Prisma.MediaMovieMaxOrderByAggregateInput
  _min?: Prisma.MediaMovieMinOrderByAggregateInput
  _sum?: Prisma.MediaMovieSumOrderByAggregateInput
}

export type MediaMovieScalarWhereWithAggregatesInput = {
  AND?: Prisma.MediaMovieScalarWhereWithAggregatesInput | Prisma.MediaMovieScalarWhereWithAggregatesInput[]
  OR?: Prisma.MediaMovieScalarWhereWithAggregatesInput[]
  NOT?: Prisma.MediaMovieScalarWhereWithAggregatesInput | Prisma.MediaMovieScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"MediaMovie"> | string
  title?: Prisma.StringWithAggregatesFilter<"MediaMovie"> | string
  year?: Prisma.IntNullableWithAggregatesFilter<"MediaMovie"> | number | null
  summary?: Prisma.StringNullableWithAggregatesFilter<"MediaMovie"> | string | null
  poster?: Prisma.StringNullableWithAggregatesFilter<"MediaMovie"> | string | null
  backdrop?: Prisma.StringNullableWithAggregatesFilter<"MediaMovie"> | string | null
  duration?: Prisma.IntWithAggregatesFilter<"MediaMovie"> | number
  ratingKey?: Prisma.StringWithAggregatesFilter<"MediaMovie"> | string
  studio?: Prisma.StringNullableWithAggregatesFilter<"MediaMovie"> | string | null
  contentRating?: Prisma.StringNullableWithAggregatesFilter<"MediaMovie"> | string | null
  genres?: Prisma.StringNullableWithAggregatesFilter<"MediaMovie"> | string | null
  directors?: Prisma.StringNullableWithAggregatesFilter<"MediaMovie"> | string | null
  writers?: Prisma.StringNullableWithAggregatesFilter<"MediaMovie"> | string | null
  actors?: Prisma.StringNullableWithAggregatesFilter<"MediaMovie"> | string | null
  countries?: Prisma.StringNullableWithAggregatesFilter<"MediaMovie"> | string | null
  collections?: Prisma.StringNullableWithAggregatesFilter<"MediaMovie"> | string | null
  libraryId?: Prisma.StringWithAggregatesFilter<"MediaMovie"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"MediaMovie"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"MediaMovie"> | Date | string
}

export type MediaMovieCreateInput = {
  id?: string
  title: string
  year?: number | null
  summary?: string | null
  poster?: string | null
  backdrop?: string | null
  duration: number
  ratingKey: string
  studio?: string | null
  contentRating?: string | null
  genres?: string | null
  directors?: string | null
  writers?: string | null
  actors?: string | null
  countries?: string | null
  collections?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  library: Prisma.MediaLibraryCreateNestedOneWithoutMoviesInput
  programs?: Prisma.ProgramCreateNestedManyWithoutMovieInput
  channelMovies?: Prisma.ChannelMovieCreateNestedManyWithoutMovieInput
}

export type MediaMovieUncheckedCreateInput = {
  id?: string
  title: string
  year?: number | null
  summary?: string | null
  poster?: string | null
  backdrop?: string | null
  duration: number
  ratingKey: string
  studio?: string | null
  contentRating?: string | null
  genres?: string | null
  directors?: string | null
  writers?: string | null
  actors?: string | null
  countries?: string | null
  collections?: string | null
  libraryId: string
  createdAt?: Date | string
  updatedAt?: Date | string
  programs?: Prisma.ProgramUncheckedCreateNestedManyWithoutMovieInput
  channelMovies?: Prisma.ChannelMovieUncheckedCreateNestedManyWithoutMovieInput
}

export type MediaMovieUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  year?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  summary?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  poster?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  backdrop?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  duration?: Prisma.IntFieldUpdateOperationsInput | number
  ratingKey?: Prisma.StringFieldUpdateOperationsInput | string
  studio?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  contentRating?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  genres?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  directors?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  writers?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  actors?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  countries?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  collections?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  library?: Prisma.MediaLibraryUpdateOneRequiredWithoutMoviesNestedInput
  programs?: Prisma.ProgramUpdateManyWithoutMovieNestedInput
  channelMovies?: Prisma.ChannelMovieUpdateManyWithoutMovieNestedInput
}

export type MediaMovieUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  year?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  summary?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  poster?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  backdrop?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  duration?: Prisma.IntFieldUpdateOperationsInput | number
  ratingKey?: Prisma.StringFieldUpdateOperationsInput | string
  studio?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  contentRating?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  genres?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  directors?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  writers?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  actors?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  countries?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  collections?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  libraryId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  programs?: Prisma.ProgramUncheckedUpdateManyWithoutMovieNestedInput
  channelMovies?: Prisma.ChannelMovieUncheckedUpdateManyWithoutMovieNestedInput
}

export type MediaMovieCreateManyInput = {
  id?: string
  title: string
  year?: number | null
  summary?: string | null
  poster?: string | null
  backdrop?: string | null
  duration: number
  ratingKey: string
  studio?: string | null
  contentRating?: string | null
  genres?: string | null
  directors?: string | null
  writers?: string | null
  actors?: string | null
  countries?: string | null
  collections?: string | null
  libraryId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type MediaMovieUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  year?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  summary?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  poster?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  backdrop?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  duration?: Prisma.IntFieldUpdateOperationsInput | number
  ratingKey?: Prisma.StringFieldUpdateOperationsInput | string
  studio?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  contentRating?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  genres?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  directors?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  writers?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  actors?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  countries?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  collections?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type MediaMovieUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  year?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  summary?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  poster?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  backdrop?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  duration?: Prisma.IntFieldUpdateOperationsInput | number
  ratingKey?: Prisma.StringFieldUpdateOperationsInput | string
  studio?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  contentRating?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  genres?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  directors?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  writers?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  actors?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  countries?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  collections?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  libraryId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type MediaMovieListRelationFilter = {
  every?: Prisma.MediaMovieWhereInput
  some?: Prisma.MediaMovieWhereInput
  none?: Prisma.MediaMovieWhereInput
}

export type MediaMovieOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type MediaMovieLibraryIdRatingKeyCompoundUniqueInput = {
  libraryId: string
  ratingKey: string
}

export type MediaMovieCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  year?: Prisma.SortOrder
  summary?: Prisma.SortOrder
  poster?: Prisma.SortOrder
  backdrop?: Prisma.SortOrder
  duration?: Prisma.SortOrder
  ratingKey?: Prisma.SortOrder
  studio?: Prisma.SortOrder
  contentRating?: Prisma.SortOrder
  genres?: Prisma.SortOrder
  directors?: Prisma.SortOrder
  writers?: Prisma.SortOrder
  actors?: Prisma.SortOrder
  countries?: Prisma.SortOrder
  collections?: Prisma.SortOrder
  libraryId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type MediaMovieAvgOrderByAggregateInput = {
  year?: Prisma.SortOrder
  duration?: Prisma.SortOrder
}

export type MediaMovieMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  year?: Prisma.SortOrder
  summary?: Prisma.SortOrder
  poster?: Prisma.SortOrder
  backdrop?: Prisma.SortOrder
  duration?: Prisma.SortOrder
  ratingKey?: Prisma.SortOrder
  studio?: Prisma.SortOrder
  contentRating?: Prisma.SortOrder
  genres?: Prisma.SortOrder
  directors?: Prisma.SortOrder
  writers?: Prisma.SortOrder
  actors?: Prisma.SortOrder
  countries?: Prisma.SortOrder
  collections?: Prisma.SortOrder
  libraryId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type MediaMovieMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  year?: Prisma.SortOrder
  summary?: Prisma.SortOrder
  poster?: Prisma.SortOrder
  backdrop?: Prisma.SortOrder
  duration?: Prisma.SortOrder
  ratingKey?: Prisma.SortOrder
  studio?: Prisma.SortOrder
  contentRating?: Prisma.SortOrder
  genres?: Prisma.SortOrder
  directors?: Prisma.SortOrder
  writers?: Prisma.SortOrder
  actors?: Prisma.SortOrder
  countries?: Prisma.SortOrder
  collections?: Prisma.SortOrder
  libraryId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type MediaMovieSumOrderByAggregateInput = {
  year?: Prisma.SortOrder
  duration?: Prisma.SortOrder
}

export type MediaMovieNullableScalarRelationFilter = {
  is?: Prisma.MediaMovieWhereInput | null
  isNot?: Prisma.MediaMovieWhereInput | null
}

export type MediaMovieScalarRelationFilter = {
  is?: Prisma.MediaMovieWhereInput
  isNot?: Prisma.MediaMovieWhereInput
}

export type MediaMovieCreateNestedManyWithoutLibraryInput = {
  create?: Prisma.XOR<Prisma.MediaMovieCreateWithoutLibraryInput, Prisma.MediaMovieUncheckedCreateWithoutLibraryInput> | Prisma.MediaMovieCreateWithoutLibraryInput[] | Prisma.MediaMovieUncheckedCreateWithoutLibraryInput[]
  connectOrCreate?: Prisma.MediaMovieCreateOrConnectWithoutLibraryInput | Prisma.MediaMovieCreateOrConnectWithoutLibraryInput[]
  createMany?: Prisma.MediaMovieCreateManyLibraryInputEnvelope
  connect?: Prisma.MediaMovieWhereUniqueInput | Prisma.MediaMovieWhereUniqueInput[]
}

export type MediaMovieUncheckedCreateNestedManyWithoutLibraryInput = {
  create?: Prisma.XOR<Prisma.MediaMovieCreateWithoutLibraryInput, Prisma.MediaMovieUncheckedCreateWithoutLibraryInput> | Prisma.MediaMovieCreateWithoutLibraryInput[] | Prisma.MediaMovieUncheckedCreateWithoutLibraryInput[]
  connectOrCreate?: Prisma.MediaMovieCreateOrConnectWithoutLibraryInput | Prisma.MediaMovieCreateOrConnectWithoutLibraryInput[]
  createMany?: Prisma.MediaMovieCreateManyLibraryInputEnvelope
  connect?: Prisma.MediaMovieWhereUniqueInput | Prisma.MediaMovieWhereUniqueInput[]
}

export type MediaMovieUpdateManyWithoutLibraryNestedInput = {
  create?: Prisma.XOR<Prisma.MediaMovieCreateWithoutLibraryInput, Prisma.MediaMovieUncheckedCreateWithoutLibraryInput> | Prisma.MediaMovieCreateWithoutLibraryInput[] | Prisma.MediaMovieUncheckedCreateWithoutLibraryInput[]
  connectOrCreate?: Prisma.MediaMovieCreateOrConnectWithoutLibraryInput | Prisma.MediaMovieCreateOrConnectWithoutLibraryInput[]
  upsert?: Prisma.MediaMovieUpsertWithWhereUniqueWithoutLibraryInput | Prisma.MediaMovieUpsertWithWhereUniqueWithoutLibraryInput[]
  createMany?: Prisma.MediaMovieCreateManyLibraryInputEnvelope
  set?: Prisma.MediaMovieWhereUniqueInput | Prisma.MediaMovieWhereUniqueInput[]
  disconnect?: Prisma.MediaMovieWhereUniqueInput | Prisma.MediaMovieWhereUniqueInput[]
  delete?: Prisma.MediaMovieWhereUniqueInput | Prisma.MediaMovieWhereUniqueInput[]
  connect?: Prisma.MediaMovieWhereUniqueInput | Prisma.MediaMovieWhereUniqueInput[]
  update?: Prisma.MediaMovieUpdateWithWhereUniqueWithoutLibraryInput | Prisma.MediaMovieUpdateWithWhereUniqueWithoutLibraryInput[]
  updateMany?: Prisma.MediaMovieUpdateManyWithWhereWithoutLibraryInput | Prisma.MediaMovieUpdateManyWithWhereWithoutLibraryInput[]
  deleteMany?: Prisma.MediaMovieScalarWhereInput | Prisma.MediaMovieScalarWhereInput[]
}

export type MediaMovieUncheckedUpdateManyWithoutLibraryNestedInput = {
  create?: Prisma.XOR<Prisma.MediaMovieCreateWithoutLibraryInput, Prisma.MediaMovieUncheckedCreateWithoutLibraryInput> | Prisma.MediaMovieCreateWithoutLibraryInput[] | Prisma.MediaMovieUncheckedCreateWithoutLibraryInput[]
  connectOrCreate?: Prisma.MediaMovieCreateOrConnectWithoutLibraryInput | Prisma.MediaMovieCreateOrConnectWithoutLibraryInput[]
  upsert?: Prisma.MediaMovieUpsertWithWhereUniqueWithoutLibraryInput | Prisma.MediaMovieUpsertWithWhereUniqueWithoutLibraryInput[]
  createMany?: Prisma.MediaMovieCreateManyLibraryInputEnvelope
  set?: Prisma.MediaMovieWhereUniqueInput | Prisma.MediaMovieWhereUniqueInput[]
  disconnect?: Prisma.MediaMovieWhereUniqueInput | Prisma.MediaMovieWhereUniqueInput[]
  delete?: Prisma.MediaMovieWhereUniqueInput | Prisma.MediaMovieWhereUniqueInput[]
  connect?: Prisma.MediaMovieWhereUniqueInput | Prisma.MediaMovieWhereUniqueInput[]
  update?: Prisma.MediaMovieUpdateWithWhereUniqueWithoutLibraryInput | Prisma.MediaMovieUpdateWithWhereUniqueWithoutLibraryInput[]
  updateMany?: Prisma.MediaMovieUpdateManyWithWhereWithoutLibraryInput | Prisma.MediaMovieUpdateManyWithWhereWithoutLibraryInput[]
  deleteMany?: Prisma.MediaMovieScalarWhereInput | Prisma.MediaMovieScalarWhereInput[]
}

export type MediaMovieCreateNestedOneWithoutProgramsInput = {
  create?: Prisma.XOR<Prisma.MediaMovieCreateWithoutProgramsInput, Prisma.MediaMovieUncheckedCreateWithoutProgramsInput>
  connectOrCreate?: Prisma.MediaMovieCreateOrConnectWithoutProgramsInput
  connect?: Prisma.MediaMovieWhereUniqueInput
}

export type MediaMovieUpdateOneWithoutProgramsNestedInput = {
  create?: Prisma.XOR<Prisma.MediaMovieCreateWithoutProgramsInput, Prisma.MediaMovieUncheckedCreateWithoutProgramsInput>
  connectOrCreate?: Prisma.MediaMovieCreateOrConnectWithoutProgramsInput
  upsert?: Prisma.MediaMovieUpsertWithoutProgramsInput
  disconnect?: Prisma.MediaMovieWhereInput | boolean
  delete?: Prisma.MediaMovieWhereInput | boolean
  connect?: Prisma.MediaMovieWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.MediaMovieUpdateToOneWithWhereWithoutProgramsInput, Prisma.MediaMovieUpdateWithoutProgramsInput>, Prisma.MediaMovieUncheckedUpdateWithoutProgramsInput>
}

export type MediaMovieCreateNestedOneWithoutChannelMoviesInput = {
  create?: Prisma.XOR<Prisma.MediaMovieCreateWithoutChannelMoviesInput, Prisma.MediaMovieUncheckedCreateWithoutChannelMoviesInput>
  connectOrCreate?: Prisma.MediaMovieCreateOrConnectWithoutChannelMoviesInput
  connect?: Prisma.MediaMovieWhereUniqueInput
}

export type MediaMovieUpdateOneRequiredWithoutChannelMoviesNestedInput = {
  create?: Prisma.XOR<Prisma.MediaMovieCreateWithoutChannelMoviesInput, Prisma.MediaMovieUncheckedCreateWithoutChannelMoviesInput>
  connectOrCreate?: Prisma.MediaMovieCreateOrConnectWithoutChannelMoviesInput
  upsert?: Prisma.MediaMovieUpsertWithoutChannelMoviesInput
  connect?: Prisma.MediaMovieWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.MediaMovieUpdateToOneWithWhereWithoutChannelMoviesInput, Prisma.MediaMovieUpdateWithoutChannelMoviesInput>, Prisma.MediaMovieUncheckedUpdateWithoutChannelMoviesInput>
}

export type MediaMovieCreateWithoutLibraryInput = {
  id?: string
  title: string
  year?: number | null
  summary?: string | null
  poster?: string | null
  backdrop?: string | null
  duration: number
  ratingKey: string
  studio?: string | null
  contentRating?: string | null
  genres?: string | null
  directors?: string | null
  writers?: string | null
  actors?: string | null
  countries?: string | null
  collections?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  programs?: Prisma.ProgramCreateNestedManyWithoutMovieInput
  channelMovies?: Prisma.ChannelMovieCreateNestedManyWithoutMovieInput
}

export type MediaMovieUncheckedCreateWithoutLibraryInput = {
  id?: string
  title: string
  year?: number | null
  summary?: string | null
  poster?: string | null
  backdrop?: string | null
  duration: number
  ratingKey: string
  studio?: string | null
  contentRating?: string | null
  genres?: string | null
  directors?: string | null
  writers?: string | null
  actors?: string | null
  countries?: string | null
  collections?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  programs?: Prisma.ProgramUncheckedCreateNestedManyWithoutMovieInput
  channelMovies?: Prisma.ChannelMovieUncheckedCreateNestedManyWithoutMovieInput
}

export type MediaMovieCreateOrConnectWithoutLibraryInput = {
  where: Prisma.MediaMovieWhereUniqueInput
  create: Prisma.XOR<Prisma.MediaMovieCreateWithoutLibraryInput, Prisma.MediaMovieUncheckedCreateWithoutLibraryInput>
}

export type MediaMovieCreateManyLibraryInputEnvelope = {
  data: Prisma.MediaMovieCreateManyLibraryInput | Prisma.MediaMovieCreateManyLibraryInput[]
}

export type MediaMovieUpsertWithWhereUniqueWithoutLibraryInput = {
  where: Prisma.MediaMovieWhereUniqueInput
  update: Prisma.XOR<Prisma.MediaMovieUpdateWithoutLibraryInput, Prisma.MediaMovieUncheckedUpdateWithoutLibraryInput>
  create: Prisma.XOR<Prisma.MediaMovieCreateWithoutLibraryInput, Prisma.MediaMovieUncheckedCreateWithoutLibraryInput>
}

export type MediaMovieUpdateWithWhereUniqueWithoutLibraryInput = {
  where: Prisma.MediaMovieWhereUniqueInput
  data: Prisma.XOR<Prisma.MediaMovieUpdateWithoutLibraryInput, Prisma.MediaMovieUncheckedUpdateWithoutLibraryInput>
}

export type MediaMovieUpdateManyWithWhereWithoutLibraryInput = {
  where: Prisma.MediaMovieScalarWhereInput
  data: Prisma.XOR<Prisma.MediaMovieUpdateManyMutationInput, Prisma.MediaMovieUncheckedUpdateManyWithoutLibraryInput>
}

export type MediaMovieScalarWhereInput = {
  AND?: Prisma.MediaMovieScalarWhereInput | Prisma.MediaMovieScalarWhereInput[]
  OR?: Prisma.MediaMovieScalarWhereInput[]
  NOT?: Prisma.MediaMovieScalarWhereInput | Prisma.MediaMovieScalarWhereInput[]
  id?: Prisma.StringFilter<"MediaMovie"> | string
  title?: Prisma.StringFilter<"MediaMovie"> | string
  year?: Prisma.IntNullableFilter<"MediaMovie"> | number | null
  summary?: Prisma.StringNullableFilter<"MediaMovie"> | string | null
  poster?: Prisma.StringNullableFilter<"MediaMovie"> | string | null
  backdrop?: Prisma.StringNullableFilter<"MediaMovie"> | string | null
  duration?: Prisma.IntFilter<"MediaMovie"> | number
  ratingKey?: Prisma.StringFilter<"MediaMovie"> | string
  studio?: Prisma.StringNullableFilter<"MediaMovie"> | string | null
  contentRating?: Prisma.StringNullableFilter<"MediaMovie"> | string | null
  genres?: Prisma.StringNullableFilter<"MediaMovie"> | string | null
  directors?: Prisma.StringNullableFilter<"MediaMovie"> | string | null
  writers?: Prisma.StringNullableFilter<"MediaMovie"> | string | null
  actors?: Prisma.StringNullableFilter<"MediaMovie"> | string | null
  countries?: Prisma.StringNullableFilter<"MediaMovie"> | string | null
  collections?: Prisma.StringNullableFilter<"MediaMovie"> | string | null
  libraryId?: Prisma.StringFilter<"MediaMovie"> | string
  createdAt?: Prisma.DateTimeFilter<"MediaMovie"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"MediaMovie"> | Date | string
}

export type MediaMovieCreateWithoutProgramsInput = {
  id?: string
  title: string
  year?: number | null
  summary?: string | null
  poster?: string | null
  backdrop?: string | null
  duration: number
  ratingKey: string
  studio?: string | null
  contentRating?: string | null
  genres?: string | null
  directors?: string | null
  writers?: string | null
  actors?: string | null
  countries?: string | null
  collections?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  library: Prisma.MediaLibraryCreateNestedOneWithoutMoviesInput
  channelMovies?: Prisma.ChannelMovieCreateNestedManyWithoutMovieInput
}

export type MediaMovieUncheckedCreateWithoutProgramsInput = {
  id?: string
  title: string
  year?: number | null
  summary?: string | null
  poster?: string | null
  backdrop?: string | null
  duration: number
  ratingKey: string
  studio?: string | null
  contentRating?: string | null
  genres?: string | null
  directors?: string | null
  writers?: string | null
  actors?: string | null
  countries?: string | null
  collections?: string | null
  libraryId: string
  createdAt?: Date | string
  updatedAt?: Date | string
  channelMovies?: Prisma.ChannelMovieUncheckedCreateNestedManyWithoutMovieInput
}

export type MediaMovieCreateOrConnectWithoutProgramsInput = {
  where: Prisma.MediaMovieWhereUniqueInput
  create: Prisma.XOR<Prisma.MediaMovieCreateWithoutProgramsInput, Prisma.MediaMovieUncheckedCreateWithoutProgramsInput>
}

export type MediaMovieUpsertWithoutProgramsInput = {
  update: Prisma.XOR<Prisma.MediaMovieUpdateWithoutProgramsInput, Prisma.MediaMovieUncheckedUpdateWithoutProgramsInput>
  create: Prisma.XOR<Prisma.MediaMovieCreateWithoutProgramsInput, Prisma.MediaMovieUncheckedCreateWithoutProgramsInput>
  where?: Prisma.MediaMovieWhereInput
}

export type MediaMovieUpdateToOneWithWhereWithoutProgramsInput = {
  where?: Prisma.MediaMovieWhereInput
  data: Prisma.XOR<Prisma.MediaMovieUpdateWithoutProgramsInput, Prisma.MediaMovieUncheckedUpdateWithoutProgramsInput>
}

export type MediaMovieUpdateWithoutProgramsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  year?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  summary?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  poster?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  backdrop?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  duration?: Prisma.IntFieldUpdateOperationsInput | number
  ratingKey?: Prisma.StringFieldUpdateOperationsInput | string
  studio?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  contentRating?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  genres?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  directors?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  writers?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  actors?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  countries?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  collections?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  library?: Prisma.MediaLibraryUpdateOneRequiredWithoutMoviesNestedInput
  channelMovies?: Prisma.ChannelMovieUpdateManyWithoutMovieNestedInput
}

export type MediaMovieUncheckedUpdateWithoutProgramsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  year?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  summary?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  poster?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  backdrop?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  duration?: Prisma.IntFieldUpdateOperationsInput | number
  ratingKey?: Prisma.StringFieldUpdateOperationsInput | string
  studio?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  contentRating?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  genres?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  directors?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  writers?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  actors?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  countries?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  collections?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  libraryId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  channelMovies?: Prisma.ChannelMovieUncheckedUpdateManyWithoutMovieNestedInput
}

export type MediaMovieCreateWithoutChannelMoviesInput = {
  id?: string
  title: string
  year?: number | null
  summary?: string | null
  poster?: string | null
  backdrop?: string | null
  duration: number
  ratingKey: string
  studio?: string | null
  contentRating?: string | null
  genres?: string | null
  directors?: string | null
  writers?: string | null
  actors?: string | null
  countries?: string | null
  collections?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  library: Prisma.MediaLibraryCreateNestedOneWithoutMoviesInput
  programs?: Prisma.ProgramCreateNestedManyWithoutMovieInput
}

export type MediaMovieUncheckedCreateWithoutChannelMoviesInput = {
  id?: string
  title: string
  year?: number | null
  summary?: string | null
  poster?: string | null
  backdrop?: string | null
  duration: number
  ratingKey: string
  studio?: string | null
  contentRating?: string | null
  genres?: string | null
  directors?: string | null
  writers?: string | null
  actors?: string | null
  countries?: string | null
  collections?: string | null
  libraryId: string
  createdAt?: Date | string
  updatedAt?: Date | string
  programs?: Prisma.ProgramUncheckedCreateNestedManyWithoutMovieInput
}

export type MediaMovieCreateOrConnectWithoutChannelMoviesInput = {
  where: Prisma.MediaMovieWhereUniqueInput
  create: Prisma.XOR<Prisma.MediaMovieCreateWithoutChannelMoviesInput, Prisma.MediaMovieUncheckedCreateWithoutChannelMoviesInput>
}

export type MediaMovieUpsertWithoutChannelMoviesInput = {
  update: Prisma.XOR<Prisma.MediaMovieUpdateWithoutChannelMoviesInput, Prisma.MediaMovieUncheckedUpdateWithoutChannelMoviesInput>
  create: Prisma.XOR<Prisma.MediaMovieCreateWithoutChannelMoviesInput, Prisma.MediaMovieUncheckedCreateWithoutChannelMoviesInput>
  where?: Prisma.MediaMovieWhereInput
}

export type MediaMovieUpdateToOneWithWhereWithoutChannelMoviesInput = {
  where?: Prisma.MediaMovieWhereInput
  data: Prisma.XOR<Prisma.MediaMovieUpdateWithoutChannelMoviesInput, Prisma.MediaMovieUncheckedUpdateWithoutChannelMoviesInput>
}

export type MediaMovieUpdateWithoutChannelMoviesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  year?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  summary?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  poster?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  backdrop?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  duration?: Prisma.IntFieldUpdateOperationsInput | number
  ratingKey?: Prisma.StringFieldUpdateOperationsInput | string
  studio?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  contentRating?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  genres?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  directors?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  writers?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  actors?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  countries?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  collections?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  library?: Prisma.MediaLibraryUpdateOneRequiredWithoutMoviesNestedInput
  programs?: Prisma.ProgramUpdateManyWithoutMovieNestedInput
}

export type MediaMovieUncheckedUpdateWithoutChannelMoviesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  year?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  summary?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  poster?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  backdrop?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  duration?: Prisma.IntFieldUpdateOperationsInput | number
  ratingKey?: Prisma.StringFieldUpdateOperationsInput | string
  studio?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  contentRating?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  genres?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  directors?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  writers?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  actors?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  countries?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  collections?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  libraryId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  programs?: Prisma.ProgramUncheckedUpdateManyWithoutMovieNestedInput
}

export type MediaMovieCreateManyLibraryInput = {
  id?: string
  title: string
  year?: number | null
  summary?: string | null
  poster?: string | null
  backdrop?: string | null
  duration: number
  ratingKey: string
  studio?: string | null
  contentRating?: string | null
  genres?: string | null
  directors?: string | null
  writers?: string | null
  actors?: string | null
  countries?: string | null
  collections?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type MediaMovieUpdateWithoutLibraryInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  year?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  summary?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  poster?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  backdrop?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  duration?: Prisma.IntFieldUpdateOperationsInput | number
  ratingKey?: Prisma.StringFieldUpdateOperationsInput | string
  studio?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  contentRating?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  genres?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  directors?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  writers?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  actors?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  countries?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  collections?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  programs?: Prisma.ProgramUpdateManyWithoutMovieNestedInput
  channelMovies?: Prisma.ChannelMovieUpdateManyWithoutMovieNestedInput
}

export type MediaMovieUncheckedUpdateWithoutLibraryInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  year?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  summary?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  poster?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  backdrop?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  duration?: Prisma.IntFieldUpdateOperationsInput | number
  ratingKey?: Prisma.StringFieldUpdateOperationsInput | string
  studio?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  contentRating?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  genres?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  directors?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  writers?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  actors?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  countries?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  collections?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  programs?: Prisma.ProgramUncheckedUpdateManyWithoutMovieNestedInput
  channelMovies?: Prisma.ChannelMovieUncheckedUpdateManyWithoutMovieNestedInput
}

export type MediaMovieUncheckedUpdateManyWithoutLibraryInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  year?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  summary?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  poster?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  backdrop?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  duration?: Prisma.IntFieldUpdateOperationsInput | number
  ratingKey?: Prisma.StringFieldUpdateOperationsInput | string
  studio?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  contentRating?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  genres?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  directors?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  writers?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  actors?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  countries?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  collections?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}


/**
 * Count Type MediaMovieCountOutputType
 */

export type MediaMovieCountOutputType = {
  programs: number
  channelMovies: number
}

export type MediaMovieCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  programs?: boolean | MediaMovieCountOutputTypeCountProgramsArgs
  channelMovies?: boolean | MediaMovieCountOutputTypeCountChannelMoviesArgs
}

/**
 * MediaMovieCountOutputType without action
 */
export type MediaMovieCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MediaMovieCountOutputType
   */
  select?: Prisma.MediaMovieCountOutputTypeSelect<ExtArgs> | null
}

/**
 * MediaMovieCountOutputType without action
 */
export type MediaMovieCountOutputTypeCountProgramsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ProgramWhereInput
}

/**
 * MediaMovieCountOutputType without action
 */
export type MediaMovieCountOutputTypeCountChannelMoviesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ChannelMovieWhereInput
}


export type MediaMovieSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  title?: boolean
  year?: boolean
  summary?: boolean
  poster?: boolean
  backdrop?: boolean
  duration?: boolean
  ratingKey?: boolean
  studio?: boolean
  contentRating?: boolean
  genres?: boolean
  directors?: boolean
  writers?: boolean
  actors?: boolean
  countries?: boolean
  collections?: boolean
  libraryId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  library?: boolean | Prisma.MediaLibraryDefaultArgs<ExtArgs>
  programs?: boolean | Prisma.MediaMovie$programsArgs<ExtArgs>
  channelMovies?: boolean | Prisma.MediaMovie$channelMoviesArgs<ExtArgs>
  _count?: boolean | Prisma.MediaMovieCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["mediaMovie"]>

export type MediaMovieSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  title?: boolean
  year?: boolean
  summary?: boolean
  poster?: boolean
  backdrop?: boolean
  duration?: boolean
  ratingKey?: boolean
  studio?: boolean
  contentRating?: boolean
  genres?: boolean
  directors?: boolean
  writers?: boolean
  actors?: boolean
  countries?: boolean
  collections?: boolean
  libraryId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  library?: boolean | Prisma.MediaLibraryDefaultArgs<ExtArgs>
}, ExtArgs["result"]["mediaMovie"]>

export type MediaMovieSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  title?: boolean
  year?: boolean
  summary?: boolean
  poster?: boolean
  backdrop?: boolean
  duration?: boolean
  ratingKey?: boolean
  studio?: boolean
  contentRating?: boolean
  genres?: boolean
  directors?: boolean
  writers?: boolean
  actors?: boolean
  countries?: boolean
  collections?: boolean
  libraryId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  library?: boolean | Prisma.MediaLibraryDefaultArgs<ExtArgs>
}, ExtArgs["result"]["mediaMovie"]>

export type MediaMovieSelectScalar = {
  id?: boolean
  title?: boolean
  year?: boolean
  summary?: boolean
  poster?: boolean
  backdrop?: boolean
  duration?: boolean
  ratingKey?: boolean
  studio?: boolean
  contentRating?: boolean
  genres?: boolean
  directors?: boolean
  writers?: boolean
  actors?: boolean
  countries?: boolean
  collections?: boolean
  libraryId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type MediaMovieOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "title" | "year" | "summary" | "poster" | "backdrop" | "duration" | "ratingKey" | "studio" | "contentRating" | "genres" | "directors" | "writers" | "actors" | "countries" | "collections" | "libraryId" | "createdAt" | "updatedAt", ExtArgs["result"]["mediaMovie"]>
export type MediaMovieInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  library?: boolean | Prisma.MediaLibraryDefaultArgs<ExtArgs>
  programs?: boolean | Prisma.MediaMovie$programsArgs<ExtArgs>
  channelMovies?: boolean | Prisma.MediaMovie$channelMoviesArgs<ExtArgs>
  _count?: boolean | Prisma.MediaMovieCountOutputTypeDefaultArgs<ExtArgs>
}
export type MediaMovieIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  library?: boolean | Prisma.MediaLibraryDefaultArgs<ExtArgs>
}
export type MediaMovieIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  library?: boolean | Prisma.MediaLibraryDefaultArgs<ExtArgs>
}

export type $MediaMoviePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "MediaMovie"
  objects: {
    library: Prisma.$MediaLibraryPayload<ExtArgs>
    programs: Prisma.$ProgramPayload<ExtArgs>[]
    channelMovies: Prisma.$ChannelMoviePayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    title: string
    year: number | null
    summary: string | null
    poster: string | null
    backdrop: string | null
    duration: number
    ratingKey: string
    studio: string | null
    contentRating: string | null
    genres: string | null
    directors: string | null
    writers: string | null
    actors: string | null
    countries: string | null
    collections: string | null
    libraryId: string
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["mediaMovie"]>
  composites: {}
}

export type MediaMovieGetPayload<S extends boolean | null | undefined | MediaMovieDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$MediaMoviePayload, S>

export type MediaMovieCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<MediaMovieFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: MediaMovieCountAggregateInputType | true
  }

export interface MediaMovieDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MediaMovie'], meta: { name: 'MediaMovie' } }
  /**
   * Find zero or one MediaMovie that matches the filter.
   * @param {MediaMovieFindUniqueArgs} args - Arguments to find a MediaMovie
   * @example
   * // Get one MediaMovie
   * const mediaMovie = await prisma.mediaMovie.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends MediaMovieFindUniqueArgs>(args: Prisma.SelectSubset<T, MediaMovieFindUniqueArgs<ExtArgs>>): Prisma.Prisma__MediaMovieClient<runtime.Types.Result.GetResult<Prisma.$MediaMoviePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one MediaMovie that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {MediaMovieFindUniqueOrThrowArgs} args - Arguments to find a MediaMovie
   * @example
   * // Get one MediaMovie
   * const mediaMovie = await prisma.mediaMovie.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends MediaMovieFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, MediaMovieFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__MediaMovieClient<runtime.Types.Result.GetResult<Prisma.$MediaMoviePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first MediaMovie that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MediaMovieFindFirstArgs} args - Arguments to find a MediaMovie
   * @example
   * // Get one MediaMovie
   * const mediaMovie = await prisma.mediaMovie.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends MediaMovieFindFirstArgs>(args?: Prisma.SelectSubset<T, MediaMovieFindFirstArgs<ExtArgs>>): Prisma.Prisma__MediaMovieClient<runtime.Types.Result.GetResult<Prisma.$MediaMoviePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first MediaMovie that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MediaMovieFindFirstOrThrowArgs} args - Arguments to find a MediaMovie
   * @example
   * // Get one MediaMovie
   * const mediaMovie = await prisma.mediaMovie.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends MediaMovieFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, MediaMovieFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__MediaMovieClient<runtime.Types.Result.GetResult<Prisma.$MediaMoviePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more MediaMovies that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MediaMovieFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all MediaMovies
   * const mediaMovies = await prisma.mediaMovie.findMany()
   * 
   * // Get first 10 MediaMovies
   * const mediaMovies = await prisma.mediaMovie.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const mediaMovieWithIdOnly = await prisma.mediaMovie.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends MediaMovieFindManyArgs>(args?: Prisma.SelectSubset<T, MediaMovieFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MediaMoviePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a MediaMovie.
   * @param {MediaMovieCreateArgs} args - Arguments to create a MediaMovie.
   * @example
   * // Create one MediaMovie
   * const MediaMovie = await prisma.mediaMovie.create({
   *   data: {
   *     // ... data to create a MediaMovie
   *   }
   * })
   * 
   */
  create<T extends MediaMovieCreateArgs>(args: Prisma.SelectSubset<T, MediaMovieCreateArgs<ExtArgs>>): Prisma.Prisma__MediaMovieClient<runtime.Types.Result.GetResult<Prisma.$MediaMoviePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many MediaMovies.
   * @param {MediaMovieCreateManyArgs} args - Arguments to create many MediaMovies.
   * @example
   * // Create many MediaMovies
   * const mediaMovie = await prisma.mediaMovie.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends MediaMovieCreateManyArgs>(args?: Prisma.SelectSubset<T, MediaMovieCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many MediaMovies and returns the data saved in the database.
   * @param {MediaMovieCreateManyAndReturnArgs} args - Arguments to create many MediaMovies.
   * @example
   * // Create many MediaMovies
   * const mediaMovie = await prisma.mediaMovie.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many MediaMovies and only return the `id`
   * const mediaMovieWithIdOnly = await prisma.mediaMovie.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends MediaMovieCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, MediaMovieCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MediaMoviePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a MediaMovie.
   * @param {MediaMovieDeleteArgs} args - Arguments to delete one MediaMovie.
   * @example
   * // Delete one MediaMovie
   * const MediaMovie = await prisma.mediaMovie.delete({
   *   where: {
   *     // ... filter to delete one MediaMovie
   *   }
   * })
   * 
   */
  delete<T extends MediaMovieDeleteArgs>(args: Prisma.SelectSubset<T, MediaMovieDeleteArgs<ExtArgs>>): Prisma.Prisma__MediaMovieClient<runtime.Types.Result.GetResult<Prisma.$MediaMoviePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one MediaMovie.
   * @param {MediaMovieUpdateArgs} args - Arguments to update one MediaMovie.
   * @example
   * // Update one MediaMovie
   * const mediaMovie = await prisma.mediaMovie.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends MediaMovieUpdateArgs>(args: Prisma.SelectSubset<T, MediaMovieUpdateArgs<ExtArgs>>): Prisma.Prisma__MediaMovieClient<runtime.Types.Result.GetResult<Prisma.$MediaMoviePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more MediaMovies.
   * @param {MediaMovieDeleteManyArgs} args - Arguments to filter MediaMovies to delete.
   * @example
   * // Delete a few MediaMovies
   * const { count } = await prisma.mediaMovie.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends MediaMovieDeleteManyArgs>(args?: Prisma.SelectSubset<T, MediaMovieDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more MediaMovies.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MediaMovieUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many MediaMovies
   * const mediaMovie = await prisma.mediaMovie.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends MediaMovieUpdateManyArgs>(args: Prisma.SelectSubset<T, MediaMovieUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more MediaMovies and returns the data updated in the database.
   * @param {MediaMovieUpdateManyAndReturnArgs} args - Arguments to update many MediaMovies.
   * @example
   * // Update many MediaMovies
   * const mediaMovie = await prisma.mediaMovie.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more MediaMovies and only return the `id`
   * const mediaMovieWithIdOnly = await prisma.mediaMovie.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends MediaMovieUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, MediaMovieUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MediaMoviePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one MediaMovie.
   * @param {MediaMovieUpsertArgs} args - Arguments to update or create a MediaMovie.
   * @example
   * // Update or create a MediaMovie
   * const mediaMovie = await prisma.mediaMovie.upsert({
   *   create: {
   *     // ... data to create a MediaMovie
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the MediaMovie we want to update
   *   }
   * })
   */
  upsert<T extends MediaMovieUpsertArgs>(args: Prisma.SelectSubset<T, MediaMovieUpsertArgs<ExtArgs>>): Prisma.Prisma__MediaMovieClient<runtime.Types.Result.GetResult<Prisma.$MediaMoviePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of MediaMovies.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MediaMovieCountArgs} args - Arguments to filter MediaMovies to count.
   * @example
   * // Count the number of MediaMovies
   * const count = await prisma.mediaMovie.count({
   *   where: {
   *     // ... the filter for the MediaMovies we want to count
   *   }
   * })
  **/
  count<T extends MediaMovieCountArgs>(
    args?: Prisma.Subset<T, MediaMovieCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], MediaMovieCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a MediaMovie.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MediaMovieAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends MediaMovieAggregateArgs>(args: Prisma.Subset<T, MediaMovieAggregateArgs>): Prisma.PrismaPromise<GetMediaMovieAggregateType<T>>

  /**
   * Group by MediaMovie.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MediaMovieGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends MediaMovieGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: MediaMovieGroupByArgs['orderBy'] }
      : { orderBy?: MediaMovieGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, MediaMovieGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMediaMovieGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the MediaMovie model
 */
readonly fields: MediaMovieFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for MediaMovie.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__MediaMovieClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  library<T extends Prisma.MediaLibraryDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.MediaLibraryDefaultArgs<ExtArgs>>): Prisma.Prisma__MediaLibraryClient<runtime.Types.Result.GetResult<Prisma.$MediaLibraryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  programs<T extends Prisma.MediaMovie$programsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.MediaMovie$programsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProgramPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  channelMovies<T extends Prisma.MediaMovie$channelMoviesArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.MediaMovie$channelMoviesArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ChannelMoviePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the MediaMovie model
 */
export interface MediaMovieFieldRefs {
  readonly id: Prisma.FieldRef<"MediaMovie", 'String'>
  readonly title: Prisma.FieldRef<"MediaMovie", 'String'>
  readonly year: Prisma.FieldRef<"MediaMovie", 'Int'>
  readonly summary: Prisma.FieldRef<"MediaMovie", 'String'>
  readonly poster: Prisma.FieldRef<"MediaMovie", 'String'>
  readonly backdrop: Prisma.FieldRef<"MediaMovie", 'String'>
  readonly duration: Prisma.FieldRef<"MediaMovie", 'Int'>
  readonly ratingKey: Prisma.FieldRef<"MediaMovie", 'String'>
  readonly studio: Prisma.FieldRef<"MediaMovie", 'String'>
  readonly contentRating: Prisma.FieldRef<"MediaMovie", 'String'>
  readonly genres: Prisma.FieldRef<"MediaMovie", 'String'>
  readonly directors: Prisma.FieldRef<"MediaMovie", 'String'>
  readonly writers: Prisma.FieldRef<"MediaMovie", 'String'>
  readonly actors: Prisma.FieldRef<"MediaMovie", 'String'>
  readonly countries: Prisma.FieldRef<"MediaMovie", 'String'>
  readonly collections: Prisma.FieldRef<"MediaMovie", 'String'>
  readonly libraryId: Prisma.FieldRef<"MediaMovie", 'String'>
  readonly createdAt: Prisma.FieldRef<"MediaMovie", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"MediaMovie", 'DateTime'>
}
    

// Custom InputTypes
/**
 * MediaMovie findUnique
 */
export type MediaMovieFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MediaMovie
   */
  select?: Prisma.MediaMovieSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MediaMovie
   */
  omit?: Prisma.MediaMovieOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MediaMovieInclude<ExtArgs> | null
  /**
   * Filter, which MediaMovie to fetch.
   */
  where: Prisma.MediaMovieWhereUniqueInput
}

/**
 * MediaMovie findUniqueOrThrow
 */
export type MediaMovieFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MediaMovie
   */
  select?: Prisma.MediaMovieSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MediaMovie
   */
  omit?: Prisma.MediaMovieOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MediaMovieInclude<ExtArgs> | null
  /**
   * Filter, which MediaMovie to fetch.
   */
  where: Prisma.MediaMovieWhereUniqueInput
}

/**
 * MediaMovie findFirst
 */
export type MediaMovieFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MediaMovie
   */
  select?: Prisma.MediaMovieSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MediaMovie
   */
  omit?: Prisma.MediaMovieOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MediaMovieInclude<ExtArgs> | null
  /**
   * Filter, which MediaMovie to fetch.
   */
  where?: Prisma.MediaMovieWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MediaMovies to fetch.
   */
  orderBy?: Prisma.MediaMovieOrderByWithRelationInput | Prisma.MediaMovieOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for MediaMovies.
   */
  cursor?: Prisma.MediaMovieWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MediaMovies from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MediaMovies.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of MediaMovies.
   */
  distinct?: Prisma.MediaMovieScalarFieldEnum | Prisma.MediaMovieScalarFieldEnum[]
}

/**
 * MediaMovie findFirstOrThrow
 */
export type MediaMovieFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MediaMovie
   */
  select?: Prisma.MediaMovieSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MediaMovie
   */
  omit?: Prisma.MediaMovieOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MediaMovieInclude<ExtArgs> | null
  /**
   * Filter, which MediaMovie to fetch.
   */
  where?: Prisma.MediaMovieWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MediaMovies to fetch.
   */
  orderBy?: Prisma.MediaMovieOrderByWithRelationInput | Prisma.MediaMovieOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for MediaMovies.
   */
  cursor?: Prisma.MediaMovieWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MediaMovies from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MediaMovies.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of MediaMovies.
   */
  distinct?: Prisma.MediaMovieScalarFieldEnum | Prisma.MediaMovieScalarFieldEnum[]
}

/**
 * MediaMovie findMany
 */
export type MediaMovieFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MediaMovie
   */
  select?: Prisma.MediaMovieSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MediaMovie
   */
  omit?: Prisma.MediaMovieOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MediaMovieInclude<ExtArgs> | null
  /**
   * Filter, which MediaMovies to fetch.
   */
  where?: Prisma.MediaMovieWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MediaMovies to fetch.
   */
  orderBy?: Prisma.MediaMovieOrderByWithRelationInput | Prisma.MediaMovieOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing MediaMovies.
   */
  cursor?: Prisma.MediaMovieWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MediaMovies from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MediaMovies.
   */
  skip?: number
  distinct?: Prisma.MediaMovieScalarFieldEnum | Prisma.MediaMovieScalarFieldEnum[]
}

/**
 * MediaMovie create
 */
export type MediaMovieCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MediaMovie
   */
  select?: Prisma.MediaMovieSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MediaMovie
   */
  omit?: Prisma.MediaMovieOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MediaMovieInclude<ExtArgs> | null
  /**
   * The data needed to create a MediaMovie.
   */
  data: Prisma.XOR<Prisma.MediaMovieCreateInput, Prisma.MediaMovieUncheckedCreateInput>
}

/**
 * MediaMovie createMany
 */
export type MediaMovieCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many MediaMovies.
   */
  data: Prisma.MediaMovieCreateManyInput | Prisma.MediaMovieCreateManyInput[]
}

/**
 * MediaMovie createManyAndReturn
 */
export type MediaMovieCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MediaMovie
   */
  select?: Prisma.MediaMovieSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the MediaMovie
   */
  omit?: Prisma.MediaMovieOmit<ExtArgs> | null
  /**
   * The data used to create many MediaMovies.
   */
  data: Prisma.MediaMovieCreateManyInput | Prisma.MediaMovieCreateManyInput[]
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MediaMovieIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * MediaMovie update
 */
export type MediaMovieUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MediaMovie
   */
  select?: Prisma.MediaMovieSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MediaMovie
   */
  omit?: Prisma.MediaMovieOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MediaMovieInclude<ExtArgs> | null
  /**
   * The data needed to update a MediaMovie.
   */
  data: Prisma.XOR<Prisma.MediaMovieUpdateInput, Prisma.MediaMovieUncheckedUpdateInput>
  /**
   * Choose, which MediaMovie to update.
   */
  where: Prisma.MediaMovieWhereUniqueInput
}

/**
 * MediaMovie updateMany
 */
export type MediaMovieUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update MediaMovies.
   */
  data: Prisma.XOR<Prisma.MediaMovieUpdateManyMutationInput, Prisma.MediaMovieUncheckedUpdateManyInput>
  /**
   * Filter which MediaMovies to update
   */
  where?: Prisma.MediaMovieWhereInput
  /**
   * Limit how many MediaMovies to update.
   */
  limit?: number
}

/**
 * MediaMovie updateManyAndReturn
 */
export type MediaMovieUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MediaMovie
   */
  select?: Prisma.MediaMovieSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the MediaMovie
   */
  omit?: Prisma.MediaMovieOmit<ExtArgs> | null
  /**
   * The data used to update MediaMovies.
   */
  data: Prisma.XOR<Prisma.MediaMovieUpdateManyMutationInput, Prisma.MediaMovieUncheckedUpdateManyInput>
  /**
   * Filter which MediaMovies to update
   */
  where?: Prisma.MediaMovieWhereInput
  /**
   * Limit how many MediaMovies to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MediaMovieIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * MediaMovie upsert
 */
export type MediaMovieUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MediaMovie
   */
  select?: Prisma.MediaMovieSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MediaMovie
   */
  omit?: Prisma.MediaMovieOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MediaMovieInclude<ExtArgs> | null
  /**
   * The filter to search for the MediaMovie to update in case it exists.
   */
  where: Prisma.MediaMovieWhereUniqueInput
  /**
   * In case the MediaMovie found by the `where` argument doesn't exist, create a new MediaMovie with this data.
   */
  create: Prisma.XOR<Prisma.MediaMovieCreateInput, Prisma.MediaMovieUncheckedCreateInput>
  /**
   * In case the MediaMovie was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.MediaMovieUpdateInput, Prisma.MediaMovieUncheckedUpdateInput>
}

/**
 * MediaMovie delete
 */
export type MediaMovieDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MediaMovie
   */
  select?: Prisma.MediaMovieSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MediaMovie
   */
  omit?: Prisma.MediaMovieOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MediaMovieInclude<ExtArgs> | null
  /**
   * Filter which MediaMovie to delete.
   */
  where: Prisma.MediaMovieWhereUniqueInput
}

/**
 * MediaMovie deleteMany
 */
export type MediaMovieDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which MediaMovies to delete
   */
  where?: Prisma.MediaMovieWhereInput
  /**
   * Limit how many MediaMovies to delete.
   */
  limit?: number
}

/**
 * MediaMovie.programs
 */
export type MediaMovie$programsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Program
   */
  select?: Prisma.ProgramSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Program
   */
  omit?: Prisma.ProgramOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProgramInclude<ExtArgs> | null
  where?: Prisma.ProgramWhereInput
  orderBy?: Prisma.ProgramOrderByWithRelationInput | Prisma.ProgramOrderByWithRelationInput[]
  cursor?: Prisma.ProgramWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.ProgramScalarFieldEnum | Prisma.ProgramScalarFieldEnum[]
}

/**
 * MediaMovie.channelMovies
 */
export type MediaMovie$channelMoviesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChannelMovie
   */
  select?: Prisma.ChannelMovieSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ChannelMovie
   */
  omit?: Prisma.ChannelMovieOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChannelMovieInclude<ExtArgs> | null
  where?: Prisma.ChannelMovieWhereInput
  orderBy?: Prisma.ChannelMovieOrderByWithRelationInput | Prisma.ChannelMovieOrderByWithRelationInput[]
  cursor?: Prisma.ChannelMovieWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.ChannelMovieScalarFieldEnum | Prisma.ChannelMovieScalarFieldEnum[]
}

/**
 * MediaMovie without action
 */
export type MediaMovieDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MediaMovie
   */
  select?: Prisma.MediaMovieSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MediaMovie
   */
  omit?: Prisma.MediaMovieOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MediaMovieInclude<ExtArgs> | null
}
