
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `FfmpegSettings` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model FfmpegSettings
 * 
 */
export type FfmpegSettingsModel = runtime.Types.Result.DefaultSelection<Prisma.$FfmpegSettingsPayload>

export type AggregateFfmpegSettings = {
  _count: FfmpegSettingsCountAggregateOutputType | null
  _avg: FfmpegSettingsAvgAggregateOutputType | null
  _sum: FfmpegSettingsSumAggregateOutputType | null
  _min: FfmpegSettingsMinAggregateOutputType | null
  _max: FfmpegSettingsMaxAggregateOutputType | null
}

export type FfmpegSettingsAvgAggregateOutputType = {
  audioSampleRate: number | null
  audioChannels: number | null
  videoCrf: number | null
  maxMuxingQueueSize: number | null
  threads: number | null
  segmentTime: number | null
  segmentListSize: number | null
}

export type FfmpegSettingsSumAggregateOutputType = {
  audioSampleRate: number | null
  audioChannels: number | null
  videoCrf: number | null
  maxMuxingQueueSize: number | null
  threads: number | null
  segmentTime: number | null
  segmentListSize: number | null
}

export type FfmpegSettingsMinAggregateOutputType = {
  id: string | null
  ffmpegPath: string | null
  ffprobePath: string | null
  pathLocked: boolean | null
  autoDetectPath: boolean | null
  enableTranscoding: boolean | null
  targetResolution: string | null
  videoBitrate: string | null
  videoBufSize: string | null
  videoCodec: string | null
  audioCodec: string | null
  audioSampleRate: number | null
  audioBitrate: string | null
  audioChannels: number | null
  enableHardwareAccel: boolean | null
  hardwareAccelType: string | null
  hardwareDevice: string | null
  videoPreset: string | null
  videoCrf: number | null
  maxMuxingQueueSize: number | null
  threads: number | null
  outputFormat: string | null
  segmentTime: number | null
  segmentListSize: number | null
  errorScreen: string | null
  errorAudio: string | null
  logLevel: string | null
  enableStats: boolean | null
  statsFilePath: string | null
  globalOptions: string | null
  inputOptions: string | null
  outputOptions: string | null
  settingsId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type FfmpegSettingsMaxAggregateOutputType = {
  id: string | null
  ffmpegPath: string | null
  ffprobePath: string | null
  pathLocked: boolean | null
  autoDetectPath: boolean | null
  enableTranscoding: boolean | null
  targetResolution: string | null
  videoBitrate: string | null
  videoBufSize: string | null
  videoCodec: string | null
  audioCodec: string | null
  audioSampleRate: number | null
  audioBitrate: string | null
  audioChannels: number | null
  enableHardwareAccel: boolean | null
  hardwareAccelType: string | null
  hardwareDevice: string | null
  videoPreset: string | null
  videoCrf: number | null
  maxMuxingQueueSize: number | null
  threads: number | null
  outputFormat: string | null
  segmentTime: number | null
  segmentListSize: number | null
  errorScreen: string | null
  errorAudio: string | null
  logLevel: string | null
  enableStats: boolean | null
  statsFilePath: string | null
  globalOptions: string | null
  inputOptions: string | null
  outputOptions: string | null
  settingsId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type FfmpegSettingsCountAggregateOutputType = {
  id: number
  ffmpegPath: number
  ffprobePath: number
  pathLocked: number
  autoDetectPath: number
  enableTranscoding: number
  targetResolution: number
  videoBitrate: number
  videoBufSize: number
  videoCodec: number
  audioCodec: number
  audioSampleRate: number
  audioBitrate: number
  audioChannels: number
  enableHardwareAccel: number
  hardwareAccelType: number
  hardwareDevice: number
  videoPreset: number
  videoCrf: number
  maxMuxingQueueSize: number
  threads: number
  outputFormat: number
  segmentTime: number
  segmentListSize: number
  errorScreen: number
  errorAudio: number
  logLevel: number
  enableStats: number
  statsFilePath: number
  globalOptions: number
  inputOptions: number
  outputOptions: number
  settingsId: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type FfmpegSettingsAvgAggregateInputType = {
  audioSampleRate?: true
  audioChannels?: true
  videoCrf?: true
  maxMuxingQueueSize?: true
  threads?: true
  segmentTime?: true
  segmentListSize?: true
}

export type FfmpegSettingsSumAggregateInputType = {
  audioSampleRate?: true
  audioChannels?: true
  videoCrf?: true
  maxMuxingQueueSize?: true
  threads?: true
  segmentTime?: true
  segmentListSize?: true
}

export type FfmpegSettingsMinAggregateInputType = {
  id?: true
  ffmpegPath?: true
  ffprobePath?: true
  pathLocked?: true
  autoDetectPath?: true
  enableTranscoding?: true
  targetResolution?: true
  videoBitrate?: true
  videoBufSize?: true
  videoCodec?: true
  audioCodec?: true
  audioSampleRate?: true
  audioBitrate?: true
  audioChannels?: true
  enableHardwareAccel?: true
  hardwareAccelType?: true
  hardwareDevice?: true
  videoPreset?: true
  videoCrf?: true
  maxMuxingQueueSize?: true
  threads?: true
  outputFormat?: true
  segmentTime?: true
  segmentListSize?: true
  errorScreen?: true
  errorAudio?: true
  logLevel?: true
  enableStats?: true
  statsFilePath?: true
  globalOptions?: true
  inputOptions?: true
  outputOptions?: true
  settingsId?: true
  createdAt?: true
  updatedAt?: true
}

export type FfmpegSettingsMaxAggregateInputType = {
  id?: true
  ffmpegPath?: true
  ffprobePath?: true
  pathLocked?: true
  autoDetectPath?: true
  enableTranscoding?: true
  targetResolution?: true
  videoBitrate?: true
  videoBufSize?: true
  videoCodec?: true
  audioCodec?: true
  audioSampleRate?: true
  audioBitrate?: true
  audioChannels?: true
  enableHardwareAccel?: true
  hardwareAccelType?: true
  hardwareDevice?: true
  videoPreset?: true
  videoCrf?: true
  maxMuxingQueueSize?: true
  threads?: true
  outputFormat?: true
  segmentTime?: true
  segmentListSize?: true
  errorScreen?: true
  errorAudio?: true
  logLevel?: true
  enableStats?: true
  statsFilePath?: true
  globalOptions?: true
  inputOptions?: true
  outputOptions?: true
  settingsId?: true
  createdAt?: true
  updatedAt?: true
}

export type FfmpegSettingsCountAggregateInputType = {
  id?: true
  ffmpegPath?: true
  ffprobePath?: true
  pathLocked?: true
  autoDetectPath?: true
  enableTranscoding?: true
  targetResolution?: true
  videoBitrate?: true
  videoBufSize?: true
  videoCodec?: true
  audioCodec?: true
  audioSampleRate?: true
  audioBitrate?: true
  audioChannels?: true
  enableHardwareAccel?: true
  hardwareAccelType?: true
  hardwareDevice?: true
  videoPreset?: true
  videoCrf?: true
  maxMuxingQueueSize?: true
  threads?: true
  outputFormat?: true
  segmentTime?: true
  segmentListSize?: true
  errorScreen?: true
  errorAudio?: true
  logLevel?: true
  enableStats?: true
  statsFilePath?: true
  globalOptions?: true
  inputOptions?: true
  outputOptions?: true
  settingsId?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type FfmpegSettingsAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which FfmpegSettings to aggregate.
   */
  where?: Prisma.FfmpegSettingsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of FfmpegSettings to fetch.
   */
  orderBy?: Prisma.FfmpegSettingsOrderByWithRelationInput | Prisma.FfmpegSettingsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.FfmpegSettingsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` FfmpegSettings from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` FfmpegSettings.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned FfmpegSettings
  **/
  _count?: true | FfmpegSettingsCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: FfmpegSettingsAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: FfmpegSettingsSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: FfmpegSettingsMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: FfmpegSettingsMaxAggregateInputType
}

export type GetFfmpegSettingsAggregateType<T extends FfmpegSettingsAggregateArgs> = {
      [P in keyof T & keyof AggregateFfmpegSettings]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateFfmpegSettings[P]>
    : Prisma.GetScalarType<T[P], AggregateFfmpegSettings[P]>
}




export type FfmpegSettingsGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.FfmpegSettingsWhereInput
  orderBy?: Prisma.FfmpegSettingsOrderByWithAggregationInput | Prisma.FfmpegSettingsOrderByWithAggregationInput[]
  by: Prisma.FfmpegSettingsScalarFieldEnum[] | Prisma.FfmpegSettingsScalarFieldEnum
  having?: Prisma.FfmpegSettingsScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: FfmpegSettingsCountAggregateInputType | true
  _avg?: FfmpegSettingsAvgAggregateInputType
  _sum?: FfmpegSettingsSumAggregateInputType
  _min?: FfmpegSettingsMinAggregateInputType
  _max?: FfmpegSettingsMaxAggregateInputType
}

export type FfmpegSettingsGroupByOutputType = {
  id: string
  ffmpegPath: string
  ffprobePath: string
  pathLocked: boolean
  autoDetectPath: boolean
  enableTranscoding: boolean
  targetResolution: string
  videoBitrate: string
  videoBufSize: string
  videoCodec: string
  audioCodec: string
  audioSampleRate: number
  audioBitrate: string
  audioChannels: number
  enableHardwareAccel: boolean
  hardwareAccelType: string
  hardwareDevice: string
  videoPreset: string
  videoCrf: number
  maxMuxingQueueSize: number
  threads: number
  outputFormat: string
  segmentTime: number
  segmentListSize: number
  errorScreen: string
  errorAudio: string
  logLevel: string
  enableStats: boolean
  statsFilePath: string
  globalOptions: string
  inputOptions: string
  outputOptions: string
  settingsId: string
  createdAt: Date
  updatedAt: Date
  _count: FfmpegSettingsCountAggregateOutputType | null
  _avg: FfmpegSettingsAvgAggregateOutputType | null
  _sum: FfmpegSettingsSumAggregateOutputType | null
  _min: FfmpegSettingsMinAggregateOutputType | null
  _max: FfmpegSettingsMaxAggregateOutputType | null
}

type GetFfmpegSettingsGroupByPayload<T extends FfmpegSettingsGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<FfmpegSettingsGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof FfmpegSettingsGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], FfmpegSettingsGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], FfmpegSettingsGroupByOutputType[P]>
      }
    >
  > 



export type FfmpegSettingsWhereInput = {
  AND?: Prisma.FfmpegSettingsWhereInput | Prisma.FfmpegSettingsWhereInput[]
  OR?: Prisma.FfmpegSettingsWhereInput[]
  NOT?: Prisma.FfmpegSettingsWhereInput | Prisma.FfmpegSettingsWhereInput[]
  id?: Prisma.StringFilter<"FfmpegSettings"> | string
  ffmpegPath?: Prisma.StringFilter<"FfmpegSettings"> | string
  ffprobePath?: Prisma.StringFilter<"FfmpegSettings"> | string
  pathLocked?: Prisma.BoolFilter<"FfmpegSettings"> | boolean
  autoDetectPath?: Prisma.BoolFilter<"FfmpegSettings"> | boolean
  enableTranscoding?: Prisma.BoolFilter<"FfmpegSettings"> | boolean
  targetResolution?: Prisma.StringFilter<"FfmpegSettings"> | string
  videoBitrate?: Prisma.StringFilter<"FfmpegSettings"> | string
  videoBufSize?: Prisma.StringFilter<"FfmpegSettings"> | string
  videoCodec?: Prisma.StringFilter<"FfmpegSettings"> | string
  audioCodec?: Prisma.StringFilter<"FfmpegSettings"> | string
  audioSampleRate?: Prisma.IntFilter<"FfmpegSettings"> | number
  audioBitrate?: Prisma.StringFilter<"FfmpegSettings"> | string
  audioChannels?: Prisma.IntFilter<"FfmpegSettings"> | number
  enableHardwareAccel?: Prisma.BoolFilter<"FfmpegSettings"> | boolean
  hardwareAccelType?: Prisma.StringFilter<"FfmpegSettings"> | string
  hardwareDevice?: Prisma.StringFilter<"FfmpegSettings"> | string
  videoPreset?: Prisma.StringFilter<"FfmpegSettings"> | string
  videoCrf?: Prisma.IntFilter<"FfmpegSettings"> | number
  maxMuxingQueueSize?: Prisma.IntFilter<"FfmpegSettings"> | number
  threads?: Prisma.IntFilter<"FfmpegSettings"> | number
  outputFormat?: Prisma.StringFilter<"FfmpegSettings"> | string
  segmentTime?: Prisma.IntFilter<"FfmpegSettings"> | number
  segmentListSize?: Prisma.IntFilter<"FfmpegSettings"> | number
  errorScreen?: Prisma.StringFilter<"FfmpegSettings"> | string
  errorAudio?: Prisma.StringFilter<"FfmpegSettings"> | string
  logLevel?: Prisma.StringFilter<"FfmpegSettings"> | string
  enableStats?: Prisma.BoolFilter<"FfmpegSettings"> | boolean
  statsFilePath?: Prisma.StringFilter<"FfmpegSettings"> | string
  globalOptions?: Prisma.StringFilter<"FfmpegSettings"> | string
  inputOptions?: Prisma.StringFilter<"FfmpegSettings"> | string
  outputOptions?: Prisma.StringFilter<"FfmpegSettings"> | string
  settingsId?: Prisma.StringFilter<"FfmpegSettings"> | string
  createdAt?: Prisma.DateTimeFilter<"FfmpegSettings"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"FfmpegSettings"> | Date | string
  settings?: Prisma.XOR<Prisma.SettingsScalarRelationFilter, Prisma.SettingsWhereInput>
}

export type FfmpegSettingsOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  ffmpegPath?: Prisma.SortOrder
  ffprobePath?: Prisma.SortOrder
  pathLocked?: Prisma.SortOrder
  autoDetectPath?: Prisma.SortOrder
  enableTranscoding?: Prisma.SortOrder
  targetResolution?: Prisma.SortOrder
  videoBitrate?: Prisma.SortOrder
  videoBufSize?: Prisma.SortOrder
  videoCodec?: Prisma.SortOrder
  audioCodec?: Prisma.SortOrder
  audioSampleRate?: Prisma.SortOrder
  audioBitrate?: Prisma.SortOrder
  audioChannels?: Prisma.SortOrder
  enableHardwareAccel?: Prisma.SortOrder
  hardwareAccelType?: Prisma.SortOrder
  hardwareDevice?: Prisma.SortOrder
  videoPreset?: Prisma.SortOrder
  videoCrf?: Prisma.SortOrder
  maxMuxingQueueSize?: Prisma.SortOrder
  threads?: Prisma.SortOrder
  outputFormat?: Prisma.SortOrder
  segmentTime?: Prisma.SortOrder
  segmentListSize?: Prisma.SortOrder
  errorScreen?: Prisma.SortOrder
  errorAudio?: Prisma.SortOrder
  logLevel?: Prisma.SortOrder
  enableStats?: Prisma.SortOrder
  statsFilePath?: Prisma.SortOrder
  globalOptions?: Prisma.SortOrder
  inputOptions?: Prisma.SortOrder
  outputOptions?: Prisma.SortOrder
  settingsId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  settings?: Prisma.SettingsOrderByWithRelationInput
}

export type FfmpegSettingsWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  settingsId?: string
  AND?: Prisma.FfmpegSettingsWhereInput | Prisma.FfmpegSettingsWhereInput[]
  OR?: Prisma.FfmpegSettingsWhereInput[]
  NOT?: Prisma.FfmpegSettingsWhereInput | Prisma.FfmpegSettingsWhereInput[]
  ffmpegPath?: Prisma.StringFilter<"FfmpegSettings"> | string
  ffprobePath?: Prisma.StringFilter<"FfmpegSettings"> | string
  pathLocked?: Prisma.BoolFilter<"FfmpegSettings"> | boolean
  autoDetectPath?: Prisma.BoolFilter<"FfmpegSettings"> | boolean
  enableTranscoding?: Prisma.BoolFilter<"FfmpegSettings"> | boolean
  targetResolution?: Prisma.StringFilter<"FfmpegSettings"> | string
  videoBitrate?: Prisma.StringFilter<"FfmpegSettings"> | string
  videoBufSize?: Prisma.StringFilter<"FfmpegSettings"> | string
  videoCodec?: Prisma.StringFilter<"FfmpegSettings"> | string
  audioCodec?: Prisma.StringFilter<"FfmpegSettings"> | string
  audioSampleRate?: Prisma.IntFilter<"FfmpegSettings"> | number
  audioBitrate?: Prisma.StringFilter<"FfmpegSettings"> | string
  audioChannels?: Prisma.IntFilter<"FfmpegSettings"> | number
  enableHardwareAccel?: Prisma.BoolFilter<"FfmpegSettings"> | boolean
  hardwareAccelType?: Prisma.StringFilter<"FfmpegSettings"> | string
  hardwareDevice?: Prisma.StringFilter<"FfmpegSettings"> | string
  videoPreset?: Prisma.StringFilter<"FfmpegSettings"> | string
  videoCrf?: Prisma.IntFilter<"FfmpegSettings"> | number
  maxMuxingQueueSize?: Prisma.IntFilter<"FfmpegSettings"> | number
  threads?: Prisma.IntFilter<"FfmpegSettings"> | number
  outputFormat?: Prisma.StringFilter<"FfmpegSettings"> | string
  segmentTime?: Prisma.IntFilter<"FfmpegSettings"> | number
  segmentListSize?: Prisma.IntFilter<"FfmpegSettings"> | number
  errorScreen?: Prisma.StringFilter<"FfmpegSettings"> | string
  errorAudio?: Prisma.StringFilter<"FfmpegSettings"> | string
  logLevel?: Prisma.StringFilter<"FfmpegSettings"> | string
  enableStats?: Prisma.BoolFilter<"FfmpegSettings"> | boolean
  statsFilePath?: Prisma.StringFilter<"FfmpegSettings"> | string
  globalOptions?: Prisma.StringFilter<"FfmpegSettings"> | string
  inputOptions?: Prisma.StringFilter<"FfmpegSettings"> | string
  outputOptions?: Prisma.StringFilter<"FfmpegSettings"> | string
  createdAt?: Prisma.DateTimeFilter<"FfmpegSettings"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"FfmpegSettings"> | Date | string
  settings?: Prisma.XOR<Prisma.SettingsScalarRelationFilter, Prisma.SettingsWhereInput>
}, "id" | "settingsId">

export type FfmpegSettingsOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  ffmpegPath?: Prisma.SortOrder
  ffprobePath?: Prisma.SortOrder
  pathLocked?: Prisma.SortOrder
  autoDetectPath?: Prisma.SortOrder
  enableTranscoding?: Prisma.SortOrder
  targetResolution?: Prisma.SortOrder
  videoBitrate?: Prisma.SortOrder
  videoBufSize?: Prisma.SortOrder
  videoCodec?: Prisma.SortOrder
  audioCodec?: Prisma.SortOrder
  audioSampleRate?: Prisma.SortOrder
  audioBitrate?: Prisma.SortOrder
  audioChannels?: Prisma.SortOrder
  enableHardwareAccel?: Prisma.SortOrder
  hardwareAccelType?: Prisma.SortOrder
  hardwareDevice?: Prisma.SortOrder
  videoPreset?: Prisma.SortOrder
  videoCrf?: Prisma.SortOrder
  maxMuxingQueueSize?: Prisma.SortOrder
  threads?: Prisma.SortOrder
  outputFormat?: Prisma.SortOrder
  segmentTime?: Prisma.SortOrder
  segmentListSize?: Prisma.SortOrder
  errorScreen?: Prisma.SortOrder
  errorAudio?: Prisma.SortOrder
  logLevel?: Prisma.SortOrder
  enableStats?: Prisma.SortOrder
  statsFilePath?: Prisma.SortOrder
  globalOptions?: Prisma.SortOrder
  inputOptions?: Prisma.SortOrder
  outputOptions?: Prisma.SortOrder
  settingsId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.FfmpegSettingsCountOrderByAggregateInput
  _avg?: Prisma.FfmpegSettingsAvgOrderByAggregateInput
  _max?: Prisma.FfmpegSettingsMaxOrderByAggregateInput
  _min?: Prisma.FfmpegSettingsMinOrderByAggregateInput
  _sum?: Prisma.FfmpegSettingsSumOrderByAggregateInput
}

export type FfmpegSettingsScalarWhereWithAggregatesInput = {
  AND?: Prisma.FfmpegSettingsScalarWhereWithAggregatesInput | Prisma.FfmpegSettingsScalarWhereWithAggregatesInput[]
  OR?: Prisma.FfmpegSettingsScalarWhereWithAggregatesInput[]
  NOT?: Prisma.FfmpegSettingsScalarWhereWithAggregatesInput | Prisma.FfmpegSettingsScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"FfmpegSettings"> | string
  ffmpegPath?: Prisma.StringWithAggregatesFilter<"FfmpegSettings"> | string
  ffprobePath?: Prisma.StringWithAggregatesFilter<"FfmpegSettings"> | string
  pathLocked?: Prisma.BoolWithAggregatesFilter<"FfmpegSettings"> | boolean
  autoDetectPath?: Prisma.BoolWithAggregatesFilter<"FfmpegSettings"> | boolean
  enableTranscoding?: Prisma.BoolWithAggregatesFilter<"FfmpegSettings"> | boolean
  targetResolution?: Prisma.StringWithAggregatesFilter<"FfmpegSettings"> | string
  videoBitrate?: Prisma.StringWithAggregatesFilter<"FfmpegSettings"> | string
  videoBufSize?: Prisma.StringWithAggregatesFilter<"FfmpegSettings"> | string
  videoCodec?: Prisma.StringWithAggregatesFilter<"FfmpegSettings"> | string
  audioCodec?: Prisma.StringWithAggregatesFilter<"FfmpegSettings"> | string
  audioSampleRate?: Prisma.IntWithAggregatesFilter<"FfmpegSettings"> | number
  audioBitrate?: Prisma.StringWithAggregatesFilter<"FfmpegSettings"> | string
  audioChannels?: Prisma.IntWithAggregatesFilter<"FfmpegSettings"> | number
  enableHardwareAccel?: Prisma.BoolWithAggregatesFilter<"FfmpegSettings"> | boolean
  hardwareAccelType?: Prisma.StringWithAggregatesFilter<"FfmpegSettings"> | string
  hardwareDevice?: Prisma.StringWithAggregatesFilter<"FfmpegSettings"> | string
  videoPreset?: Prisma.StringWithAggregatesFilter<"FfmpegSettings"> | string
  videoCrf?: Prisma.IntWithAggregatesFilter<"FfmpegSettings"> | number
  maxMuxingQueueSize?: Prisma.IntWithAggregatesFilter<"FfmpegSettings"> | number
  threads?: Prisma.IntWithAggregatesFilter<"FfmpegSettings"> | number
  outputFormat?: Prisma.StringWithAggregatesFilter<"FfmpegSettings"> | string
  segmentTime?: Prisma.IntWithAggregatesFilter<"FfmpegSettings"> | number
  segmentListSize?: Prisma.IntWithAggregatesFilter<"FfmpegSettings"> | number
  errorScreen?: Prisma.StringWithAggregatesFilter<"FfmpegSettings"> | string
  errorAudio?: Prisma.StringWithAggregatesFilter<"FfmpegSettings"> | string
  logLevel?: Prisma.StringWithAggregatesFilter<"FfmpegSettings"> | string
  enableStats?: Prisma.BoolWithAggregatesFilter<"FfmpegSettings"> | boolean
  statsFilePath?: Prisma.StringWithAggregatesFilter<"FfmpegSettings"> | string
  globalOptions?: Prisma.StringWithAggregatesFilter<"FfmpegSettings"> | string
  inputOptions?: Prisma.StringWithAggregatesFilter<"FfmpegSettings"> | string
  outputOptions?: Prisma.StringWithAggregatesFilter<"FfmpegSettings"> | string
  settingsId?: Prisma.StringWithAggregatesFilter<"FfmpegSettings"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"FfmpegSettings"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"FfmpegSettings"> | Date | string
}

export type FfmpegSettingsCreateInput = {
  id?: string
  ffmpegPath?: string
  ffprobePath?: string
  pathLocked?: boolean
  autoDetectPath?: boolean
  enableTranscoding?: boolean
  targetResolution?: string
  videoBitrate?: string
  videoBufSize?: string
  videoCodec?: string
  audioCodec?: string
  audioSampleRate?: number
  audioBitrate?: string
  audioChannels?: number
  enableHardwareAccel?: boolean
  hardwareAccelType?: string
  hardwareDevice?: string
  videoPreset?: string
  videoCrf?: number
  maxMuxingQueueSize?: number
  threads?: number
  outputFormat?: string
  segmentTime?: number
  segmentListSize?: number
  errorScreen?: string
  errorAudio?: string
  logLevel?: string
  enableStats?: boolean
  statsFilePath?: string
  globalOptions?: string
  inputOptions?: string
  outputOptions?: string
  createdAt?: Date | string
  updatedAt?: Date | string
  settings?: Prisma.SettingsCreateNestedOneWithoutFfmpegSettingsInput
}

export type FfmpegSettingsUncheckedCreateInput = {
  id?: string
  ffmpegPath?: string
  ffprobePath?: string
  pathLocked?: boolean
  autoDetectPath?: boolean
  enableTranscoding?: boolean
  targetResolution?: string
  videoBitrate?: string
  videoBufSize?: string
  videoCodec?: string
  audioCodec?: string
  audioSampleRate?: number
  audioBitrate?: string
  audioChannels?: number
  enableHardwareAccel?: boolean
  hardwareAccelType?: string
  hardwareDevice?: string
  videoPreset?: string
  videoCrf?: number
  maxMuxingQueueSize?: number
  threads?: number
  outputFormat?: string
  segmentTime?: number
  segmentListSize?: number
  errorScreen?: string
  errorAudio?: string
  logLevel?: string
  enableStats?: boolean
  statsFilePath?: string
  globalOptions?: string
  inputOptions?: string
  outputOptions?: string
  settingsId?: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type FfmpegSettingsUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  ffmpegPath?: Prisma.StringFieldUpdateOperationsInput | string
  ffprobePath?: Prisma.StringFieldUpdateOperationsInput | string
  pathLocked?: Prisma.BoolFieldUpdateOperationsInput | boolean
  autoDetectPath?: Prisma.BoolFieldUpdateOperationsInput | boolean
  enableTranscoding?: Prisma.BoolFieldUpdateOperationsInput | boolean
  targetResolution?: Prisma.StringFieldUpdateOperationsInput | string
  videoBitrate?: Prisma.StringFieldUpdateOperationsInput | string
  videoBufSize?: Prisma.StringFieldUpdateOperationsInput | string
  videoCodec?: Prisma.StringFieldUpdateOperationsInput | string
  audioCodec?: Prisma.StringFieldUpdateOperationsInput | string
  audioSampleRate?: Prisma.IntFieldUpdateOperationsInput | number
  audioBitrate?: Prisma.StringFieldUpdateOperationsInput | string
  audioChannels?: Prisma.IntFieldUpdateOperationsInput | number
  enableHardwareAccel?: Prisma.BoolFieldUpdateOperationsInput | boolean
  hardwareAccelType?: Prisma.StringFieldUpdateOperationsInput | string
  hardwareDevice?: Prisma.StringFieldUpdateOperationsInput | string
  videoPreset?: Prisma.StringFieldUpdateOperationsInput | string
  videoCrf?: Prisma.IntFieldUpdateOperationsInput | number
  maxMuxingQueueSize?: Prisma.IntFieldUpdateOperationsInput | number
  threads?: Prisma.IntFieldUpdateOperationsInput | number
  outputFormat?: Prisma.StringFieldUpdateOperationsInput | string
  segmentTime?: Prisma.IntFieldUpdateOperationsInput | number
  segmentListSize?: Prisma.IntFieldUpdateOperationsInput | number
  errorScreen?: Prisma.StringFieldUpdateOperationsInput | string
  errorAudio?: Prisma.StringFieldUpdateOperationsInput | string
  logLevel?: Prisma.StringFieldUpdateOperationsInput | string
  enableStats?: Prisma.BoolFieldUpdateOperationsInput | boolean
  statsFilePath?: Prisma.StringFieldUpdateOperationsInput | string
  globalOptions?: Prisma.StringFieldUpdateOperationsInput | string
  inputOptions?: Prisma.StringFieldUpdateOperationsInput | string
  outputOptions?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  settings?: Prisma.SettingsUpdateOneRequiredWithoutFfmpegSettingsNestedInput
}

export type FfmpegSettingsUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  ffmpegPath?: Prisma.StringFieldUpdateOperationsInput | string
  ffprobePath?: Prisma.StringFieldUpdateOperationsInput | string
  pathLocked?: Prisma.BoolFieldUpdateOperationsInput | boolean
  autoDetectPath?: Prisma.BoolFieldUpdateOperationsInput | boolean
  enableTranscoding?: Prisma.BoolFieldUpdateOperationsInput | boolean
  targetResolution?: Prisma.StringFieldUpdateOperationsInput | string
  videoBitrate?: Prisma.StringFieldUpdateOperationsInput | string
  videoBufSize?: Prisma.StringFieldUpdateOperationsInput | string
  videoCodec?: Prisma.StringFieldUpdateOperationsInput | string
  audioCodec?: Prisma.StringFieldUpdateOperationsInput | string
  audioSampleRate?: Prisma.IntFieldUpdateOperationsInput | number
  audioBitrate?: Prisma.StringFieldUpdateOperationsInput | string
  audioChannels?: Prisma.IntFieldUpdateOperationsInput | number
  enableHardwareAccel?: Prisma.BoolFieldUpdateOperationsInput | boolean
  hardwareAccelType?: Prisma.StringFieldUpdateOperationsInput | string
  hardwareDevice?: Prisma.StringFieldUpdateOperationsInput | string
  videoPreset?: Prisma.StringFieldUpdateOperationsInput | string
  videoCrf?: Prisma.IntFieldUpdateOperationsInput | number
  maxMuxingQueueSize?: Prisma.IntFieldUpdateOperationsInput | number
  threads?: Prisma.IntFieldUpdateOperationsInput | number
  outputFormat?: Prisma.StringFieldUpdateOperationsInput | string
  segmentTime?: Prisma.IntFieldUpdateOperationsInput | number
  segmentListSize?: Prisma.IntFieldUpdateOperationsInput | number
  errorScreen?: Prisma.StringFieldUpdateOperationsInput | string
  errorAudio?: Prisma.StringFieldUpdateOperationsInput | string
  logLevel?: Prisma.StringFieldUpdateOperationsInput | string
  enableStats?: Prisma.BoolFieldUpdateOperationsInput | boolean
  statsFilePath?: Prisma.StringFieldUpdateOperationsInput | string
  globalOptions?: Prisma.StringFieldUpdateOperationsInput | string
  inputOptions?: Prisma.StringFieldUpdateOperationsInput | string
  outputOptions?: Prisma.StringFieldUpdateOperationsInput | string
  settingsId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type FfmpegSettingsCreateManyInput = {
  id?: string
  ffmpegPath?: string
  ffprobePath?: string
  pathLocked?: boolean
  autoDetectPath?: boolean
  enableTranscoding?: boolean
  targetResolution?: string
  videoBitrate?: string
  videoBufSize?: string
  videoCodec?: string
  audioCodec?: string
  audioSampleRate?: number
  audioBitrate?: string
  audioChannels?: number
  enableHardwareAccel?: boolean
  hardwareAccelType?: string
  hardwareDevice?: string
  videoPreset?: string
  videoCrf?: number
  maxMuxingQueueSize?: number
  threads?: number
  outputFormat?: string
  segmentTime?: number
  segmentListSize?: number
  errorScreen?: string
  errorAudio?: string
  logLevel?: string
  enableStats?: boolean
  statsFilePath?: string
  globalOptions?: string
  inputOptions?: string
  outputOptions?: string
  settingsId?: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type FfmpegSettingsUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  ffmpegPath?: Prisma.StringFieldUpdateOperationsInput | string
  ffprobePath?: Prisma.StringFieldUpdateOperationsInput | string
  pathLocked?: Prisma.BoolFieldUpdateOperationsInput | boolean
  autoDetectPath?: Prisma.BoolFieldUpdateOperationsInput | boolean
  enableTranscoding?: Prisma.BoolFieldUpdateOperationsInput | boolean
  targetResolution?: Prisma.StringFieldUpdateOperationsInput | string
  videoBitrate?: Prisma.StringFieldUpdateOperationsInput | string
  videoBufSize?: Prisma.StringFieldUpdateOperationsInput | string
  videoCodec?: Prisma.StringFieldUpdateOperationsInput | string
  audioCodec?: Prisma.StringFieldUpdateOperationsInput | string
  audioSampleRate?: Prisma.IntFieldUpdateOperationsInput | number
  audioBitrate?: Prisma.StringFieldUpdateOperationsInput | string
  audioChannels?: Prisma.IntFieldUpdateOperationsInput | number
  enableHardwareAccel?: Prisma.BoolFieldUpdateOperationsInput | boolean
  hardwareAccelType?: Prisma.StringFieldUpdateOperationsInput | string
  hardwareDevice?: Prisma.StringFieldUpdateOperationsInput | string
  videoPreset?: Prisma.StringFieldUpdateOperationsInput | string
  videoCrf?: Prisma.IntFieldUpdateOperationsInput | number
  maxMuxingQueueSize?: Prisma.IntFieldUpdateOperationsInput | number
  threads?: Prisma.IntFieldUpdateOperationsInput | number
  outputFormat?: Prisma.StringFieldUpdateOperationsInput | string
  segmentTime?: Prisma.IntFieldUpdateOperationsInput | number
  segmentListSize?: Prisma.IntFieldUpdateOperationsInput | number
  errorScreen?: Prisma.StringFieldUpdateOperationsInput | string
  errorAudio?: Prisma.StringFieldUpdateOperationsInput | string
  logLevel?: Prisma.StringFieldUpdateOperationsInput | string
  enableStats?: Prisma.BoolFieldUpdateOperationsInput | boolean
  statsFilePath?: Prisma.StringFieldUpdateOperationsInput | string
  globalOptions?: Prisma.StringFieldUpdateOperationsInput | string
  inputOptions?: Prisma.StringFieldUpdateOperationsInput | string
  outputOptions?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type FfmpegSettingsUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  ffmpegPath?: Prisma.StringFieldUpdateOperationsInput | string
  ffprobePath?: Prisma.StringFieldUpdateOperationsInput | string
  pathLocked?: Prisma.BoolFieldUpdateOperationsInput | boolean
  autoDetectPath?: Prisma.BoolFieldUpdateOperationsInput | boolean
  enableTranscoding?: Prisma.BoolFieldUpdateOperationsInput | boolean
  targetResolution?: Prisma.StringFieldUpdateOperationsInput | string
  videoBitrate?: Prisma.StringFieldUpdateOperationsInput | string
  videoBufSize?: Prisma.StringFieldUpdateOperationsInput | string
  videoCodec?: Prisma.StringFieldUpdateOperationsInput | string
  audioCodec?: Prisma.StringFieldUpdateOperationsInput | string
  audioSampleRate?: Prisma.IntFieldUpdateOperationsInput | number
  audioBitrate?: Prisma.StringFieldUpdateOperationsInput | string
  audioChannels?: Prisma.IntFieldUpdateOperationsInput | number
  enableHardwareAccel?: Prisma.BoolFieldUpdateOperationsInput | boolean
  hardwareAccelType?: Prisma.StringFieldUpdateOperationsInput | string
  hardwareDevice?: Prisma.StringFieldUpdateOperationsInput | string
  videoPreset?: Prisma.StringFieldUpdateOperationsInput | string
  videoCrf?: Prisma.IntFieldUpdateOperationsInput | number
  maxMuxingQueueSize?: Prisma.IntFieldUpdateOperationsInput | number
  threads?: Prisma.IntFieldUpdateOperationsInput | number
  outputFormat?: Prisma.StringFieldUpdateOperationsInput | string
  segmentTime?: Prisma.IntFieldUpdateOperationsInput | number
  segmentListSize?: Prisma.IntFieldUpdateOperationsInput | number
  errorScreen?: Prisma.StringFieldUpdateOperationsInput | string
  errorAudio?: Prisma.StringFieldUpdateOperationsInput | string
  logLevel?: Prisma.StringFieldUpdateOperationsInput | string
  enableStats?: Prisma.BoolFieldUpdateOperationsInput | boolean
  statsFilePath?: Prisma.StringFieldUpdateOperationsInput | string
  globalOptions?: Prisma.StringFieldUpdateOperationsInput | string
  inputOptions?: Prisma.StringFieldUpdateOperationsInput | string
  outputOptions?: Prisma.StringFieldUpdateOperationsInput | string
  settingsId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type FfmpegSettingsNullableScalarRelationFilter = {
  is?: Prisma.FfmpegSettingsWhereInput | null
  isNot?: Prisma.FfmpegSettingsWhereInput | null
}

export type FfmpegSettingsCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  ffmpegPath?: Prisma.SortOrder
  ffprobePath?: Prisma.SortOrder
  pathLocked?: Prisma.SortOrder
  autoDetectPath?: Prisma.SortOrder
  enableTranscoding?: Prisma.SortOrder
  targetResolution?: Prisma.SortOrder
  videoBitrate?: Prisma.SortOrder
  videoBufSize?: Prisma.SortOrder
  videoCodec?: Prisma.SortOrder
  audioCodec?: Prisma.SortOrder
  audioSampleRate?: Prisma.SortOrder
  audioBitrate?: Prisma.SortOrder
  audioChannels?: Prisma.SortOrder
  enableHardwareAccel?: Prisma.SortOrder
  hardwareAccelType?: Prisma.SortOrder
  hardwareDevice?: Prisma.SortOrder
  videoPreset?: Prisma.SortOrder
  videoCrf?: Prisma.SortOrder
  maxMuxingQueueSize?: Prisma.SortOrder
  threads?: Prisma.SortOrder
  outputFormat?: Prisma.SortOrder
  segmentTime?: Prisma.SortOrder
  segmentListSize?: Prisma.SortOrder
  errorScreen?: Prisma.SortOrder
  errorAudio?: Prisma.SortOrder
  logLevel?: Prisma.SortOrder
  enableStats?: Prisma.SortOrder
  statsFilePath?: Prisma.SortOrder
  globalOptions?: Prisma.SortOrder
  inputOptions?: Prisma.SortOrder
  outputOptions?: Prisma.SortOrder
  settingsId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type FfmpegSettingsAvgOrderByAggregateInput = {
  audioSampleRate?: Prisma.SortOrder
  audioChannels?: Prisma.SortOrder
  videoCrf?: Prisma.SortOrder
  maxMuxingQueueSize?: Prisma.SortOrder
  threads?: Prisma.SortOrder
  segmentTime?: Prisma.SortOrder
  segmentListSize?: Prisma.SortOrder
}

export type FfmpegSettingsMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  ffmpegPath?: Prisma.SortOrder
  ffprobePath?: Prisma.SortOrder
  pathLocked?: Prisma.SortOrder
  autoDetectPath?: Prisma.SortOrder
  enableTranscoding?: Prisma.SortOrder
  targetResolution?: Prisma.SortOrder
  videoBitrate?: Prisma.SortOrder
  videoBufSize?: Prisma.SortOrder
  videoCodec?: Prisma.SortOrder
  audioCodec?: Prisma.SortOrder
  audioSampleRate?: Prisma.SortOrder
  audioBitrate?: Prisma.SortOrder
  audioChannels?: Prisma.SortOrder
  enableHardwareAccel?: Prisma.SortOrder
  hardwareAccelType?: Prisma.SortOrder
  hardwareDevice?: Prisma.SortOrder
  videoPreset?: Prisma.SortOrder
  videoCrf?: Prisma.SortOrder
  maxMuxingQueueSize?: Prisma.SortOrder
  threads?: Prisma.SortOrder
  outputFormat?: Prisma.SortOrder
  segmentTime?: Prisma.SortOrder
  segmentListSize?: Prisma.SortOrder
  errorScreen?: Prisma.SortOrder
  errorAudio?: Prisma.SortOrder
  logLevel?: Prisma.SortOrder
  enableStats?: Prisma.SortOrder
  statsFilePath?: Prisma.SortOrder
  globalOptions?: Prisma.SortOrder
  inputOptions?: Prisma.SortOrder
  outputOptions?: Prisma.SortOrder
  settingsId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type FfmpegSettingsMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  ffmpegPath?: Prisma.SortOrder
  ffprobePath?: Prisma.SortOrder
  pathLocked?: Prisma.SortOrder
  autoDetectPath?: Prisma.SortOrder
  enableTranscoding?: Prisma.SortOrder
  targetResolution?: Prisma.SortOrder
  videoBitrate?: Prisma.SortOrder
  videoBufSize?: Prisma.SortOrder
  videoCodec?: Prisma.SortOrder
  audioCodec?: Prisma.SortOrder
  audioSampleRate?: Prisma.SortOrder
  audioBitrate?: Prisma.SortOrder
  audioChannels?: Prisma.SortOrder
  enableHardwareAccel?: Prisma.SortOrder
  hardwareAccelType?: Prisma.SortOrder
  hardwareDevice?: Prisma.SortOrder
  videoPreset?: Prisma.SortOrder
  videoCrf?: Prisma.SortOrder
  maxMuxingQueueSize?: Prisma.SortOrder
  threads?: Prisma.SortOrder
  outputFormat?: Prisma.SortOrder
  segmentTime?: Prisma.SortOrder
  segmentListSize?: Prisma.SortOrder
  errorScreen?: Prisma.SortOrder
  errorAudio?: Prisma.SortOrder
  logLevel?: Prisma.SortOrder
  enableStats?: Prisma.SortOrder
  statsFilePath?: Prisma.SortOrder
  globalOptions?: Prisma.SortOrder
  inputOptions?: Prisma.SortOrder
  outputOptions?: Prisma.SortOrder
  settingsId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type FfmpegSettingsSumOrderByAggregateInput = {
  audioSampleRate?: Prisma.SortOrder
  audioChannels?: Prisma.SortOrder
  videoCrf?: Prisma.SortOrder
  maxMuxingQueueSize?: Prisma.SortOrder
  threads?: Prisma.SortOrder
  segmentTime?: Prisma.SortOrder
  segmentListSize?: Prisma.SortOrder
}

export type FfmpegSettingsCreateNestedOneWithoutSettingsInput = {
  create?: Prisma.XOR<Prisma.FfmpegSettingsCreateWithoutSettingsInput, Prisma.FfmpegSettingsUncheckedCreateWithoutSettingsInput>
  connectOrCreate?: Prisma.FfmpegSettingsCreateOrConnectWithoutSettingsInput
  connect?: Prisma.FfmpegSettingsWhereUniqueInput
}

export type FfmpegSettingsUncheckedCreateNestedOneWithoutSettingsInput = {
  create?: Prisma.XOR<Prisma.FfmpegSettingsCreateWithoutSettingsInput, Prisma.FfmpegSettingsUncheckedCreateWithoutSettingsInput>
  connectOrCreate?: Prisma.FfmpegSettingsCreateOrConnectWithoutSettingsInput
  connect?: Prisma.FfmpegSettingsWhereUniqueInput
}

export type FfmpegSettingsUpdateOneWithoutSettingsNestedInput = {
  create?: Prisma.XOR<Prisma.FfmpegSettingsCreateWithoutSettingsInput, Prisma.FfmpegSettingsUncheckedCreateWithoutSettingsInput>
  connectOrCreate?: Prisma.FfmpegSettingsCreateOrConnectWithoutSettingsInput
  upsert?: Prisma.FfmpegSettingsUpsertWithoutSettingsInput
  disconnect?: Prisma.FfmpegSettingsWhereInput | boolean
  delete?: Prisma.FfmpegSettingsWhereInput | boolean
  connect?: Prisma.FfmpegSettingsWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.FfmpegSettingsUpdateToOneWithWhereWithoutSettingsInput, Prisma.FfmpegSettingsUpdateWithoutSettingsInput>, Prisma.FfmpegSettingsUncheckedUpdateWithoutSettingsInput>
}

export type FfmpegSettingsUncheckedUpdateOneWithoutSettingsNestedInput = {
  create?: Prisma.XOR<Prisma.FfmpegSettingsCreateWithoutSettingsInput, Prisma.FfmpegSettingsUncheckedCreateWithoutSettingsInput>
  connectOrCreate?: Prisma.FfmpegSettingsCreateOrConnectWithoutSettingsInput
  upsert?: Prisma.FfmpegSettingsUpsertWithoutSettingsInput
  disconnect?: Prisma.FfmpegSettingsWhereInput | boolean
  delete?: Prisma.FfmpegSettingsWhereInput | boolean
  connect?: Prisma.FfmpegSettingsWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.FfmpegSettingsUpdateToOneWithWhereWithoutSettingsInput, Prisma.FfmpegSettingsUpdateWithoutSettingsInput>, Prisma.FfmpegSettingsUncheckedUpdateWithoutSettingsInput>
}

export type FfmpegSettingsCreateWithoutSettingsInput = {
  id?: string
  ffmpegPath?: string
  ffprobePath?: string
  pathLocked?: boolean
  autoDetectPath?: boolean
  enableTranscoding?: boolean
  targetResolution?: string
  videoBitrate?: string
  videoBufSize?: string
  videoCodec?: string
  audioCodec?: string
  audioSampleRate?: number
  audioBitrate?: string
  audioChannels?: number
  enableHardwareAccel?: boolean
  hardwareAccelType?: string
  hardwareDevice?: string
  videoPreset?: string
  videoCrf?: number
  maxMuxingQueueSize?: number
  threads?: number
  outputFormat?: string
  segmentTime?: number
  segmentListSize?: number
  errorScreen?: string
  errorAudio?: string
  logLevel?: string
  enableStats?: boolean
  statsFilePath?: string
  globalOptions?: string
  inputOptions?: string
  outputOptions?: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type FfmpegSettingsUncheckedCreateWithoutSettingsInput = {
  id?: string
  ffmpegPath?: string
  ffprobePath?: string
  pathLocked?: boolean
  autoDetectPath?: boolean
  enableTranscoding?: boolean
  targetResolution?: string
  videoBitrate?: string
  videoBufSize?: string
  videoCodec?: string
  audioCodec?: string
  audioSampleRate?: number
  audioBitrate?: string
  audioChannels?: number
  enableHardwareAccel?: boolean
  hardwareAccelType?: string
  hardwareDevice?: string
  videoPreset?: string
  videoCrf?: number
  maxMuxingQueueSize?: number
  threads?: number
  outputFormat?: string
  segmentTime?: number
  segmentListSize?: number
  errorScreen?: string
  errorAudio?: string
  logLevel?: string
  enableStats?: boolean
  statsFilePath?: string
  globalOptions?: string
  inputOptions?: string
  outputOptions?: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type FfmpegSettingsCreateOrConnectWithoutSettingsInput = {
  where: Prisma.FfmpegSettingsWhereUniqueInput
  create: Prisma.XOR<Prisma.FfmpegSettingsCreateWithoutSettingsInput, Prisma.FfmpegSettingsUncheckedCreateWithoutSettingsInput>
}

export type FfmpegSettingsUpsertWithoutSettingsInput = {
  update: Prisma.XOR<Prisma.FfmpegSettingsUpdateWithoutSettingsInput, Prisma.FfmpegSettingsUncheckedUpdateWithoutSettingsInput>
  create: Prisma.XOR<Prisma.FfmpegSettingsCreateWithoutSettingsInput, Prisma.FfmpegSettingsUncheckedCreateWithoutSettingsInput>
  where?: Prisma.FfmpegSettingsWhereInput
}

export type FfmpegSettingsUpdateToOneWithWhereWithoutSettingsInput = {
  where?: Prisma.FfmpegSettingsWhereInput
  data: Prisma.XOR<Prisma.FfmpegSettingsUpdateWithoutSettingsInput, Prisma.FfmpegSettingsUncheckedUpdateWithoutSettingsInput>
}

export type FfmpegSettingsUpdateWithoutSettingsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  ffmpegPath?: Prisma.StringFieldUpdateOperationsInput | string
  ffprobePath?: Prisma.StringFieldUpdateOperationsInput | string
  pathLocked?: Prisma.BoolFieldUpdateOperationsInput | boolean
  autoDetectPath?: Prisma.BoolFieldUpdateOperationsInput | boolean
  enableTranscoding?: Prisma.BoolFieldUpdateOperationsInput | boolean
  targetResolution?: Prisma.StringFieldUpdateOperationsInput | string
  videoBitrate?: Prisma.StringFieldUpdateOperationsInput | string
  videoBufSize?: Prisma.StringFieldUpdateOperationsInput | string
  videoCodec?: Prisma.StringFieldUpdateOperationsInput | string
  audioCodec?: Prisma.StringFieldUpdateOperationsInput | string
  audioSampleRate?: Prisma.IntFieldUpdateOperationsInput | number
  audioBitrate?: Prisma.StringFieldUpdateOperationsInput | string
  audioChannels?: Prisma.IntFieldUpdateOperationsInput | number
  enableHardwareAccel?: Prisma.BoolFieldUpdateOperationsInput | boolean
  hardwareAccelType?: Prisma.StringFieldUpdateOperationsInput | string
  hardwareDevice?: Prisma.StringFieldUpdateOperationsInput | string
  videoPreset?: Prisma.StringFieldUpdateOperationsInput | string
  videoCrf?: Prisma.IntFieldUpdateOperationsInput | number
  maxMuxingQueueSize?: Prisma.IntFieldUpdateOperationsInput | number
  threads?: Prisma.IntFieldUpdateOperationsInput | number
  outputFormat?: Prisma.StringFieldUpdateOperationsInput | string
  segmentTime?: Prisma.IntFieldUpdateOperationsInput | number
  segmentListSize?: Prisma.IntFieldUpdateOperationsInput | number
  errorScreen?: Prisma.StringFieldUpdateOperationsInput | string
  errorAudio?: Prisma.StringFieldUpdateOperationsInput | string
  logLevel?: Prisma.StringFieldUpdateOperationsInput | string
  enableStats?: Prisma.BoolFieldUpdateOperationsInput | boolean
  statsFilePath?: Prisma.StringFieldUpdateOperationsInput | string
  globalOptions?: Prisma.StringFieldUpdateOperationsInput | string
  inputOptions?: Prisma.StringFieldUpdateOperationsInput | string
  outputOptions?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type FfmpegSettingsUncheckedUpdateWithoutSettingsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  ffmpegPath?: Prisma.StringFieldUpdateOperationsInput | string
  ffprobePath?: Prisma.StringFieldUpdateOperationsInput | string
  pathLocked?: Prisma.BoolFieldUpdateOperationsInput | boolean
  autoDetectPath?: Prisma.BoolFieldUpdateOperationsInput | boolean
  enableTranscoding?: Prisma.BoolFieldUpdateOperationsInput | boolean
  targetResolution?: Prisma.StringFieldUpdateOperationsInput | string
  videoBitrate?: Prisma.StringFieldUpdateOperationsInput | string
  videoBufSize?: Prisma.StringFieldUpdateOperationsInput | string
  videoCodec?: Prisma.StringFieldUpdateOperationsInput | string
  audioCodec?: Prisma.StringFieldUpdateOperationsInput | string
  audioSampleRate?: Prisma.IntFieldUpdateOperationsInput | number
  audioBitrate?: Prisma.StringFieldUpdateOperationsInput | string
  audioChannels?: Prisma.IntFieldUpdateOperationsInput | number
  enableHardwareAccel?: Prisma.BoolFieldUpdateOperationsInput | boolean
  hardwareAccelType?: Prisma.StringFieldUpdateOperationsInput | string
  hardwareDevice?: Prisma.StringFieldUpdateOperationsInput | string
  videoPreset?: Prisma.StringFieldUpdateOperationsInput | string
  videoCrf?: Prisma.IntFieldUpdateOperationsInput | number
  maxMuxingQueueSize?: Prisma.IntFieldUpdateOperationsInput | number
  threads?: Prisma.IntFieldUpdateOperationsInput | number
  outputFormat?: Prisma.StringFieldUpdateOperationsInput | string
  segmentTime?: Prisma.IntFieldUpdateOperationsInput | number
  segmentListSize?: Prisma.IntFieldUpdateOperationsInput | number
  errorScreen?: Prisma.StringFieldUpdateOperationsInput | string
  errorAudio?: Prisma.StringFieldUpdateOperationsInput | string
  logLevel?: Prisma.StringFieldUpdateOperationsInput | string
  enableStats?: Prisma.BoolFieldUpdateOperationsInput | boolean
  statsFilePath?: Prisma.StringFieldUpdateOperationsInput | string
  globalOptions?: Prisma.StringFieldUpdateOperationsInput | string
  inputOptions?: Prisma.StringFieldUpdateOperationsInput | string
  outputOptions?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type FfmpegSettingsSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  ffmpegPath?: boolean
  ffprobePath?: boolean
  pathLocked?: boolean
  autoDetectPath?: boolean
  enableTranscoding?: boolean
  targetResolution?: boolean
  videoBitrate?: boolean
  videoBufSize?: boolean
  videoCodec?: boolean
  audioCodec?: boolean
  audioSampleRate?: boolean
  audioBitrate?: boolean
  audioChannels?: boolean
  enableHardwareAccel?: boolean
  hardwareAccelType?: boolean
  hardwareDevice?: boolean
  videoPreset?: boolean
  videoCrf?: boolean
  maxMuxingQueueSize?: boolean
  threads?: boolean
  outputFormat?: boolean
  segmentTime?: boolean
  segmentListSize?: boolean
  errorScreen?: boolean
  errorAudio?: boolean
  logLevel?: boolean
  enableStats?: boolean
  statsFilePath?: boolean
  globalOptions?: boolean
  inputOptions?: boolean
  outputOptions?: boolean
  settingsId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  settings?: boolean | Prisma.SettingsDefaultArgs<ExtArgs>
}, ExtArgs["result"]["ffmpegSettings"]>

export type FfmpegSettingsSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  ffmpegPath?: boolean
  ffprobePath?: boolean
  pathLocked?: boolean
  autoDetectPath?: boolean
  enableTranscoding?: boolean
  targetResolution?: boolean
  videoBitrate?: boolean
  videoBufSize?: boolean
  videoCodec?: boolean
  audioCodec?: boolean
  audioSampleRate?: boolean
  audioBitrate?: boolean
  audioChannels?: boolean
  enableHardwareAccel?: boolean
  hardwareAccelType?: boolean
  hardwareDevice?: boolean
  videoPreset?: boolean
  videoCrf?: boolean
  maxMuxingQueueSize?: boolean
  threads?: boolean
  outputFormat?: boolean
  segmentTime?: boolean
  segmentListSize?: boolean
  errorScreen?: boolean
  errorAudio?: boolean
  logLevel?: boolean
  enableStats?: boolean
  statsFilePath?: boolean
  globalOptions?: boolean
  inputOptions?: boolean
  outputOptions?: boolean
  settingsId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  settings?: boolean | Prisma.SettingsDefaultArgs<ExtArgs>
}, ExtArgs["result"]["ffmpegSettings"]>

export type FfmpegSettingsSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  ffmpegPath?: boolean
  ffprobePath?: boolean
  pathLocked?: boolean
  autoDetectPath?: boolean
  enableTranscoding?: boolean
  targetResolution?: boolean
  videoBitrate?: boolean
  videoBufSize?: boolean
  videoCodec?: boolean
  audioCodec?: boolean
  audioSampleRate?: boolean
  audioBitrate?: boolean
  audioChannels?: boolean
  enableHardwareAccel?: boolean
  hardwareAccelType?: boolean
  hardwareDevice?: boolean
  videoPreset?: boolean
  videoCrf?: boolean
  maxMuxingQueueSize?: boolean
  threads?: boolean
  outputFormat?: boolean
  segmentTime?: boolean
  segmentListSize?: boolean
  errorScreen?: boolean
  errorAudio?: boolean
  logLevel?: boolean
  enableStats?: boolean
  statsFilePath?: boolean
  globalOptions?: boolean
  inputOptions?: boolean
  outputOptions?: boolean
  settingsId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  settings?: boolean | Prisma.SettingsDefaultArgs<ExtArgs>
}, ExtArgs["result"]["ffmpegSettings"]>

export type FfmpegSettingsSelectScalar = {
  id?: boolean
  ffmpegPath?: boolean
  ffprobePath?: boolean
  pathLocked?: boolean
  autoDetectPath?: boolean
  enableTranscoding?: boolean
  targetResolution?: boolean
  videoBitrate?: boolean
  videoBufSize?: boolean
  videoCodec?: boolean
  audioCodec?: boolean
  audioSampleRate?: boolean
  audioBitrate?: boolean
  audioChannels?: boolean
  enableHardwareAccel?: boolean
  hardwareAccelType?: boolean
  hardwareDevice?: boolean
  videoPreset?: boolean
  videoCrf?: boolean
  maxMuxingQueueSize?: boolean
  threads?: boolean
  outputFormat?: boolean
  segmentTime?: boolean
  segmentListSize?: boolean
  errorScreen?: boolean
  errorAudio?: boolean
  logLevel?: boolean
  enableStats?: boolean
  statsFilePath?: boolean
  globalOptions?: boolean
  inputOptions?: boolean
  outputOptions?: boolean
  settingsId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type FfmpegSettingsOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "ffmpegPath" | "ffprobePath" | "pathLocked" | "autoDetectPath" | "enableTranscoding" | "targetResolution" | "videoBitrate" | "videoBufSize" | "videoCodec" | "audioCodec" | "audioSampleRate" | "audioBitrate" | "audioChannels" | "enableHardwareAccel" | "hardwareAccelType" | "hardwareDevice" | "videoPreset" | "videoCrf" | "maxMuxingQueueSize" | "threads" | "outputFormat" | "segmentTime" | "segmentListSize" | "errorScreen" | "errorAudio" | "logLevel" | "enableStats" | "statsFilePath" | "globalOptions" | "inputOptions" | "outputOptions" | "settingsId" | "createdAt" | "updatedAt", ExtArgs["result"]["ffmpegSettings"]>
export type FfmpegSettingsInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  settings?: boolean | Prisma.SettingsDefaultArgs<ExtArgs>
}
export type FfmpegSettingsIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  settings?: boolean | Prisma.SettingsDefaultArgs<ExtArgs>
}
export type FfmpegSettingsIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  settings?: boolean | Prisma.SettingsDefaultArgs<ExtArgs>
}

export type $FfmpegSettingsPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "FfmpegSettings"
  objects: {
    settings: Prisma.$SettingsPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    ffmpegPath: string
    ffprobePath: string
    pathLocked: boolean
    autoDetectPath: boolean
    enableTranscoding: boolean
    targetResolution: string
    videoBitrate: string
    videoBufSize: string
    videoCodec: string
    audioCodec: string
    audioSampleRate: number
    audioBitrate: string
    audioChannels: number
    enableHardwareAccel: boolean
    hardwareAccelType: string
    hardwareDevice: string
    videoPreset: string
    videoCrf: number
    maxMuxingQueueSize: number
    threads: number
    outputFormat: string
    segmentTime: number
    segmentListSize: number
    errorScreen: string
    errorAudio: string
    logLevel: string
    enableStats: boolean
    statsFilePath: string
    globalOptions: string
    inputOptions: string
    outputOptions: string
    settingsId: string
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["ffmpegSettings"]>
  composites: {}
}

export type FfmpegSettingsGetPayload<S extends boolean | null | undefined | FfmpegSettingsDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$FfmpegSettingsPayload, S>

export type FfmpegSettingsCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<FfmpegSettingsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: FfmpegSettingsCountAggregateInputType | true
  }

export interface FfmpegSettingsDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FfmpegSettings'], meta: { name: 'FfmpegSettings' } }
  /**
   * Find zero or one FfmpegSettings that matches the filter.
   * @param {FfmpegSettingsFindUniqueArgs} args - Arguments to find a FfmpegSettings
   * @example
   * // Get one FfmpegSettings
   * const ffmpegSettings = await prisma.ffmpegSettings.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends FfmpegSettingsFindUniqueArgs>(args: Prisma.SelectSubset<T, FfmpegSettingsFindUniqueArgs<ExtArgs>>): Prisma.Prisma__FfmpegSettingsClient<runtime.Types.Result.GetResult<Prisma.$FfmpegSettingsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one FfmpegSettings that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {FfmpegSettingsFindUniqueOrThrowArgs} args - Arguments to find a FfmpegSettings
   * @example
   * // Get one FfmpegSettings
   * const ffmpegSettings = await prisma.ffmpegSettings.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends FfmpegSettingsFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, FfmpegSettingsFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__FfmpegSettingsClient<runtime.Types.Result.GetResult<Prisma.$FfmpegSettingsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first FfmpegSettings that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FfmpegSettingsFindFirstArgs} args - Arguments to find a FfmpegSettings
   * @example
   * // Get one FfmpegSettings
   * const ffmpegSettings = await prisma.ffmpegSettings.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends FfmpegSettingsFindFirstArgs>(args?: Prisma.SelectSubset<T, FfmpegSettingsFindFirstArgs<ExtArgs>>): Prisma.Prisma__FfmpegSettingsClient<runtime.Types.Result.GetResult<Prisma.$FfmpegSettingsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first FfmpegSettings that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FfmpegSettingsFindFirstOrThrowArgs} args - Arguments to find a FfmpegSettings
   * @example
   * // Get one FfmpegSettings
   * const ffmpegSettings = await prisma.ffmpegSettings.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends FfmpegSettingsFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, FfmpegSettingsFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__FfmpegSettingsClient<runtime.Types.Result.GetResult<Prisma.$FfmpegSettingsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more FfmpegSettings that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FfmpegSettingsFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all FfmpegSettings
   * const ffmpegSettings = await prisma.ffmpegSettings.findMany()
   * 
   * // Get first 10 FfmpegSettings
   * const ffmpegSettings = await prisma.ffmpegSettings.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const ffmpegSettingsWithIdOnly = await prisma.ffmpegSettings.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends FfmpegSettingsFindManyArgs>(args?: Prisma.SelectSubset<T, FfmpegSettingsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$FfmpegSettingsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a FfmpegSettings.
   * @param {FfmpegSettingsCreateArgs} args - Arguments to create a FfmpegSettings.
   * @example
   * // Create one FfmpegSettings
   * const FfmpegSettings = await prisma.ffmpegSettings.create({
   *   data: {
   *     // ... data to create a FfmpegSettings
   *   }
   * })
   * 
   */
  create<T extends FfmpegSettingsCreateArgs>(args: Prisma.SelectSubset<T, FfmpegSettingsCreateArgs<ExtArgs>>): Prisma.Prisma__FfmpegSettingsClient<runtime.Types.Result.GetResult<Prisma.$FfmpegSettingsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many FfmpegSettings.
   * @param {FfmpegSettingsCreateManyArgs} args - Arguments to create many FfmpegSettings.
   * @example
   * // Create many FfmpegSettings
   * const ffmpegSettings = await prisma.ffmpegSettings.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends FfmpegSettingsCreateManyArgs>(args?: Prisma.SelectSubset<T, FfmpegSettingsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many FfmpegSettings and returns the data saved in the database.
   * @param {FfmpegSettingsCreateManyAndReturnArgs} args - Arguments to create many FfmpegSettings.
   * @example
   * // Create many FfmpegSettings
   * const ffmpegSettings = await prisma.ffmpegSettings.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many FfmpegSettings and only return the `id`
   * const ffmpegSettingsWithIdOnly = await prisma.ffmpegSettings.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends FfmpegSettingsCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, FfmpegSettingsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$FfmpegSettingsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a FfmpegSettings.
   * @param {FfmpegSettingsDeleteArgs} args - Arguments to delete one FfmpegSettings.
   * @example
   * // Delete one FfmpegSettings
   * const FfmpegSettings = await prisma.ffmpegSettings.delete({
   *   where: {
   *     // ... filter to delete one FfmpegSettings
   *   }
   * })
   * 
   */
  delete<T extends FfmpegSettingsDeleteArgs>(args: Prisma.SelectSubset<T, FfmpegSettingsDeleteArgs<ExtArgs>>): Prisma.Prisma__FfmpegSettingsClient<runtime.Types.Result.GetResult<Prisma.$FfmpegSettingsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one FfmpegSettings.
   * @param {FfmpegSettingsUpdateArgs} args - Arguments to update one FfmpegSettings.
   * @example
   * // Update one FfmpegSettings
   * const ffmpegSettings = await prisma.ffmpegSettings.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends FfmpegSettingsUpdateArgs>(args: Prisma.SelectSubset<T, FfmpegSettingsUpdateArgs<ExtArgs>>): Prisma.Prisma__FfmpegSettingsClient<runtime.Types.Result.GetResult<Prisma.$FfmpegSettingsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more FfmpegSettings.
   * @param {FfmpegSettingsDeleteManyArgs} args - Arguments to filter FfmpegSettings to delete.
   * @example
   * // Delete a few FfmpegSettings
   * const { count } = await prisma.ffmpegSettings.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends FfmpegSettingsDeleteManyArgs>(args?: Prisma.SelectSubset<T, FfmpegSettingsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more FfmpegSettings.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FfmpegSettingsUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many FfmpegSettings
   * const ffmpegSettings = await prisma.ffmpegSettings.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends FfmpegSettingsUpdateManyArgs>(args: Prisma.SelectSubset<T, FfmpegSettingsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more FfmpegSettings and returns the data updated in the database.
   * @param {FfmpegSettingsUpdateManyAndReturnArgs} args - Arguments to update many FfmpegSettings.
   * @example
   * // Update many FfmpegSettings
   * const ffmpegSettings = await prisma.ffmpegSettings.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more FfmpegSettings and only return the `id`
   * const ffmpegSettingsWithIdOnly = await prisma.ffmpegSettings.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends FfmpegSettingsUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, FfmpegSettingsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$FfmpegSettingsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one FfmpegSettings.
   * @param {FfmpegSettingsUpsertArgs} args - Arguments to update or create a FfmpegSettings.
   * @example
   * // Update or create a FfmpegSettings
   * const ffmpegSettings = await prisma.ffmpegSettings.upsert({
   *   create: {
   *     // ... data to create a FfmpegSettings
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the FfmpegSettings we want to update
   *   }
   * })
   */
  upsert<T extends FfmpegSettingsUpsertArgs>(args: Prisma.SelectSubset<T, FfmpegSettingsUpsertArgs<ExtArgs>>): Prisma.Prisma__FfmpegSettingsClient<runtime.Types.Result.GetResult<Prisma.$FfmpegSettingsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of FfmpegSettings.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FfmpegSettingsCountArgs} args - Arguments to filter FfmpegSettings to count.
   * @example
   * // Count the number of FfmpegSettings
   * const count = await prisma.ffmpegSettings.count({
   *   where: {
   *     // ... the filter for the FfmpegSettings we want to count
   *   }
   * })
  **/
  count<T extends FfmpegSettingsCountArgs>(
    args?: Prisma.Subset<T, FfmpegSettingsCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], FfmpegSettingsCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a FfmpegSettings.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FfmpegSettingsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends FfmpegSettingsAggregateArgs>(args: Prisma.Subset<T, FfmpegSettingsAggregateArgs>): Prisma.PrismaPromise<GetFfmpegSettingsAggregateType<T>>

  /**
   * Group by FfmpegSettings.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FfmpegSettingsGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends FfmpegSettingsGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: FfmpegSettingsGroupByArgs['orderBy'] }
      : { orderBy?: FfmpegSettingsGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, FfmpegSettingsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFfmpegSettingsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the FfmpegSettings model
 */
readonly fields: FfmpegSettingsFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for FfmpegSettings.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__FfmpegSettingsClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  settings<T extends Prisma.SettingsDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.SettingsDefaultArgs<ExtArgs>>): Prisma.Prisma__SettingsClient<runtime.Types.Result.GetResult<Prisma.$SettingsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the FfmpegSettings model
 */
export interface FfmpegSettingsFieldRefs {
  readonly id: Prisma.FieldRef<"FfmpegSettings", 'String'>
  readonly ffmpegPath: Prisma.FieldRef<"FfmpegSettings", 'String'>
  readonly ffprobePath: Prisma.FieldRef<"FfmpegSettings", 'String'>
  readonly pathLocked: Prisma.FieldRef<"FfmpegSettings", 'Boolean'>
  readonly autoDetectPath: Prisma.FieldRef<"FfmpegSettings", 'Boolean'>
  readonly enableTranscoding: Prisma.FieldRef<"FfmpegSettings", 'Boolean'>
  readonly targetResolution: Prisma.FieldRef<"FfmpegSettings", 'String'>
  readonly videoBitrate: Prisma.FieldRef<"FfmpegSettings", 'String'>
  readonly videoBufSize: Prisma.FieldRef<"FfmpegSettings", 'String'>
  readonly videoCodec: Prisma.FieldRef<"FfmpegSettings", 'String'>
  readonly audioCodec: Prisma.FieldRef<"FfmpegSettings", 'String'>
  readonly audioSampleRate: Prisma.FieldRef<"FfmpegSettings", 'Int'>
  readonly audioBitrate: Prisma.FieldRef<"FfmpegSettings", 'String'>
  readonly audioChannels: Prisma.FieldRef<"FfmpegSettings", 'Int'>
  readonly enableHardwareAccel: Prisma.FieldRef<"FfmpegSettings", 'Boolean'>
  readonly hardwareAccelType: Prisma.FieldRef<"FfmpegSettings", 'String'>
  readonly hardwareDevice: Prisma.FieldRef<"FfmpegSettings", 'String'>
  readonly videoPreset: Prisma.FieldRef<"FfmpegSettings", 'String'>
  readonly videoCrf: Prisma.FieldRef<"FfmpegSettings", 'Int'>
  readonly maxMuxingQueueSize: Prisma.FieldRef<"FfmpegSettings", 'Int'>
  readonly threads: Prisma.FieldRef<"FfmpegSettings", 'Int'>
  readonly outputFormat: Prisma.FieldRef<"FfmpegSettings", 'String'>
  readonly segmentTime: Prisma.FieldRef<"FfmpegSettings", 'Int'>
  readonly segmentListSize: Prisma.FieldRef<"FfmpegSettings", 'Int'>
  readonly errorScreen: Prisma.FieldRef<"FfmpegSettings", 'String'>
  readonly errorAudio: Prisma.FieldRef<"FfmpegSettings", 'String'>
  readonly logLevel: Prisma.FieldRef<"FfmpegSettings", 'String'>
  readonly enableStats: Prisma.FieldRef<"FfmpegSettings", 'Boolean'>
  readonly statsFilePath: Prisma.FieldRef<"FfmpegSettings", 'String'>
  readonly globalOptions: Prisma.FieldRef<"FfmpegSettings", 'String'>
  readonly inputOptions: Prisma.FieldRef<"FfmpegSettings", 'String'>
  readonly outputOptions: Prisma.FieldRef<"FfmpegSettings", 'String'>
  readonly settingsId: Prisma.FieldRef<"FfmpegSettings", 'String'>
  readonly createdAt: Prisma.FieldRef<"FfmpegSettings", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"FfmpegSettings", 'DateTime'>
}
    

// Custom InputTypes
/**
 * FfmpegSettings findUnique
 */
export type FfmpegSettingsFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FfmpegSettings
   */
  select?: Prisma.FfmpegSettingsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FfmpegSettings
   */
  omit?: Prisma.FfmpegSettingsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FfmpegSettingsInclude<ExtArgs> | null
  /**
   * Filter, which FfmpegSettings to fetch.
   */
  where: Prisma.FfmpegSettingsWhereUniqueInput
}

/**
 * FfmpegSettings findUniqueOrThrow
 */
export type FfmpegSettingsFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FfmpegSettings
   */
  select?: Prisma.FfmpegSettingsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FfmpegSettings
   */
  omit?: Prisma.FfmpegSettingsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FfmpegSettingsInclude<ExtArgs> | null
  /**
   * Filter, which FfmpegSettings to fetch.
   */
  where: Prisma.FfmpegSettingsWhereUniqueInput
}

/**
 * FfmpegSettings findFirst
 */
export type FfmpegSettingsFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FfmpegSettings
   */
  select?: Prisma.FfmpegSettingsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FfmpegSettings
   */
  omit?: Prisma.FfmpegSettingsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FfmpegSettingsInclude<ExtArgs> | null
  /**
   * Filter, which FfmpegSettings to fetch.
   */
  where?: Prisma.FfmpegSettingsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of FfmpegSettings to fetch.
   */
  orderBy?: Prisma.FfmpegSettingsOrderByWithRelationInput | Prisma.FfmpegSettingsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for FfmpegSettings.
   */
  cursor?: Prisma.FfmpegSettingsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` FfmpegSettings from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` FfmpegSettings.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of FfmpegSettings.
   */
  distinct?: Prisma.FfmpegSettingsScalarFieldEnum | Prisma.FfmpegSettingsScalarFieldEnum[]
}

/**
 * FfmpegSettings findFirstOrThrow
 */
export type FfmpegSettingsFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FfmpegSettings
   */
  select?: Prisma.FfmpegSettingsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FfmpegSettings
   */
  omit?: Prisma.FfmpegSettingsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FfmpegSettingsInclude<ExtArgs> | null
  /**
   * Filter, which FfmpegSettings to fetch.
   */
  where?: Prisma.FfmpegSettingsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of FfmpegSettings to fetch.
   */
  orderBy?: Prisma.FfmpegSettingsOrderByWithRelationInput | Prisma.FfmpegSettingsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for FfmpegSettings.
   */
  cursor?: Prisma.FfmpegSettingsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` FfmpegSettings from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` FfmpegSettings.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of FfmpegSettings.
   */
  distinct?: Prisma.FfmpegSettingsScalarFieldEnum | Prisma.FfmpegSettingsScalarFieldEnum[]
}

/**
 * FfmpegSettings findMany
 */
export type FfmpegSettingsFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FfmpegSettings
   */
  select?: Prisma.FfmpegSettingsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FfmpegSettings
   */
  omit?: Prisma.FfmpegSettingsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FfmpegSettingsInclude<ExtArgs> | null
  /**
   * Filter, which FfmpegSettings to fetch.
   */
  where?: Prisma.FfmpegSettingsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of FfmpegSettings to fetch.
   */
  orderBy?: Prisma.FfmpegSettingsOrderByWithRelationInput | Prisma.FfmpegSettingsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing FfmpegSettings.
   */
  cursor?: Prisma.FfmpegSettingsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` FfmpegSettings from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` FfmpegSettings.
   */
  skip?: number
  distinct?: Prisma.FfmpegSettingsScalarFieldEnum | Prisma.FfmpegSettingsScalarFieldEnum[]
}

/**
 * FfmpegSettings create
 */
export type FfmpegSettingsCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FfmpegSettings
   */
  select?: Prisma.FfmpegSettingsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FfmpegSettings
   */
  omit?: Prisma.FfmpegSettingsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FfmpegSettingsInclude<ExtArgs> | null
  /**
   * The data needed to create a FfmpegSettings.
   */
  data: Prisma.XOR<Prisma.FfmpegSettingsCreateInput, Prisma.FfmpegSettingsUncheckedCreateInput>
}

/**
 * FfmpegSettings createMany
 */
export type FfmpegSettingsCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many FfmpegSettings.
   */
  data: Prisma.FfmpegSettingsCreateManyInput | Prisma.FfmpegSettingsCreateManyInput[]
}

/**
 * FfmpegSettings createManyAndReturn
 */
export type FfmpegSettingsCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FfmpegSettings
   */
  select?: Prisma.FfmpegSettingsSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the FfmpegSettings
   */
  omit?: Prisma.FfmpegSettingsOmit<ExtArgs> | null
  /**
   * The data used to create many FfmpegSettings.
   */
  data: Prisma.FfmpegSettingsCreateManyInput | Prisma.FfmpegSettingsCreateManyInput[]
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FfmpegSettingsIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * FfmpegSettings update
 */
export type FfmpegSettingsUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FfmpegSettings
   */
  select?: Prisma.FfmpegSettingsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FfmpegSettings
   */
  omit?: Prisma.FfmpegSettingsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FfmpegSettingsInclude<ExtArgs> | null
  /**
   * The data needed to update a FfmpegSettings.
   */
  data: Prisma.XOR<Prisma.FfmpegSettingsUpdateInput, Prisma.FfmpegSettingsUncheckedUpdateInput>
  /**
   * Choose, which FfmpegSettings to update.
   */
  where: Prisma.FfmpegSettingsWhereUniqueInput
}

/**
 * FfmpegSettings updateMany
 */
export type FfmpegSettingsUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update FfmpegSettings.
   */
  data: Prisma.XOR<Prisma.FfmpegSettingsUpdateManyMutationInput, Prisma.FfmpegSettingsUncheckedUpdateManyInput>
  /**
   * Filter which FfmpegSettings to update
   */
  where?: Prisma.FfmpegSettingsWhereInput
  /**
   * Limit how many FfmpegSettings to update.
   */
  limit?: number
}

/**
 * FfmpegSettings updateManyAndReturn
 */
export type FfmpegSettingsUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FfmpegSettings
   */
  select?: Prisma.FfmpegSettingsSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the FfmpegSettings
   */
  omit?: Prisma.FfmpegSettingsOmit<ExtArgs> | null
  /**
   * The data used to update FfmpegSettings.
   */
  data: Prisma.XOR<Prisma.FfmpegSettingsUpdateManyMutationInput, Prisma.FfmpegSettingsUncheckedUpdateManyInput>
  /**
   * Filter which FfmpegSettings to update
   */
  where?: Prisma.FfmpegSettingsWhereInput
  /**
   * Limit how many FfmpegSettings to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FfmpegSettingsIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * FfmpegSettings upsert
 */
export type FfmpegSettingsUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FfmpegSettings
   */
  select?: Prisma.FfmpegSettingsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FfmpegSettings
   */
  omit?: Prisma.FfmpegSettingsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FfmpegSettingsInclude<ExtArgs> | null
  /**
   * The filter to search for the FfmpegSettings to update in case it exists.
   */
  where: Prisma.FfmpegSettingsWhereUniqueInput
  /**
   * In case the FfmpegSettings found by the `where` argument doesn't exist, create a new FfmpegSettings with this data.
   */
  create: Prisma.XOR<Prisma.FfmpegSettingsCreateInput, Prisma.FfmpegSettingsUncheckedCreateInput>
  /**
   * In case the FfmpegSettings was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.FfmpegSettingsUpdateInput, Prisma.FfmpegSettingsUncheckedUpdateInput>
}

/**
 * FfmpegSettings delete
 */
export type FfmpegSettingsDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FfmpegSettings
   */
  select?: Prisma.FfmpegSettingsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FfmpegSettings
   */
  omit?: Prisma.FfmpegSettingsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FfmpegSettingsInclude<ExtArgs> | null
  /**
   * Filter which FfmpegSettings to delete.
   */
  where: Prisma.FfmpegSettingsWhereUniqueInput
}

/**
 * FfmpegSettings deleteMany
 */
export type FfmpegSettingsDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which FfmpegSettings to delete
   */
  where?: Prisma.FfmpegSettingsWhereInput
  /**
   * Limit how many FfmpegSettings to delete.
   */
  limit?: number
}

/**
 * FfmpegSettings without action
 */
export type FfmpegSettingsDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FfmpegSettings
   */
  select?: Prisma.FfmpegSettingsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FfmpegSettings
   */
  omit?: Prisma.FfmpegSettingsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FfmpegSettingsInclude<ExtArgs> | null
}
