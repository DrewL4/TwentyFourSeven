
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `MediaShow` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model MediaShow
 * 
 */
export type MediaShowModel = runtime.Types.Result.DefaultSelection<Prisma.$MediaShowPayload>

export type AggregateMediaShow = {
  _count: MediaShowCountAggregateOutputType | null
  _avg: MediaShowAvgAggregateOutputType | null
  _sum: MediaShowSumAggregateOutputType | null
  _min: MediaShowMinAggregateOutputType | null
  _max: MediaShowMaxAggregateOutputType | null
}

export type MediaShowAvgAggregateOutputType = {
  year: number | null
}

export type MediaShowSumAggregateOutputType = {
  year: number | null
}

export type MediaShowMinAggregateOutputType = {
  id: string | null
  title: string | null
  year: number | null
  summary: string | null
  poster: string | null
  backdrop: string | null
  ratingKey: string | null
  studio: string | null
  contentRating: string | null
  genres: string | null
  directors: string | null
  writers: string | null
  actors: string | null
  countries: string | null
  libraryId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type MediaShowMaxAggregateOutputType = {
  id: string | null
  title: string | null
  year: number | null
  summary: string | null
  poster: string | null
  backdrop: string | null
  ratingKey: string | null
  studio: string | null
  contentRating: string | null
  genres: string | null
  directors: string | null
  writers: string | null
  actors: string | null
  countries: string | null
  libraryId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type MediaShowCountAggregateOutputType = {
  id: number
  title: number
  year: number
  summary: number
  poster: number
  backdrop: number
  ratingKey: number
  studio: number
  contentRating: number
  genres: number
  directors: number
  writers: number
  actors: number
  countries: number
  libraryId: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type MediaShowAvgAggregateInputType = {
  year?: true
}

export type MediaShowSumAggregateInputType = {
  year?: true
}

export type MediaShowMinAggregateInputType = {
  id?: true
  title?: true
  year?: true
  summary?: true
  poster?: true
  backdrop?: true
  ratingKey?: true
  studio?: true
  contentRating?: true
  genres?: true
  directors?: true
  writers?: true
  actors?: true
  countries?: true
  libraryId?: true
  createdAt?: true
  updatedAt?: true
}

export type MediaShowMaxAggregateInputType = {
  id?: true
  title?: true
  year?: true
  summary?: true
  poster?: true
  backdrop?: true
  ratingKey?: true
  studio?: true
  contentRating?: true
  genres?: true
  directors?: true
  writers?: true
  actors?: true
  countries?: true
  libraryId?: true
  createdAt?: true
  updatedAt?: true
}

export type MediaShowCountAggregateInputType = {
  id?: true
  title?: true
  year?: true
  summary?: true
  poster?: true
  backdrop?: true
  ratingKey?: true
  studio?: true
  contentRating?: true
  genres?: true
  directors?: true
  writers?: true
  actors?: true
  countries?: true
  libraryId?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type MediaShowAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which MediaShow to aggregate.
   */
  where?: Prisma.MediaShowWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MediaShows to fetch.
   */
  orderBy?: Prisma.MediaShowOrderByWithRelationInput | Prisma.MediaShowOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.MediaShowWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MediaShows from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MediaShows.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned MediaShows
  **/
  _count?: true | MediaShowCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: MediaShowAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: MediaShowSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: MediaShowMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: MediaShowMaxAggregateInputType
}

export type GetMediaShowAggregateType<T extends MediaShowAggregateArgs> = {
      [P in keyof T & keyof AggregateMediaShow]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateMediaShow[P]>
    : Prisma.GetScalarType<T[P], AggregateMediaShow[P]>
}




export type MediaShowGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.MediaShowWhereInput
  orderBy?: Prisma.MediaShowOrderByWithAggregationInput | Prisma.MediaShowOrderByWithAggregationInput[]
  by: Prisma.MediaShowScalarFieldEnum[] | Prisma.MediaShowScalarFieldEnum
  having?: Prisma.MediaShowScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: MediaShowCountAggregateInputType | true
  _avg?: MediaShowAvgAggregateInputType
  _sum?: MediaShowSumAggregateInputType
  _min?: MediaShowMinAggregateInputType
  _max?: MediaShowMaxAggregateInputType
}

export type MediaShowGroupByOutputType = {
  id: string
  title: string
  year: number | null
  summary: string | null
  poster: string | null
  backdrop: string | null
  ratingKey: string
  studio: string | null
  contentRating: string | null
  genres: string | null
  directors: string | null
  writers: string | null
  actors: string | null
  countries: string | null
  libraryId: string
  createdAt: Date
  updatedAt: Date
  _count: MediaShowCountAggregateOutputType | null
  _avg: MediaShowAvgAggregateOutputType | null
  _sum: MediaShowSumAggregateOutputType | null
  _min: MediaShowMinAggregateOutputType | null
  _max: MediaShowMaxAggregateOutputType | null
}

type GetMediaShowGroupByPayload<T extends MediaShowGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<MediaShowGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof MediaShowGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], MediaShowGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], MediaShowGroupByOutputType[P]>
      }
    >
  > 



export type MediaShowWhereInput = {
  AND?: Prisma.MediaShowWhereInput | Prisma.MediaShowWhereInput[]
  OR?: Prisma.MediaShowWhereInput[]
  NOT?: Prisma.MediaShowWhereInput | Prisma.MediaShowWhereInput[]
  id?: Prisma.StringFilter<"MediaShow"> | string
  title?: Prisma.StringFilter<"MediaShow"> | string
  year?: Prisma.IntNullableFilter<"MediaShow"> | number | null
  summary?: Prisma.StringNullableFilter<"MediaShow"> | string | null
  poster?: Prisma.StringNullableFilter<"MediaShow"> | string | null
  backdrop?: Prisma.StringNullableFilter<"MediaShow"> | string | null
  ratingKey?: Prisma.StringFilter<"MediaShow"> | string
  studio?: Prisma.StringNullableFilter<"MediaShow"> | string | null
  contentRating?: Prisma.StringNullableFilter<"MediaShow"> | string | null
  genres?: Prisma.StringNullableFilter<"MediaShow"> | string | null
  directors?: Prisma.StringNullableFilter<"MediaShow"> | string | null
  writers?: Prisma.StringNullableFilter<"MediaShow"> | string | null
  actors?: Prisma.StringNullableFilter<"MediaShow"> | string | null
  countries?: Prisma.StringNullableFilter<"MediaShow"> | string | null
  libraryId?: Prisma.StringFilter<"MediaShow"> | string
  createdAt?: Prisma.DateTimeFilter<"MediaShow"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"MediaShow"> | Date | string
  library?: Prisma.XOR<Prisma.MediaLibraryScalarRelationFilter, Prisma.MediaLibraryWhereInput>
  episodes?: Prisma.MediaEpisodeListRelationFilter
  channelShows?: Prisma.ChannelShowListRelationFilter
}

export type MediaShowOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  year?: Prisma.SortOrderInput | Prisma.SortOrder
  summary?: Prisma.SortOrderInput | Prisma.SortOrder
  poster?: Prisma.SortOrderInput | Prisma.SortOrder
  backdrop?: Prisma.SortOrderInput | Prisma.SortOrder
  ratingKey?: Prisma.SortOrder
  studio?: Prisma.SortOrderInput | Prisma.SortOrder
  contentRating?: Prisma.SortOrderInput | Prisma.SortOrder
  genres?: Prisma.SortOrderInput | Prisma.SortOrder
  directors?: Prisma.SortOrderInput | Prisma.SortOrder
  writers?: Prisma.SortOrderInput | Prisma.SortOrder
  actors?: Prisma.SortOrderInput | Prisma.SortOrder
  countries?: Prisma.SortOrderInput | Prisma.SortOrder
  libraryId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  library?: Prisma.MediaLibraryOrderByWithRelationInput
  episodes?: Prisma.MediaEpisodeOrderByRelationAggregateInput
  channelShows?: Prisma.ChannelShowOrderByRelationAggregateInput
}

export type MediaShowWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  libraryId_ratingKey?: Prisma.MediaShowLibraryIdRatingKeyCompoundUniqueInput
  AND?: Prisma.MediaShowWhereInput | Prisma.MediaShowWhereInput[]
  OR?: Prisma.MediaShowWhereInput[]
  NOT?: Prisma.MediaShowWhereInput | Prisma.MediaShowWhereInput[]
  title?: Prisma.StringFilter<"MediaShow"> | string
  year?: Prisma.IntNullableFilter<"MediaShow"> | number | null
  summary?: Prisma.StringNullableFilter<"MediaShow"> | string | null
  poster?: Prisma.StringNullableFilter<"MediaShow"> | string | null
  backdrop?: Prisma.StringNullableFilter<"MediaShow"> | string | null
  ratingKey?: Prisma.StringFilter<"MediaShow"> | string
  studio?: Prisma.StringNullableFilter<"MediaShow"> | string | null
  contentRating?: Prisma.StringNullableFilter<"MediaShow"> | string | null
  genres?: Prisma.StringNullableFilter<"MediaShow"> | string | null
  directors?: Prisma.StringNullableFilter<"MediaShow"> | string | null
  writers?: Prisma.StringNullableFilter<"MediaShow"> | string | null
  actors?: Prisma.StringNullableFilter<"MediaShow"> | string | null
  countries?: Prisma.StringNullableFilter<"MediaShow"> | string | null
  libraryId?: Prisma.StringFilter<"MediaShow"> | string
  createdAt?: Prisma.DateTimeFilter<"MediaShow"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"MediaShow"> | Date | string
  library?: Prisma.XOR<Prisma.MediaLibraryScalarRelationFilter, Prisma.MediaLibraryWhereInput>
  episodes?: Prisma.MediaEpisodeListRelationFilter
  channelShows?: Prisma.ChannelShowListRelationFilter
}, "id" | "libraryId_ratingKey">

export type MediaShowOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  year?: Prisma.SortOrderInput | Prisma.SortOrder
  summary?: Prisma.SortOrderInput | Prisma.SortOrder
  poster?: Prisma.SortOrderInput | Prisma.SortOrder
  backdrop?: Prisma.SortOrderInput | Prisma.SortOrder
  ratingKey?: Prisma.SortOrder
  studio?: Prisma.SortOrderInput | Prisma.SortOrder
  contentRating?: Prisma.SortOrderInput | Prisma.SortOrder
  genres?: Prisma.SortOrderInput | Prisma.SortOrder
  directors?: Prisma.SortOrderInput | Prisma.SortOrder
  writers?: Prisma.SortOrderInput | Prisma.SortOrder
  actors?: Prisma.SortOrderInput | Prisma.SortOrder
  countries?: Prisma.SortOrderInput | Prisma.SortOrder
  libraryId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.MediaShowCountOrderByAggregateInput
  _avg?: Prisma.MediaShowAvgOrderByAggregateInput
  _max?: Prisma.MediaShowMaxOrderByAggregateInput
  _min?: Prisma.MediaShowMinOrderByAggregateInput
  _sum?: Prisma.MediaShowSumOrderByAggregateInput
}

export type MediaShowScalarWhereWithAggregatesInput = {
  AND?: Prisma.MediaShowScalarWhereWithAggregatesInput | Prisma.MediaShowScalarWhereWithAggregatesInput[]
  OR?: Prisma.MediaShowScalarWhereWithAggregatesInput[]
  NOT?: Prisma.MediaShowScalarWhereWithAggregatesInput | Prisma.MediaShowScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"MediaShow"> | string
  title?: Prisma.StringWithAggregatesFilter<"MediaShow"> | string
  year?: Prisma.IntNullableWithAggregatesFilter<"MediaShow"> | number | null
  summary?: Prisma.StringNullableWithAggregatesFilter<"MediaShow"> | string | null
  poster?: Prisma.StringNullableWithAggregatesFilter<"MediaShow"> | string | null
  backdrop?: Prisma.StringNullableWithAggregatesFilter<"MediaShow"> | string | null
  ratingKey?: Prisma.StringWithAggregatesFilter<"MediaShow"> | string
  studio?: Prisma.StringNullableWithAggregatesFilter<"MediaShow"> | string | null
  contentRating?: Prisma.StringNullableWithAggregatesFilter<"MediaShow"> | string | null
  genres?: Prisma.StringNullableWithAggregatesFilter<"MediaShow"> | string | null
  directors?: Prisma.StringNullableWithAggregatesFilter<"MediaShow"> | string | null
  writers?: Prisma.StringNullableWithAggregatesFilter<"MediaShow"> | string | null
  actors?: Prisma.StringNullableWithAggregatesFilter<"MediaShow"> | string | null
  countries?: Prisma.StringNullableWithAggregatesFilter<"MediaShow"> | string | null
  libraryId?: Prisma.StringWithAggregatesFilter<"MediaShow"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"MediaShow"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"MediaShow"> | Date | string
}

export type MediaShowCreateInput = {
  id?: string
  title: string
  year?: number | null
  summary?: string | null
  poster?: string | null
  backdrop?: string | null
  ratingKey: string
  studio?: string | null
  contentRating?: string | null
  genres?: string | null
  directors?: string | null
  writers?: string | null
  actors?: string | null
  countries?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  library: Prisma.MediaLibraryCreateNestedOneWithoutShowsInput
  episodes?: Prisma.MediaEpisodeCreateNestedManyWithoutShowInput
  channelShows?: Prisma.ChannelShowCreateNestedManyWithoutShowInput
}

export type MediaShowUncheckedCreateInput = {
  id?: string
  title: string
  year?: number | null
  summary?: string | null
  poster?: string | null
  backdrop?: string | null
  ratingKey: string
  studio?: string | null
  contentRating?: string | null
  genres?: string | null
  directors?: string | null
  writers?: string | null
  actors?: string | null
  countries?: string | null
  libraryId: string
  createdAt?: Date | string
  updatedAt?: Date | string
  episodes?: Prisma.MediaEpisodeUncheckedCreateNestedManyWithoutShowInput
  channelShows?: Prisma.ChannelShowUncheckedCreateNestedManyWithoutShowInput
}

export type MediaShowUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  year?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  summary?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  poster?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  backdrop?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  ratingKey?: Prisma.StringFieldUpdateOperationsInput | string
  studio?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  contentRating?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  genres?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  directors?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  writers?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  actors?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  countries?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  library?: Prisma.MediaLibraryUpdateOneRequiredWithoutShowsNestedInput
  episodes?: Prisma.MediaEpisodeUpdateManyWithoutShowNestedInput
  channelShows?: Prisma.ChannelShowUpdateManyWithoutShowNestedInput
}

export type MediaShowUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  year?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  summary?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  poster?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  backdrop?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  ratingKey?: Prisma.StringFieldUpdateOperationsInput | string
  studio?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  contentRating?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  genres?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  directors?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  writers?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  actors?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  countries?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  libraryId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  episodes?: Prisma.MediaEpisodeUncheckedUpdateManyWithoutShowNestedInput
  channelShows?: Prisma.ChannelShowUncheckedUpdateManyWithoutShowNestedInput
}

export type MediaShowCreateManyInput = {
  id?: string
  title: string
  year?: number | null
  summary?: string | null
  poster?: string | null
  backdrop?: string | null
  ratingKey: string
  studio?: string | null
  contentRating?: string | null
  genres?: string | null
  directors?: string | null
  writers?: string | null
  actors?: string | null
  countries?: string | null
  libraryId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type MediaShowUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  year?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  summary?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  poster?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  backdrop?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  ratingKey?: Prisma.StringFieldUpdateOperationsInput | string
  studio?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  contentRating?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  genres?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  directors?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  writers?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  actors?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  countries?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type MediaShowUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  year?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  summary?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  poster?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  backdrop?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  ratingKey?: Prisma.StringFieldUpdateOperationsInput | string
  studio?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  contentRating?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  genres?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  directors?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  writers?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  actors?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  countries?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  libraryId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type MediaShowListRelationFilter = {
  every?: Prisma.MediaShowWhereInput
  some?: Prisma.MediaShowWhereInput
  none?: Prisma.MediaShowWhereInput
}

export type MediaShowOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type MediaShowLibraryIdRatingKeyCompoundUniqueInput = {
  libraryId: string
  ratingKey: string
}

export type MediaShowCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  year?: Prisma.SortOrder
  summary?: Prisma.SortOrder
  poster?: Prisma.SortOrder
  backdrop?: Prisma.SortOrder
  ratingKey?: Prisma.SortOrder
  studio?: Prisma.SortOrder
  contentRating?: Prisma.SortOrder
  genres?: Prisma.SortOrder
  directors?: Prisma.SortOrder
  writers?: Prisma.SortOrder
  actors?: Prisma.SortOrder
  countries?: Prisma.SortOrder
  libraryId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type MediaShowAvgOrderByAggregateInput = {
  year?: Prisma.SortOrder
}

export type MediaShowMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  year?: Prisma.SortOrder
  summary?: Prisma.SortOrder
  poster?: Prisma.SortOrder
  backdrop?: Prisma.SortOrder
  ratingKey?: Prisma.SortOrder
  studio?: Prisma.SortOrder
  contentRating?: Prisma.SortOrder
  genres?: Prisma.SortOrder
  directors?: Prisma.SortOrder
  writers?: Prisma.SortOrder
  actors?: Prisma.SortOrder
  countries?: Prisma.SortOrder
  libraryId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type MediaShowMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  year?: Prisma.SortOrder
  summary?: Prisma.SortOrder
  poster?: Prisma.SortOrder
  backdrop?: Prisma.SortOrder
  ratingKey?: Prisma.SortOrder
  studio?: Prisma.SortOrder
  contentRating?: Prisma.SortOrder
  genres?: Prisma.SortOrder
  directors?: Prisma.SortOrder
  writers?: Prisma.SortOrder
  actors?: Prisma.SortOrder
  countries?: Prisma.SortOrder
  libraryId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type MediaShowSumOrderByAggregateInput = {
  year?: Prisma.SortOrder
}

export type MediaShowScalarRelationFilter = {
  is?: Prisma.MediaShowWhereInput
  isNot?: Prisma.MediaShowWhereInput
}

export type MediaShowCreateNestedManyWithoutLibraryInput = {
  create?: Prisma.XOR<Prisma.MediaShowCreateWithoutLibraryInput, Prisma.MediaShowUncheckedCreateWithoutLibraryInput> | Prisma.MediaShowCreateWithoutLibraryInput[] | Prisma.MediaShowUncheckedCreateWithoutLibraryInput[]
  connectOrCreate?: Prisma.MediaShowCreateOrConnectWithoutLibraryInput | Prisma.MediaShowCreateOrConnectWithoutLibraryInput[]
  createMany?: Prisma.MediaShowCreateManyLibraryInputEnvelope
  connect?: Prisma.MediaShowWhereUniqueInput | Prisma.MediaShowWhereUniqueInput[]
}

export type MediaShowUncheckedCreateNestedManyWithoutLibraryInput = {
  create?: Prisma.XOR<Prisma.MediaShowCreateWithoutLibraryInput, Prisma.MediaShowUncheckedCreateWithoutLibraryInput> | Prisma.MediaShowCreateWithoutLibraryInput[] | Prisma.MediaShowUncheckedCreateWithoutLibraryInput[]
  connectOrCreate?: Prisma.MediaShowCreateOrConnectWithoutLibraryInput | Prisma.MediaShowCreateOrConnectWithoutLibraryInput[]
  createMany?: Prisma.MediaShowCreateManyLibraryInputEnvelope
  connect?: Prisma.MediaShowWhereUniqueInput | Prisma.MediaShowWhereUniqueInput[]
}

export type MediaShowUpdateManyWithoutLibraryNestedInput = {
  create?: Prisma.XOR<Prisma.MediaShowCreateWithoutLibraryInput, Prisma.MediaShowUncheckedCreateWithoutLibraryInput> | Prisma.MediaShowCreateWithoutLibraryInput[] | Prisma.MediaShowUncheckedCreateWithoutLibraryInput[]
  connectOrCreate?: Prisma.MediaShowCreateOrConnectWithoutLibraryInput | Prisma.MediaShowCreateOrConnectWithoutLibraryInput[]
  upsert?: Prisma.MediaShowUpsertWithWhereUniqueWithoutLibraryInput | Prisma.MediaShowUpsertWithWhereUniqueWithoutLibraryInput[]
  createMany?: Prisma.MediaShowCreateManyLibraryInputEnvelope
  set?: Prisma.MediaShowWhereUniqueInput | Prisma.MediaShowWhereUniqueInput[]
  disconnect?: Prisma.MediaShowWhereUniqueInput | Prisma.MediaShowWhereUniqueInput[]
  delete?: Prisma.MediaShowWhereUniqueInput | Prisma.MediaShowWhereUniqueInput[]
  connect?: Prisma.MediaShowWhereUniqueInput | Prisma.MediaShowWhereUniqueInput[]
  update?: Prisma.MediaShowUpdateWithWhereUniqueWithoutLibraryInput | Prisma.MediaShowUpdateWithWhereUniqueWithoutLibraryInput[]
  updateMany?: Prisma.MediaShowUpdateManyWithWhereWithoutLibraryInput | Prisma.MediaShowUpdateManyWithWhereWithoutLibraryInput[]
  deleteMany?: Prisma.MediaShowScalarWhereInput | Prisma.MediaShowScalarWhereInput[]
}

export type MediaShowUncheckedUpdateManyWithoutLibraryNestedInput = {
  create?: Prisma.XOR<Prisma.MediaShowCreateWithoutLibraryInput, Prisma.MediaShowUncheckedCreateWithoutLibraryInput> | Prisma.MediaShowCreateWithoutLibraryInput[] | Prisma.MediaShowUncheckedCreateWithoutLibraryInput[]
  connectOrCreate?: Prisma.MediaShowCreateOrConnectWithoutLibraryInput | Prisma.MediaShowCreateOrConnectWithoutLibraryInput[]
  upsert?: Prisma.MediaShowUpsertWithWhereUniqueWithoutLibraryInput | Prisma.MediaShowUpsertWithWhereUniqueWithoutLibraryInput[]
  createMany?: Prisma.MediaShowCreateManyLibraryInputEnvelope
  set?: Prisma.MediaShowWhereUniqueInput | Prisma.MediaShowWhereUniqueInput[]
  disconnect?: Prisma.MediaShowWhereUniqueInput | Prisma.MediaShowWhereUniqueInput[]
  delete?: Prisma.MediaShowWhereUniqueInput | Prisma.MediaShowWhereUniqueInput[]
  connect?: Prisma.MediaShowWhereUniqueInput | Prisma.MediaShowWhereUniqueInput[]
  update?: Prisma.MediaShowUpdateWithWhereUniqueWithoutLibraryInput | Prisma.MediaShowUpdateWithWhereUniqueWithoutLibraryInput[]
  updateMany?: Prisma.MediaShowUpdateManyWithWhereWithoutLibraryInput | Prisma.MediaShowUpdateManyWithWhereWithoutLibraryInput[]
  deleteMany?: Prisma.MediaShowScalarWhereInput | Prisma.MediaShowScalarWhereInput[]
}

export type NullableIntFieldUpdateOperationsInput = {
  set?: number | null
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type MediaShowCreateNestedOneWithoutEpisodesInput = {
  create?: Prisma.XOR<Prisma.MediaShowCreateWithoutEpisodesInput, Prisma.MediaShowUncheckedCreateWithoutEpisodesInput>
  connectOrCreate?: Prisma.MediaShowCreateOrConnectWithoutEpisodesInput
  connect?: Prisma.MediaShowWhereUniqueInput
}

export type MediaShowUpdateOneRequiredWithoutEpisodesNestedInput = {
  create?: Prisma.XOR<Prisma.MediaShowCreateWithoutEpisodesInput, Prisma.MediaShowUncheckedCreateWithoutEpisodesInput>
  connectOrCreate?: Prisma.MediaShowCreateOrConnectWithoutEpisodesInput
  upsert?: Prisma.MediaShowUpsertWithoutEpisodesInput
  connect?: Prisma.MediaShowWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.MediaShowUpdateToOneWithWhereWithoutEpisodesInput, Prisma.MediaShowUpdateWithoutEpisodesInput>, Prisma.MediaShowUncheckedUpdateWithoutEpisodesInput>
}

export type MediaShowCreateNestedOneWithoutChannelShowsInput = {
  create?: Prisma.XOR<Prisma.MediaShowCreateWithoutChannelShowsInput, Prisma.MediaShowUncheckedCreateWithoutChannelShowsInput>
  connectOrCreate?: Prisma.MediaShowCreateOrConnectWithoutChannelShowsInput
  connect?: Prisma.MediaShowWhereUniqueInput
}

export type MediaShowUpdateOneRequiredWithoutChannelShowsNestedInput = {
  create?: Prisma.XOR<Prisma.MediaShowCreateWithoutChannelShowsInput, Prisma.MediaShowUncheckedCreateWithoutChannelShowsInput>
  connectOrCreate?: Prisma.MediaShowCreateOrConnectWithoutChannelShowsInput
  upsert?: Prisma.MediaShowUpsertWithoutChannelShowsInput
  connect?: Prisma.MediaShowWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.MediaShowUpdateToOneWithWhereWithoutChannelShowsInput, Prisma.MediaShowUpdateWithoutChannelShowsInput>, Prisma.MediaShowUncheckedUpdateWithoutChannelShowsInput>
}

export type MediaShowCreateWithoutLibraryInput = {
  id?: string
  title: string
  year?: number | null
  summary?: string | null
  poster?: string | null
  backdrop?: string | null
  ratingKey: string
  studio?: string | null
  contentRating?: string | null
  genres?: string | null
  directors?: string | null
  writers?: string | null
  actors?: string | null
  countries?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  episodes?: Prisma.MediaEpisodeCreateNestedManyWithoutShowInput
  channelShows?: Prisma.ChannelShowCreateNestedManyWithoutShowInput
}

export type MediaShowUncheckedCreateWithoutLibraryInput = {
  id?: string
  title: string
  year?: number | null
  summary?: string | null
  poster?: string | null
  backdrop?: string | null
  ratingKey: string
  studio?: string | null
  contentRating?: string | null
  genres?: string | null
  directors?: string | null
  writers?: string | null
  actors?: string | null
  countries?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  episodes?: Prisma.MediaEpisodeUncheckedCreateNestedManyWithoutShowInput
  channelShows?: Prisma.ChannelShowUncheckedCreateNestedManyWithoutShowInput
}

export type MediaShowCreateOrConnectWithoutLibraryInput = {
  where: Prisma.MediaShowWhereUniqueInput
  create: Prisma.XOR<Prisma.MediaShowCreateWithoutLibraryInput, Prisma.MediaShowUncheckedCreateWithoutLibraryInput>
}

export type MediaShowCreateManyLibraryInputEnvelope = {
  data: Prisma.MediaShowCreateManyLibraryInput | Prisma.MediaShowCreateManyLibraryInput[]
}

export type MediaShowUpsertWithWhereUniqueWithoutLibraryInput = {
  where: Prisma.MediaShowWhereUniqueInput
  update: Prisma.XOR<Prisma.MediaShowUpdateWithoutLibraryInput, Prisma.MediaShowUncheckedUpdateWithoutLibraryInput>
  create: Prisma.XOR<Prisma.MediaShowCreateWithoutLibraryInput, Prisma.MediaShowUncheckedCreateWithoutLibraryInput>
}

export type MediaShowUpdateWithWhereUniqueWithoutLibraryInput = {
  where: Prisma.MediaShowWhereUniqueInput
  data: Prisma.XOR<Prisma.MediaShowUpdateWithoutLibraryInput, Prisma.MediaShowUncheckedUpdateWithoutLibraryInput>
}

export type MediaShowUpdateManyWithWhereWithoutLibraryInput = {
  where: Prisma.MediaShowScalarWhereInput
  data: Prisma.XOR<Prisma.MediaShowUpdateManyMutationInput, Prisma.MediaShowUncheckedUpdateManyWithoutLibraryInput>
}

export type MediaShowScalarWhereInput = {
  AND?: Prisma.MediaShowScalarWhereInput | Prisma.MediaShowScalarWhereInput[]
  OR?: Prisma.MediaShowScalarWhereInput[]
  NOT?: Prisma.MediaShowScalarWhereInput | Prisma.MediaShowScalarWhereInput[]
  id?: Prisma.StringFilter<"MediaShow"> | string
  title?: Prisma.StringFilter<"MediaShow"> | string
  year?: Prisma.IntNullableFilter<"MediaShow"> | number | null
  summary?: Prisma.StringNullableFilter<"MediaShow"> | string | null
  poster?: Prisma.StringNullableFilter<"MediaShow"> | string | null
  backdrop?: Prisma.StringNullableFilter<"MediaShow"> | string | null
  ratingKey?: Prisma.StringFilter<"MediaShow"> | string
  studio?: Prisma.StringNullableFilter<"MediaShow"> | string | null
  contentRating?: Prisma.StringNullableFilter<"MediaShow"> | string | null
  genres?: Prisma.StringNullableFilter<"MediaShow"> | string | null
  directors?: Prisma.StringNullableFilter<"MediaShow"> | string | null
  writers?: Prisma.StringNullableFilter<"MediaShow"> | string | null
  actors?: Prisma.StringNullableFilter<"MediaShow"> | string | null
  countries?: Prisma.StringNullableFilter<"MediaShow"> | string | null
  libraryId?: Prisma.StringFilter<"MediaShow"> | string
  createdAt?: Prisma.DateTimeFilter<"MediaShow"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"MediaShow"> | Date | string
}

export type MediaShowCreateWithoutEpisodesInput = {
  id?: string
  title: string
  year?: number | null
  summary?: string | null
  poster?: string | null
  backdrop?: string | null
  ratingKey: string
  studio?: string | null
  contentRating?: string | null
  genres?: string | null
  directors?: string | null
  writers?: string | null
  actors?: string | null
  countries?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  library: Prisma.MediaLibraryCreateNestedOneWithoutShowsInput
  channelShows?: Prisma.ChannelShowCreateNestedManyWithoutShowInput
}

export type MediaShowUncheckedCreateWithoutEpisodesInput = {
  id?: string
  title: string
  year?: number | null
  summary?: string | null
  poster?: string | null
  backdrop?: string | null
  ratingKey: string
  studio?: string | null
  contentRating?: string | null
  genres?: string | null
  directors?: string | null
  writers?: string | null
  actors?: string | null
  countries?: string | null
  libraryId: string
  createdAt?: Date | string
  updatedAt?: Date | string
  channelShows?: Prisma.ChannelShowUncheckedCreateNestedManyWithoutShowInput
}

export type MediaShowCreateOrConnectWithoutEpisodesInput = {
  where: Prisma.MediaShowWhereUniqueInput
  create: Prisma.XOR<Prisma.MediaShowCreateWithoutEpisodesInput, Prisma.MediaShowUncheckedCreateWithoutEpisodesInput>
}

export type MediaShowUpsertWithoutEpisodesInput = {
  update: Prisma.XOR<Prisma.MediaShowUpdateWithoutEpisodesInput, Prisma.MediaShowUncheckedUpdateWithoutEpisodesInput>
  create: Prisma.XOR<Prisma.MediaShowCreateWithoutEpisodesInput, Prisma.MediaShowUncheckedCreateWithoutEpisodesInput>
  where?: Prisma.MediaShowWhereInput
}

export type MediaShowUpdateToOneWithWhereWithoutEpisodesInput = {
  where?: Prisma.MediaShowWhereInput
  data: Prisma.XOR<Prisma.MediaShowUpdateWithoutEpisodesInput, Prisma.MediaShowUncheckedUpdateWithoutEpisodesInput>
}

export type MediaShowUpdateWithoutEpisodesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  year?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  summary?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  poster?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  backdrop?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  ratingKey?: Prisma.StringFieldUpdateOperationsInput | string
  studio?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  contentRating?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  genres?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  directors?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  writers?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  actors?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  countries?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  library?: Prisma.MediaLibraryUpdateOneRequiredWithoutShowsNestedInput
  channelShows?: Prisma.ChannelShowUpdateManyWithoutShowNestedInput
}

export type MediaShowUncheckedUpdateWithoutEpisodesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  year?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  summary?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  poster?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  backdrop?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  ratingKey?: Prisma.StringFieldUpdateOperationsInput | string
  studio?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  contentRating?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  genres?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  directors?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  writers?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  actors?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  countries?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  libraryId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  channelShows?: Prisma.ChannelShowUncheckedUpdateManyWithoutShowNestedInput
}

export type MediaShowCreateWithoutChannelShowsInput = {
  id?: string
  title: string
  year?: number | null
  summary?: string | null
  poster?: string | null
  backdrop?: string | null
  ratingKey: string
  studio?: string | null
  contentRating?: string | null
  genres?: string | null
  directors?: string | null
  writers?: string | null
  actors?: string | null
  countries?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  library: Prisma.MediaLibraryCreateNestedOneWithoutShowsInput
  episodes?: Prisma.MediaEpisodeCreateNestedManyWithoutShowInput
}

export type MediaShowUncheckedCreateWithoutChannelShowsInput = {
  id?: string
  title: string
  year?: number | null
  summary?: string | null
  poster?: string | null
  backdrop?: string | null
  ratingKey: string
  studio?: string | null
  contentRating?: string | null
  genres?: string | null
  directors?: string | null
  writers?: string | null
  actors?: string | null
  countries?: string | null
  libraryId: string
  createdAt?: Date | string
  updatedAt?: Date | string
  episodes?: Prisma.MediaEpisodeUncheckedCreateNestedManyWithoutShowInput
}

export type MediaShowCreateOrConnectWithoutChannelShowsInput = {
  where: Prisma.MediaShowWhereUniqueInput
  create: Prisma.XOR<Prisma.MediaShowCreateWithoutChannelShowsInput, Prisma.MediaShowUncheckedCreateWithoutChannelShowsInput>
}

export type MediaShowUpsertWithoutChannelShowsInput = {
  update: Prisma.XOR<Prisma.MediaShowUpdateWithoutChannelShowsInput, Prisma.MediaShowUncheckedUpdateWithoutChannelShowsInput>
  create: Prisma.XOR<Prisma.MediaShowCreateWithoutChannelShowsInput, Prisma.MediaShowUncheckedCreateWithoutChannelShowsInput>
  where?: Prisma.MediaShowWhereInput
}

export type MediaShowUpdateToOneWithWhereWithoutChannelShowsInput = {
  where?: Prisma.MediaShowWhereInput
  data: Prisma.XOR<Prisma.MediaShowUpdateWithoutChannelShowsInput, Prisma.MediaShowUncheckedUpdateWithoutChannelShowsInput>
}

export type MediaShowUpdateWithoutChannelShowsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  year?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  summary?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  poster?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  backdrop?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  ratingKey?: Prisma.StringFieldUpdateOperationsInput | string
  studio?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  contentRating?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  genres?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  directors?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  writers?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  actors?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  countries?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  library?: Prisma.MediaLibraryUpdateOneRequiredWithoutShowsNestedInput
  episodes?: Prisma.MediaEpisodeUpdateManyWithoutShowNestedInput
}

export type MediaShowUncheckedUpdateWithoutChannelShowsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  year?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  summary?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  poster?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  backdrop?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  ratingKey?: Prisma.StringFieldUpdateOperationsInput | string
  studio?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  contentRating?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  genres?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  directors?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  writers?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  actors?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  countries?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  libraryId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  episodes?: Prisma.MediaEpisodeUncheckedUpdateManyWithoutShowNestedInput
}

export type MediaShowCreateManyLibraryInput = {
  id?: string
  title: string
  year?: number | null
  summary?: string | null
  poster?: string | null
  backdrop?: string | null
  ratingKey: string
  studio?: string | null
  contentRating?: string | null
  genres?: string | null
  directors?: string | null
  writers?: string | null
  actors?: string | null
  countries?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type MediaShowUpdateWithoutLibraryInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  year?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  summary?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  poster?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  backdrop?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  ratingKey?: Prisma.StringFieldUpdateOperationsInput | string
  studio?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  contentRating?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  genres?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  directors?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  writers?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  actors?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  countries?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  episodes?: Prisma.MediaEpisodeUpdateManyWithoutShowNestedInput
  channelShows?: Prisma.ChannelShowUpdateManyWithoutShowNestedInput
}

export type MediaShowUncheckedUpdateWithoutLibraryInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  year?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  summary?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  poster?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  backdrop?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  ratingKey?: Prisma.StringFieldUpdateOperationsInput | string
  studio?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  contentRating?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  genres?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  directors?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  writers?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  actors?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  countries?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  episodes?: Prisma.MediaEpisodeUncheckedUpdateManyWithoutShowNestedInput
  channelShows?: Prisma.ChannelShowUncheckedUpdateManyWithoutShowNestedInput
}

export type MediaShowUncheckedUpdateManyWithoutLibraryInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  year?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  summary?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  poster?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  backdrop?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  ratingKey?: Prisma.StringFieldUpdateOperationsInput | string
  studio?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  contentRating?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  genres?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  directors?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  writers?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  actors?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  countries?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}


/**
 * Count Type MediaShowCountOutputType
 */

export type MediaShowCountOutputType = {
  episodes: number
  channelShows: number
}

export type MediaShowCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  episodes?: boolean | MediaShowCountOutputTypeCountEpisodesArgs
  channelShows?: boolean | MediaShowCountOutputTypeCountChannelShowsArgs
}

/**
 * MediaShowCountOutputType without action
 */
export type MediaShowCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MediaShowCountOutputType
   */
  select?: Prisma.MediaShowCountOutputTypeSelect<ExtArgs> | null
}

/**
 * MediaShowCountOutputType without action
 */
export type MediaShowCountOutputTypeCountEpisodesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.MediaEpisodeWhereInput
}

/**
 * MediaShowCountOutputType without action
 */
export type MediaShowCountOutputTypeCountChannelShowsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ChannelShowWhereInput
}


export type MediaShowSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  title?: boolean
  year?: boolean
  summary?: boolean
  poster?: boolean
  backdrop?: boolean
  ratingKey?: boolean
  studio?: boolean
  contentRating?: boolean
  genres?: boolean
  directors?: boolean
  writers?: boolean
  actors?: boolean
  countries?: boolean
  libraryId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  library?: boolean | Prisma.MediaLibraryDefaultArgs<ExtArgs>
  episodes?: boolean | Prisma.MediaShow$episodesArgs<ExtArgs>
  channelShows?: boolean | Prisma.MediaShow$channelShowsArgs<ExtArgs>
  _count?: boolean | Prisma.MediaShowCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["mediaShow"]>

export type MediaShowSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  title?: boolean
  year?: boolean
  summary?: boolean
  poster?: boolean
  backdrop?: boolean
  ratingKey?: boolean
  studio?: boolean
  contentRating?: boolean
  genres?: boolean
  directors?: boolean
  writers?: boolean
  actors?: boolean
  countries?: boolean
  libraryId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  library?: boolean | Prisma.MediaLibraryDefaultArgs<ExtArgs>
}, ExtArgs["result"]["mediaShow"]>

export type MediaShowSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  title?: boolean
  year?: boolean
  summary?: boolean
  poster?: boolean
  backdrop?: boolean
  ratingKey?: boolean
  studio?: boolean
  contentRating?: boolean
  genres?: boolean
  directors?: boolean
  writers?: boolean
  actors?: boolean
  countries?: boolean
  libraryId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  library?: boolean | Prisma.MediaLibraryDefaultArgs<ExtArgs>
}, ExtArgs["result"]["mediaShow"]>

export type MediaShowSelectScalar = {
  id?: boolean
  title?: boolean
  year?: boolean
  summary?: boolean
  poster?: boolean
  backdrop?: boolean
  ratingKey?: boolean
  studio?: boolean
  contentRating?: boolean
  genres?: boolean
  directors?: boolean
  writers?: boolean
  actors?: boolean
  countries?: boolean
  libraryId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type MediaShowOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "title" | "year" | "summary" | "poster" | "backdrop" | "ratingKey" | "studio" | "contentRating" | "genres" | "directors" | "writers" | "actors" | "countries" | "libraryId" | "createdAt" | "updatedAt", ExtArgs["result"]["mediaShow"]>
export type MediaShowInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  library?: boolean | Prisma.MediaLibraryDefaultArgs<ExtArgs>
  episodes?: boolean | Prisma.MediaShow$episodesArgs<ExtArgs>
  channelShows?: boolean | Prisma.MediaShow$channelShowsArgs<ExtArgs>
  _count?: boolean | Prisma.MediaShowCountOutputTypeDefaultArgs<ExtArgs>
}
export type MediaShowIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  library?: boolean | Prisma.MediaLibraryDefaultArgs<ExtArgs>
}
export type MediaShowIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  library?: boolean | Prisma.MediaLibraryDefaultArgs<ExtArgs>
}

export type $MediaShowPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "MediaShow"
  objects: {
    library: Prisma.$MediaLibraryPayload<ExtArgs>
    episodes: Prisma.$MediaEpisodePayload<ExtArgs>[]
    channelShows: Prisma.$ChannelShowPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    title: string
    year: number | null
    summary: string | null
    poster: string | null
    backdrop: string | null
    ratingKey: string
    studio: string | null
    contentRating: string | null
    genres: string | null
    directors: string | null
    writers: string | null
    actors: string | null
    countries: string | null
    libraryId: string
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["mediaShow"]>
  composites: {}
}

export type MediaShowGetPayload<S extends boolean | null | undefined | MediaShowDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$MediaShowPayload, S>

export type MediaShowCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<MediaShowFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: MediaShowCountAggregateInputType | true
  }

export interface MediaShowDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MediaShow'], meta: { name: 'MediaShow' } }
  /**
   * Find zero or one MediaShow that matches the filter.
   * @param {MediaShowFindUniqueArgs} args - Arguments to find a MediaShow
   * @example
   * // Get one MediaShow
   * const mediaShow = await prisma.mediaShow.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends MediaShowFindUniqueArgs>(args: Prisma.SelectSubset<T, MediaShowFindUniqueArgs<ExtArgs>>): Prisma.Prisma__MediaShowClient<runtime.Types.Result.GetResult<Prisma.$MediaShowPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one MediaShow that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {MediaShowFindUniqueOrThrowArgs} args - Arguments to find a MediaShow
   * @example
   * // Get one MediaShow
   * const mediaShow = await prisma.mediaShow.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends MediaShowFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, MediaShowFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__MediaShowClient<runtime.Types.Result.GetResult<Prisma.$MediaShowPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first MediaShow that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MediaShowFindFirstArgs} args - Arguments to find a MediaShow
   * @example
   * // Get one MediaShow
   * const mediaShow = await prisma.mediaShow.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends MediaShowFindFirstArgs>(args?: Prisma.SelectSubset<T, MediaShowFindFirstArgs<ExtArgs>>): Prisma.Prisma__MediaShowClient<runtime.Types.Result.GetResult<Prisma.$MediaShowPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first MediaShow that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MediaShowFindFirstOrThrowArgs} args - Arguments to find a MediaShow
   * @example
   * // Get one MediaShow
   * const mediaShow = await prisma.mediaShow.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends MediaShowFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, MediaShowFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__MediaShowClient<runtime.Types.Result.GetResult<Prisma.$MediaShowPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more MediaShows that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MediaShowFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all MediaShows
   * const mediaShows = await prisma.mediaShow.findMany()
   * 
   * // Get first 10 MediaShows
   * const mediaShows = await prisma.mediaShow.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const mediaShowWithIdOnly = await prisma.mediaShow.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends MediaShowFindManyArgs>(args?: Prisma.SelectSubset<T, MediaShowFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MediaShowPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a MediaShow.
   * @param {MediaShowCreateArgs} args - Arguments to create a MediaShow.
   * @example
   * // Create one MediaShow
   * const MediaShow = await prisma.mediaShow.create({
   *   data: {
   *     // ... data to create a MediaShow
   *   }
   * })
   * 
   */
  create<T extends MediaShowCreateArgs>(args: Prisma.SelectSubset<T, MediaShowCreateArgs<ExtArgs>>): Prisma.Prisma__MediaShowClient<runtime.Types.Result.GetResult<Prisma.$MediaShowPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many MediaShows.
   * @param {MediaShowCreateManyArgs} args - Arguments to create many MediaShows.
   * @example
   * // Create many MediaShows
   * const mediaShow = await prisma.mediaShow.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends MediaShowCreateManyArgs>(args?: Prisma.SelectSubset<T, MediaShowCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many MediaShows and returns the data saved in the database.
   * @param {MediaShowCreateManyAndReturnArgs} args - Arguments to create many MediaShows.
   * @example
   * // Create many MediaShows
   * const mediaShow = await prisma.mediaShow.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many MediaShows and only return the `id`
   * const mediaShowWithIdOnly = await prisma.mediaShow.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends MediaShowCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, MediaShowCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MediaShowPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a MediaShow.
   * @param {MediaShowDeleteArgs} args - Arguments to delete one MediaShow.
   * @example
   * // Delete one MediaShow
   * const MediaShow = await prisma.mediaShow.delete({
   *   where: {
   *     // ... filter to delete one MediaShow
   *   }
   * })
   * 
   */
  delete<T extends MediaShowDeleteArgs>(args: Prisma.SelectSubset<T, MediaShowDeleteArgs<ExtArgs>>): Prisma.Prisma__MediaShowClient<runtime.Types.Result.GetResult<Prisma.$MediaShowPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one MediaShow.
   * @param {MediaShowUpdateArgs} args - Arguments to update one MediaShow.
   * @example
   * // Update one MediaShow
   * const mediaShow = await prisma.mediaShow.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends MediaShowUpdateArgs>(args: Prisma.SelectSubset<T, MediaShowUpdateArgs<ExtArgs>>): Prisma.Prisma__MediaShowClient<runtime.Types.Result.GetResult<Prisma.$MediaShowPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more MediaShows.
   * @param {MediaShowDeleteManyArgs} args - Arguments to filter MediaShows to delete.
   * @example
   * // Delete a few MediaShows
   * const { count } = await prisma.mediaShow.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends MediaShowDeleteManyArgs>(args?: Prisma.SelectSubset<T, MediaShowDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more MediaShows.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MediaShowUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many MediaShows
   * const mediaShow = await prisma.mediaShow.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends MediaShowUpdateManyArgs>(args: Prisma.SelectSubset<T, MediaShowUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more MediaShows and returns the data updated in the database.
   * @param {MediaShowUpdateManyAndReturnArgs} args - Arguments to update many MediaShows.
   * @example
   * // Update many MediaShows
   * const mediaShow = await prisma.mediaShow.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more MediaShows and only return the `id`
   * const mediaShowWithIdOnly = await prisma.mediaShow.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends MediaShowUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, MediaShowUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MediaShowPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one MediaShow.
   * @param {MediaShowUpsertArgs} args - Arguments to update or create a MediaShow.
   * @example
   * // Update or create a MediaShow
   * const mediaShow = await prisma.mediaShow.upsert({
   *   create: {
   *     // ... data to create a MediaShow
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the MediaShow we want to update
   *   }
   * })
   */
  upsert<T extends MediaShowUpsertArgs>(args: Prisma.SelectSubset<T, MediaShowUpsertArgs<ExtArgs>>): Prisma.Prisma__MediaShowClient<runtime.Types.Result.GetResult<Prisma.$MediaShowPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of MediaShows.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MediaShowCountArgs} args - Arguments to filter MediaShows to count.
   * @example
   * // Count the number of MediaShows
   * const count = await prisma.mediaShow.count({
   *   where: {
   *     // ... the filter for the MediaShows we want to count
   *   }
   * })
  **/
  count<T extends MediaShowCountArgs>(
    args?: Prisma.Subset<T, MediaShowCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], MediaShowCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a MediaShow.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MediaShowAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends MediaShowAggregateArgs>(args: Prisma.Subset<T, MediaShowAggregateArgs>): Prisma.PrismaPromise<GetMediaShowAggregateType<T>>

  /**
   * Group by MediaShow.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MediaShowGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends MediaShowGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: MediaShowGroupByArgs['orderBy'] }
      : { orderBy?: MediaShowGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, MediaShowGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMediaShowGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the MediaShow model
 */
readonly fields: MediaShowFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for MediaShow.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__MediaShowClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  library<T extends Prisma.MediaLibraryDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.MediaLibraryDefaultArgs<ExtArgs>>): Prisma.Prisma__MediaLibraryClient<runtime.Types.Result.GetResult<Prisma.$MediaLibraryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  episodes<T extends Prisma.MediaShow$episodesArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.MediaShow$episodesArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MediaEpisodePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  channelShows<T extends Prisma.MediaShow$channelShowsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.MediaShow$channelShowsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ChannelShowPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the MediaShow model
 */
export interface MediaShowFieldRefs {
  readonly id: Prisma.FieldRef<"MediaShow", 'String'>
  readonly title: Prisma.FieldRef<"MediaShow", 'String'>
  readonly year: Prisma.FieldRef<"MediaShow", 'Int'>
  readonly summary: Prisma.FieldRef<"MediaShow", 'String'>
  readonly poster: Prisma.FieldRef<"MediaShow", 'String'>
  readonly backdrop: Prisma.FieldRef<"MediaShow", 'String'>
  readonly ratingKey: Prisma.FieldRef<"MediaShow", 'String'>
  readonly studio: Prisma.FieldRef<"MediaShow", 'String'>
  readonly contentRating: Prisma.FieldRef<"MediaShow", 'String'>
  readonly genres: Prisma.FieldRef<"MediaShow", 'String'>
  readonly directors: Prisma.FieldRef<"MediaShow", 'String'>
  readonly writers: Prisma.FieldRef<"MediaShow", 'String'>
  readonly actors: Prisma.FieldRef<"MediaShow", 'String'>
  readonly countries: Prisma.FieldRef<"MediaShow", 'String'>
  readonly libraryId: Prisma.FieldRef<"MediaShow", 'String'>
  readonly createdAt: Prisma.FieldRef<"MediaShow", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"MediaShow", 'DateTime'>
}
    

// Custom InputTypes
/**
 * MediaShow findUnique
 */
export type MediaShowFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MediaShow
   */
  select?: Prisma.MediaShowSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MediaShow
   */
  omit?: Prisma.MediaShowOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MediaShowInclude<ExtArgs> | null
  /**
   * Filter, which MediaShow to fetch.
   */
  where: Prisma.MediaShowWhereUniqueInput
}

/**
 * MediaShow findUniqueOrThrow
 */
export type MediaShowFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MediaShow
   */
  select?: Prisma.MediaShowSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MediaShow
   */
  omit?: Prisma.MediaShowOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MediaShowInclude<ExtArgs> | null
  /**
   * Filter, which MediaShow to fetch.
   */
  where: Prisma.MediaShowWhereUniqueInput
}

/**
 * MediaShow findFirst
 */
export type MediaShowFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MediaShow
   */
  select?: Prisma.MediaShowSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MediaShow
   */
  omit?: Prisma.MediaShowOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MediaShowInclude<ExtArgs> | null
  /**
   * Filter, which MediaShow to fetch.
   */
  where?: Prisma.MediaShowWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MediaShows to fetch.
   */
  orderBy?: Prisma.MediaShowOrderByWithRelationInput | Prisma.MediaShowOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for MediaShows.
   */
  cursor?: Prisma.MediaShowWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MediaShows from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MediaShows.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of MediaShows.
   */
  distinct?: Prisma.MediaShowScalarFieldEnum | Prisma.MediaShowScalarFieldEnum[]
}

/**
 * MediaShow findFirstOrThrow
 */
export type MediaShowFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MediaShow
   */
  select?: Prisma.MediaShowSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MediaShow
   */
  omit?: Prisma.MediaShowOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MediaShowInclude<ExtArgs> | null
  /**
   * Filter, which MediaShow to fetch.
   */
  where?: Prisma.MediaShowWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MediaShows to fetch.
   */
  orderBy?: Prisma.MediaShowOrderByWithRelationInput | Prisma.MediaShowOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for MediaShows.
   */
  cursor?: Prisma.MediaShowWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MediaShows from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MediaShows.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of MediaShows.
   */
  distinct?: Prisma.MediaShowScalarFieldEnum | Prisma.MediaShowScalarFieldEnum[]
}

/**
 * MediaShow findMany
 */
export type MediaShowFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MediaShow
   */
  select?: Prisma.MediaShowSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MediaShow
   */
  omit?: Prisma.MediaShowOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MediaShowInclude<ExtArgs> | null
  /**
   * Filter, which MediaShows to fetch.
   */
  where?: Prisma.MediaShowWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MediaShows to fetch.
   */
  orderBy?: Prisma.MediaShowOrderByWithRelationInput | Prisma.MediaShowOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing MediaShows.
   */
  cursor?: Prisma.MediaShowWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MediaShows from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MediaShows.
   */
  skip?: number
  distinct?: Prisma.MediaShowScalarFieldEnum | Prisma.MediaShowScalarFieldEnum[]
}

/**
 * MediaShow create
 */
export type MediaShowCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MediaShow
   */
  select?: Prisma.MediaShowSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MediaShow
   */
  omit?: Prisma.MediaShowOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MediaShowInclude<ExtArgs> | null
  /**
   * The data needed to create a MediaShow.
   */
  data: Prisma.XOR<Prisma.MediaShowCreateInput, Prisma.MediaShowUncheckedCreateInput>
}

/**
 * MediaShow createMany
 */
export type MediaShowCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many MediaShows.
   */
  data: Prisma.MediaShowCreateManyInput | Prisma.MediaShowCreateManyInput[]
}

/**
 * MediaShow createManyAndReturn
 */
export type MediaShowCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MediaShow
   */
  select?: Prisma.MediaShowSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the MediaShow
   */
  omit?: Prisma.MediaShowOmit<ExtArgs> | null
  /**
   * The data used to create many MediaShows.
   */
  data: Prisma.MediaShowCreateManyInput | Prisma.MediaShowCreateManyInput[]
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MediaShowIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * MediaShow update
 */
export type MediaShowUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MediaShow
   */
  select?: Prisma.MediaShowSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MediaShow
   */
  omit?: Prisma.MediaShowOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MediaShowInclude<ExtArgs> | null
  /**
   * The data needed to update a MediaShow.
   */
  data: Prisma.XOR<Prisma.MediaShowUpdateInput, Prisma.MediaShowUncheckedUpdateInput>
  /**
   * Choose, which MediaShow to update.
   */
  where: Prisma.MediaShowWhereUniqueInput
}

/**
 * MediaShow updateMany
 */
export type MediaShowUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update MediaShows.
   */
  data: Prisma.XOR<Prisma.MediaShowUpdateManyMutationInput, Prisma.MediaShowUncheckedUpdateManyInput>
  /**
   * Filter which MediaShows to update
   */
  where?: Prisma.MediaShowWhereInput
  /**
   * Limit how many MediaShows to update.
   */
  limit?: number
}

/**
 * MediaShow updateManyAndReturn
 */
export type MediaShowUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MediaShow
   */
  select?: Prisma.MediaShowSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the MediaShow
   */
  omit?: Prisma.MediaShowOmit<ExtArgs> | null
  /**
   * The data used to update MediaShows.
   */
  data: Prisma.XOR<Prisma.MediaShowUpdateManyMutationInput, Prisma.MediaShowUncheckedUpdateManyInput>
  /**
   * Filter which MediaShows to update
   */
  where?: Prisma.MediaShowWhereInput
  /**
   * Limit how many MediaShows to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MediaShowIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * MediaShow upsert
 */
export type MediaShowUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MediaShow
   */
  select?: Prisma.MediaShowSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MediaShow
   */
  omit?: Prisma.MediaShowOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MediaShowInclude<ExtArgs> | null
  /**
   * The filter to search for the MediaShow to update in case it exists.
   */
  where: Prisma.MediaShowWhereUniqueInput
  /**
   * In case the MediaShow found by the `where` argument doesn't exist, create a new MediaShow with this data.
   */
  create: Prisma.XOR<Prisma.MediaShowCreateInput, Prisma.MediaShowUncheckedCreateInput>
  /**
   * In case the MediaShow was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.MediaShowUpdateInput, Prisma.MediaShowUncheckedUpdateInput>
}

/**
 * MediaShow delete
 */
export type MediaShowDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MediaShow
   */
  select?: Prisma.MediaShowSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MediaShow
   */
  omit?: Prisma.MediaShowOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MediaShowInclude<ExtArgs> | null
  /**
   * Filter which MediaShow to delete.
   */
  where: Prisma.MediaShowWhereUniqueInput
}

/**
 * MediaShow deleteMany
 */
export type MediaShowDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which MediaShows to delete
   */
  where?: Prisma.MediaShowWhereInput
  /**
   * Limit how many MediaShows to delete.
   */
  limit?: number
}

/**
 * MediaShow.episodes
 */
export type MediaShow$episodesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MediaEpisode
   */
  select?: Prisma.MediaEpisodeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MediaEpisode
   */
  omit?: Prisma.MediaEpisodeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MediaEpisodeInclude<ExtArgs> | null
  where?: Prisma.MediaEpisodeWhereInput
  orderBy?: Prisma.MediaEpisodeOrderByWithRelationInput | Prisma.MediaEpisodeOrderByWithRelationInput[]
  cursor?: Prisma.MediaEpisodeWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.MediaEpisodeScalarFieldEnum | Prisma.MediaEpisodeScalarFieldEnum[]
}

/**
 * MediaShow.channelShows
 */
export type MediaShow$channelShowsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChannelShow
   */
  select?: Prisma.ChannelShowSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ChannelShow
   */
  omit?: Prisma.ChannelShowOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChannelShowInclude<ExtArgs> | null
  where?: Prisma.ChannelShowWhereInput
  orderBy?: Prisma.ChannelShowOrderByWithRelationInput | Prisma.ChannelShowOrderByWithRelationInput[]
  cursor?: Prisma.ChannelShowWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.ChannelShowScalarFieldEnum | Prisma.ChannelShowScalarFieldEnum[]
}

/**
 * MediaShow without action
 */
export type MediaShowDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MediaShow
   */
  select?: Prisma.MediaShowSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MediaShow
   */
  omit?: Prisma.MediaShowOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MediaShowInclude<ExtArgs> | null
}
