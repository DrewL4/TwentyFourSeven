
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `Settings` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Settings
 * 
 */
export type SettingsModel = runtime.Types.Result.DefaultSelection<Prisma.$SettingsPayload>

export type AggregateSettings = {
  _count: SettingsCountAggregateOutputType | null
  _avg: SettingsAvgAggregateOutputType | null
  _sum: SettingsSumAggregateOutputType | null
  _min: SettingsMinAggregateOutputType | null
  _max: SettingsMaxAggregateOutputType | null
}

export type SettingsAvgAggregateOutputType = {
  port: number | null
  concurrentStreams: number | null
  hdhrTunerCount: number | null
  guideDays: number | null
}

export type SettingsSumAggregateOutputType = {
  port: number | null
  concurrentStreams: number | null
  hdhrTunerCount: number | null
  guideDays: number | null
}

export type SettingsMinAggregateOutputType = {
  id: string | null
  port: number | null
  ffmpegPath: string | null
  concurrentStreams: number | null
  hdhrActive: boolean | null
  hdhrDeviceId: string | null
  hdhrFriendlyName: string | null
  hdhrTunerCount: number | null
  guideDays: number | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type SettingsMaxAggregateOutputType = {
  id: string | null
  port: number | null
  ffmpegPath: string | null
  concurrentStreams: number | null
  hdhrActive: boolean | null
  hdhrDeviceId: string | null
  hdhrFriendlyName: string | null
  hdhrTunerCount: number | null
  guideDays: number | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type SettingsCountAggregateOutputType = {
  id: number
  port: number
  ffmpegPath: number
  concurrentStreams: number
  hdhrActive: number
  hdhrDeviceId: number
  hdhrFriendlyName: number
  hdhrTunerCount: number
  guideDays: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type SettingsAvgAggregateInputType = {
  port?: true
  concurrentStreams?: true
  hdhrTunerCount?: true
  guideDays?: true
}

export type SettingsSumAggregateInputType = {
  port?: true
  concurrentStreams?: true
  hdhrTunerCount?: true
  guideDays?: true
}

export type SettingsMinAggregateInputType = {
  id?: true
  port?: true
  ffmpegPath?: true
  concurrentStreams?: true
  hdhrActive?: true
  hdhrDeviceId?: true
  hdhrFriendlyName?: true
  hdhrTunerCount?: true
  guideDays?: true
  createdAt?: true
  updatedAt?: true
}

export type SettingsMaxAggregateInputType = {
  id?: true
  port?: true
  ffmpegPath?: true
  concurrentStreams?: true
  hdhrActive?: true
  hdhrDeviceId?: true
  hdhrFriendlyName?: true
  hdhrTunerCount?: true
  guideDays?: true
  createdAt?: true
  updatedAt?: true
}

export type SettingsCountAggregateInputType = {
  id?: true
  port?: true
  ffmpegPath?: true
  concurrentStreams?: true
  hdhrActive?: true
  hdhrDeviceId?: true
  hdhrFriendlyName?: true
  hdhrTunerCount?: true
  guideDays?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type SettingsAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Settings to aggregate.
   */
  where?: Prisma.SettingsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Settings to fetch.
   */
  orderBy?: Prisma.SettingsOrderByWithRelationInput | Prisma.SettingsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.SettingsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Settings from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Settings.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Settings
  **/
  _count?: true | SettingsCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: SettingsAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: SettingsSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: SettingsMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: SettingsMaxAggregateInputType
}

export type GetSettingsAggregateType<T extends SettingsAggregateArgs> = {
      [P in keyof T & keyof AggregateSettings]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateSettings[P]>
    : Prisma.GetScalarType<T[P], AggregateSettings[P]>
}




export type SettingsGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.SettingsWhereInput
  orderBy?: Prisma.SettingsOrderByWithAggregationInput | Prisma.SettingsOrderByWithAggregationInput[]
  by: Prisma.SettingsScalarFieldEnum[] | Prisma.SettingsScalarFieldEnum
  having?: Prisma.SettingsScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: SettingsCountAggregateInputType | true
  _avg?: SettingsAvgAggregateInputType
  _sum?: SettingsSumAggregateInputType
  _min?: SettingsMinAggregateInputType
  _max?: SettingsMaxAggregateInputType
}

export type SettingsGroupByOutputType = {
  id: string
  port: number
  ffmpegPath: string
  concurrentStreams: number
  hdhrActive: boolean
  hdhrDeviceId: string
  hdhrFriendlyName: string
  hdhrTunerCount: number
  guideDays: number
  createdAt: Date
  updatedAt: Date
  _count: SettingsCountAggregateOutputType | null
  _avg: SettingsAvgAggregateOutputType | null
  _sum: SettingsSumAggregateOutputType | null
  _min: SettingsMinAggregateOutputType | null
  _max: SettingsMaxAggregateOutputType | null
}

type GetSettingsGroupByPayload<T extends SettingsGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<SettingsGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof SettingsGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], SettingsGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], SettingsGroupByOutputType[P]>
      }
    >
  > 



export type SettingsWhereInput = {
  AND?: Prisma.SettingsWhereInput | Prisma.SettingsWhereInput[]
  OR?: Prisma.SettingsWhereInput[]
  NOT?: Prisma.SettingsWhereInput | Prisma.SettingsWhereInput[]
  id?: Prisma.StringFilter<"Settings"> | string
  port?: Prisma.IntFilter<"Settings"> | number
  ffmpegPath?: Prisma.StringFilter<"Settings"> | string
  concurrentStreams?: Prisma.IntFilter<"Settings"> | number
  hdhrActive?: Prisma.BoolFilter<"Settings"> | boolean
  hdhrDeviceId?: Prisma.StringFilter<"Settings"> | string
  hdhrFriendlyName?: Prisma.StringFilter<"Settings"> | string
  hdhrTunerCount?: Prisma.IntFilter<"Settings"> | number
  guideDays?: Prisma.IntFilter<"Settings"> | number
  createdAt?: Prisma.DateTimeFilter<"Settings"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Settings"> | Date | string
  ffmpegSettings?: Prisma.XOR<Prisma.FfmpegSettingsNullableScalarRelationFilter, Prisma.FfmpegSettingsWhereInput> | null
  plexSettings?: Prisma.XOR<Prisma.PlexSettingsNullableScalarRelationFilter, Prisma.PlexSettingsWhereInput> | null
}

export type SettingsOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  port?: Prisma.SortOrder
  ffmpegPath?: Prisma.SortOrder
  concurrentStreams?: Prisma.SortOrder
  hdhrActive?: Prisma.SortOrder
  hdhrDeviceId?: Prisma.SortOrder
  hdhrFriendlyName?: Prisma.SortOrder
  hdhrTunerCount?: Prisma.SortOrder
  guideDays?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  ffmpegSettings?: Prisma.FfmpegSettingsOrderByWithRelationInput
  plexSettings?: Prisma.PlexSettingsOrderByWithRelationInput
}

export type SettingsWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.SettingsWhereInput | Prisma.SettingsWhereInput[]
  OR?: Prisma.SettingsWhereInput[]
  NOT?: Prisma.SettingsWhereInput | Prisma.SettingsWhereInput[]
  port?: Prisma.IntFilter<"Settings"> | number
  ffmpegPath?: Prisma.StringFilter<"Settings"> | string
  concurrentStreams?: Prisma.IntFilter<"Settings"> | number
  hdhrActive?: Prisma.BoolFilter<"Settings"> | boolean
  hdhrDeviceId?: Prisma.StringFilter<"Settings"> | string
  hdhrFriendlyName?: Prisma.StringFilter<"Settings"> | string
  hdhrTunerCount?: Prisma.IntFilter<"Settings"> | number
  guideDays?: Prisma.IntFilter<"Settings"> | number
  createdAt?: Prisma.DateTimeFilter<"Settings"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Settings"> | Date | string
  ffmpegSettings?: Prisma.XOR<Prisma.FfmpegSettingsNullableScalarRelationFilter, Prisma.FfmpegSettingsWhereInput> | null
  plexSettings?: Prisma.XOR<Prisma.PlexSettingsNullableScalarRelationFilter, Prisma.PlexSettingsWhereInput> | null
}, "id">

export type SettingsOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  port?: Prisma.SortOrder
  ffmpegPath?: Prisma.SortOrder
  concurrentStreams?: Prisma.SortOrder
  hdhrActive?: Prisma.SortOrder
  hdhrDeviceId?: Prisma.SortOrder
  hdhrFriendlyName?: Prisma.SortOrder
  hdhrTunerCount?: Prisma.SortOrder
  guideDays?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.SettingsCountOrderByAggregateInput
  _avg?: Prisma.SettingsAvgOrderByAggregateInput
  _max?: Prisma.SettingsMaxOrderByAggregateInput
  _min?: Prisma.SettingsMinOrderByAggregateInput
  _sum?: Prisma.SettingsSumOrderByAggregateInput
}

export type SettingsScalarWhereWithAggregatesInput = {
  AND?: Prisma.SettingsScalarWhereWithAggregatesInput | Prisma.SettingsScalarWhereWithAggregatesInput[]
  OR?: Prisma.SettingsScalarWhereWithAggregatesInput[]
  NOT?: Prisma.SettingsScalarWhereWithAggregatesInput | Prisma.SettingsScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Settings"> | string
  port?: Prisma.IntWithAggregatesFilter<"Settings"> | number
  ffmpegPath?: Prisma.StringWithAggregatesFilter<"Settings"> | string
  concurrentStreams?: Prisma.IntWithAggregatesFilter<"Settings"> | number
  hdhrActive?: Prisma.BoolWithAggregatesFilter<"Settings"> | boolean
  hdhrDeviceId?: Prisma.StringWithAggregatesFilter<"Settings"> | string
  hdhrFriendlyName?: Prisma.StringWithAggregatesFilter<"Settings"> | string
  hdhrTunerCount?: Prisma.IntWithAggregatesFilter<"Settings"> | number
  guideDays?: Prisma.IntWithAggregatesFilter<"Settings"> | number
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Settings"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Settings"> | Date | string
}

export type SettingsCreateInput = {
  id?: string
  port?: number
  ffmpegPath?: string
  concurrentStreams?: number
  hdhrActive?: boolean
  hdhrDeviceId?: string
  hdhrFriendlyName?: string
  hdhrTunerCount?: number
  guideDays?: number
  createdAt?: Date | string
  updatedAt?: Date | string
  ffmpegSettings?: Prisma.FfmpegSettingsCreateNestedOneWithoutSettingsInput
  plexSettings?: Prisma.PlexSettingsCreateNestedOneWithoutSettingsInput
}

export type SettingsUncheckedCreateInput = {
  id?: string
  port?: number
  ffmpegPath?: string
  concurrentStreams?: number
  hdhrActive?: boolean
  hdhrDeviceId?: string
  hdhrFriendlyName?: string
  hdhrTunerCount?: number
  guideDays?: number
  createdAt?: Date | string
  updatedAt?: Date | string
  ffmpegSettings?: Prisma.FfmpegSettingsUncheckedCreateNestedOneWithoutSettingsInput
  plexSettings?: Prisma.PlexSettingsUncheckedCreateNestedOneWithoutSettingsInput
}

export type SettingsUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  port?: Prisma.IntFieldUpdateOperationsInput | number
  ffmpegPath?: Prisma.StringFieldUpdateOperationsInput | string
  concurrentStreams?: Prisma.IntFieldUpdateOperationsInput | number
  hdhrActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  hdhrDeviceId?: Prisma.StringFieldUpdateOperationsInput | string
  hdhrFriendlyName?: Prisma.StringFieldUpdateOperationsInput | string
  hdhrTunerCount?: Prisma.IntFieldUpdateOperationsInput | number
  guideDays?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  ffmpegSettings?: Prisma.FfmpegSettingsUpdateOneWithoutSettingsNestedInput
  plexSettings?: Prisma.PlexSettingsUpdateOneWithoutSettingsNestedInput
}

export type SettingsUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  port?: Prisma.IntFieldUpdateOperationsInput | number
  ffmpegPath?: Prisma.StringFieldUpdateOperationsInput | string
  concurrentStreams?: Prisma.IntFieldUpdateOperationsInput | number
  hdhrActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  hdhrDeviceId?: Prisma.StringFieldUpdateOperationsInput | string
  hdhrFriendlyName?: Prisma.StringFieldUpdateOperationsInput | string
  hdhrTunerCount?: Prisma.IntFieldUpdateOperationsInput | number
  guideDays?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  ffmpegSettings?: Prisma.FfmpegSettingsUncheckedUpdateOneWithoutSettingsNestedInput
  plexSettings?: Prisma.PlexSettingsUncheckedUpdateOneWithoutSettingsNestedInput
}

export type SettingsCreateManyInput = {
  id?: string
  port?: number
  ffmpegPath?: string
  concurrentStreams?: number
  hdhrActive?: boolean
  hdhrDeviceId?: string
  hdhrFriendlyName?: string
  hdhrTunerCount?: number
  guideDays?: number
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type SettingsUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  port?: Prisma.IntFieldUpdateOperationsInput | number
  ffmpegPath?: Prisma.StringFieldUpdateOperationsInput | string
  concurrentStreams?: Prisma.IntFieldUpdateOperationsInput | number
  hdhrActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  hdhrDeviceId?: Prisma.StringFieldUpdateOperationsInput | string
  hdhrFriendlyName?: Prisma.StringFieldUpdateOperationsInput | string
  hdhrTunerCount?: Prisma.IntFieldUpdateOperationsInput | number
  guideDays?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type SettingsUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  port?: Prisma.IntFieldUpdateOperationsInput | number
  ffmpegPath?: Prisma.StringFieldUpdateOperationsInput | string
  concurrentStreams?: Prisma.IntFieldUpdateOperationsInput | number
  hdhrActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  hdhrDeviceId?: Prisma.StringFieldUpdateOperationsInput | string
  hdhrFriendlyName?: Prisma.StringFieldUpdateOperationsInput | string
  hdhrTunerCount?: Prisma.IntFieldUpdateOperationsInput | number
  guideDays?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type SettingsCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  port?: Prisma.SortOrder
  ffmpegPath?: Prisma.SortOrder
  concurrentStreams?: Prisma.SortOrder
  hdhrActive?: Prisma.SortOrder
  hdhrDeviceId?: Prisma.SortOrder
  hdhrFriendlyName?: Prisma.SortOrder
  hdhrTunerCount?: Prisma.SortOrder
  guideDays?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type SettingsAvgOrderByAggregateInput = {
  port?: Prisma.SortOrder
  concurrentStreams?: Prisma.SortOrder
  hdhrTunerCount?: Prisma.SortOrder
  guideDays?: Prisma.SortOrder
}

export type SettingsMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  port?: Prisma.SortOrder
  ffmpegPath?: Prisma.SortOrder
  concurrentStreams?: Prisma.SortOrder
  hdhrActive?: Prisma.SortOrder
  hdhrDeviceId?: Prisma.SortOrder
  hdhrFriendlyName?: Prisma.SortOrder
  hdhrTunerCount?: Prisma.SortOrder
  guideDays?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type SettingsMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  port?: Prisma.SortOrder
  ffmpegPath?: Prisma.SortOrder
  concurrentStreams?: Prisma.SortOrder
  hdhrActive?: Prisma.SortOrder
  hdhrDeviceId?: Prisma.SortOrder
  hdhrFriendlyName?: Prisma.SortOrder
  hdhrTunerCount?: Prisma.SortOrder
  guideDays?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type SettingsSumOrderByAggregateInput = {
  port?: Prisma.SortOrder
  concurrentStreams?: Prisma.SortOrder
  hdhrTunerCount?: Prisma.SortOrder
  guideDays?: Prisma.SortOrder
}

export type SettingsScalarRelationFilter = {
  is?: Prisma.SettingsWhereInput
  isNot?: Prisma.SettingsWhereInput
}

export type SettingsCreateNestedOneWithoutFfmpegSettingsInput = {
  create?: Prisma.XOR<Prisma.SettingsCreateWithoutFfmpegSettingsInput, Prisma.SettingsUncheckedCreateWithoutFfmpegSettingsInput>
  connectOrCreate?: Prisma.SettingsCreateOrConnectWithoutFfmpegSettingsInput
  connect?: Prisma.SettingsWhereUniqueInput
}

export type SettingsUpdateOneRequiredWithoutFfmpegSettingsNestedInput = {
  create?: Prisma.XOR<Prisma.SettingsCreateWithoutFfmpegSettingsInput, Prisma.SettingsUncheckedCreateWithoutFfmpegSettingsInput>
  connectOrCreate?: Prisma.SettingsCreateOrConnectWithoutFfmpegSettingsInput
  upsert?: Prisma.SettingsUpsertWithoutFfmpegSettingsInput
  connect?: Prisma.SettingsWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.SettingsUpdateToOneWithWhereWithoutFfmpegSettingsInput, Prisma.SettingsUpdateWithoutFfmpegSettingsInput>, Prisma.SettingsUncheckedUpdateWithoutFfmpegSettingsInput>
}

export type SettingsCreateNestedOneWithoutPlexSettingsInput = {
  create?: Prisma.XOR<Prisma.SettingsCreateWithoutPlexSettingsInput, Prisma.SettingsUncheckedCreateWithoutPlexSettingsInput>
  connectOrCreate?: Prisma.SettingsCreateOrConnectWithoutPlexSettingsInput
  connect?: Prisma.SettingsWhereUniqueInput
}

export type SettingsUpdateOneRequiredWithoutPlexSettingsNestedInput = {
  create?: Prisma.XOR<Prisma.SettingsCreateWithoutPlexSettingsInput, Prisma.SettingsUncheckedCreateWithoutPlexSettingsInput>
  connectOrCreate?: Prisma.SettingsCreateOrConnectWithoutPlexSettingsInput
  upsert?: Prisma.SettingsUpsertWithoutPlexSettingsInput
  connect?: Prisma.SettingsWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.SettingsUpdateToOneWithWhereWithoutPlexSettingsInput, Prisma.SettingsUpdateWithoutPlexSettingsInput>, Prisma.SettingsUncheckedUpdateWithoutPlexSettingsInput>
}

export type SettingsCreateWithoutFfmpegSettingsInput = {
  id?: string
  port?: number
  ffmpegPath?: string
  concurrentStreams?: number
  hdhrActive?: boolean
  hdhrDeviceId?: string
  hdhrFriendlyName?: string
  hdhrTunerCount?: number
  guideDays?: number
  createdAt?: Date | string
  updatedAt?: Date | string
  plexSettings?: Prisma.PlexSettingsCreateNestedOneWithoutSettingsInput
}

export type SettingsUncheckedCreateWithoutFfmpegSettingsInput = {
  id?: string
  port?: number
  ffmpegPath?: string
  concurrentStreams?: number
  hdhrActive?: boolean
  hdhrDeviceId?: string
  hdhrFriendlyName?: string
  hdhrTunerCount?: number
  guideDays?: number
  createdAt?: Date | string
  updatedAt?: Date | string
  plexSettings?: Prisma.PlexSettingsUncheckedCreateNestedOneWithoutSettingsInput
}

export type SettingsCreateOrConnectWithoutFfmpegSettingsInput = {
  where: Prisma.SettingsWhereUniqueInput
  create: Prisma.XOR<Prisma.SettingsCreateWithoutFfmpegSettingsInput, Prisma.SettingsUncheckedCreateWithoutFfmpegSettingsInput>
}

export type SettingsUpsertWithoutFfmpegSettingsInput = {
  update: Prisma.XOR<Prisma.SettingsUpdateWithoutFfmpegSettingsInput, Prisma.SettingsUncheckedUpdateWithoutFfmpegSettingsInput>
  create: Prisma.XOR<Prisma.SettingsCreateWithoutFfmpegSettingsInput, Prisma.SettingsUncheckedCreateWithoutFfmpegSettingsInput>
  where?: Prisma.SettingsWhereInput
}

export type SettingsUpdateToOneWithWhereWithoutFfmpegSettingsInput = {
  where?: Prisma.SettingsWhereInput
  data: Prisma.XOR<Prisma.SettingsUpdateWithoutFfmpegSettingsInput, Prisma.SettingsUncheckedUpdateWithoutFfmpegSettingsInput>
}

export type SettingsUpdateWithoutFfmpegSettingsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  port?: Prisma.IntFieldUpdateOperationsInput | number
  ffmpegPath?: Prisma.StringFieldUpdateOperationsInput | string
  concurrentStreams?: Prisma.IntFieldUpdateOperationsInput | number
  hdhrActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  hdhrDeviceId?: Prisma.StringFieldUpdateOperationsInput | string
  hdhrFriendlyName?: Prisma.StringFieldUpdateOperationsInput | string
  hdhrTunerCount?: Prisma.IntFieldUpdateOperationsInput | number
  guideDays?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  plexSettings?: Prisma.PlexSettingsUpdateOneWithoutSettingsNestedInput
}

export type SettingsUncheckedUpdateWithoutFfmpegSettingsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  port?: Prisma.IntFieldUpdateOperationsInput | number
  ffmpegPath?: Prisma.StringFieldUpdateOperationsInput | string
  concurrentStreams?: Prisma.IntFieldUpdateOperationsInput | number
  hdhrActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  hdhrDeviceId?: Prisma.StringFieldUpdateOperationsInput | string
  hdhrFriendlyName?: Prisma.StringFieldUpdateOperationsInput | string
  hdhrTunerCount?: Prisma.IntFieldUpdateOperationsInput | number
  guideDays?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  plexSettings?: Prisma.PlexSettingsUncheckedUpdateOneWithoutSettingsNestedInput
}

export type SettingsCreateWithoutPlexSettingsInput = {
  id?: string
  port?: number
  ffmpegPath?: string
  concurrentStreams?: number
  hdhrActive?: boolean
  hdhrDeviceId?: string
  hdhrFriendlyName?: string
  hdhrTunerCount?: number
  guideDays?: number
  createdAt?: Date | string
  updatedAt?: Date | string
  ffmpegSettings?: Prisma.FfmpegSettingsCreateNestedOneWithoutSettingsInput
}

export type SettingsUncheckedCreateWithoutPlexSettingsInput = {
  id?: string
  port?: number
  ffmpegPath?: string
  concurrentStreams?: number
  hdhrActive?: boolean
  hdhrDeviceId?: string
  hdhrFriendlyName?: string
  hdhrTunerCount?: number
  guideDays?: number
  createdAt?: Date | string
  updatedAt?: Date | string
  ffmpegSettings?: Prisma.FfmpegSettingsUncheckedCreateNestedOneWithoutSettingsInput
}

export type SettingsCreateOrConnectWithoutPlexSettingsInput = {
  where: Prisma.SettingsWhereUniqueInput
  create: Prisma.XOR<Prisma.SettingsCreateWithoutPlexSettingsInput, Prisma.SettingsUncheckedCreateWithoutPlexSettingsInput>
}

export type SettingsUpsertWithoutPlexSettingsInput = {
  update: Prisma.XOR<Prisma.SettingsUpdateWithoutPlexSettingsInput, Prisma.SettingsUncheckedUpdateWithoutPlexSettingsInput>
  create: Prisma.XOR<Prisma.SettingsCreateWithoutPlexSettingsInput, Prisma.SettingsUncheckedCreateWithoutPlexSettingsInput>
  where?: Prisma.SettingsWhereInput
}

export type SettingsUpdateToOneWithWhereWithoutPlexSettingsInput = {
  where?: Prisma.SettingsWhereInput
  data: Prisma.XOR<Prisma.SettingsUpdateWithoutPlexSettingsInput, Prisma.SettingsUncheckedUpdateWithoutPlexSettingsInput>
}

export type SettingsUpdateWithoutPlexSettingsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  port?: Prisma.IntFieldUpdateOperationsInput | number
  ffmpegPath?: Prisma.StringFieldUpdateOperationsInput | string
  concurrentStreams?: Prisma.IntFieldUpdateOperationsInput | number
  hdhrActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  hdhrDeviceId?: Prisma.StringFieldUpdateOperationsInput | string
  hdhrFriendlyName?: Prisma.StringFieldUpdateOperationsInput | string
  hdhrTunerCount?: Prisma.IntFieldUpdateOperationsInput | number
  guideDays?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  ffmpegSettings?: Prisma.FfmpegSettingsUpdateOneWithoutSettingsNestedInput
}

export type SettingsUncheckedUpdateWithoutPlexSettingsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  port?: Prisma.IntFieldUpdateOperationsInput | number
  ffmpegPath?: Prisma.StringFieldUpdateOperationsInput | string
  concurrentStreams?: Prisma.IntFieldUpdateOperationsInput | number
  hdhrActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  hdhrDeviceId?: Prisma.StringFieldUpdateOperationsInput | string
  hdhrFriendlyName?: Prisma.StringFieldUpdateOperationsInput | string
  hdhrTunerCount?: Prisma.IntFieldUpdateOperationsInput | number
  guideDays?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  ffmpegSettings?: Prisma.FfmpegSettingsUncheckedUpdateOneWithoutSettingsNestedInput
}



export type SettingsSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  port?: boolean
  ffmpegPath?: boolean
  concurrentStreams?: boolean
  hdhrActive?: boolean
  hdhrDeviceId?: boolean
  hdhrFriendlyName?: boolean
  hdhrTunerCount?: boolean
  guideDays?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  ffmpegSettings?: boolean | Prisma.Settings$ffmpegSettingsArgs<ExtArgs>
  plexSettings?: boolean | Prisma.Settings$plexSettingsArgs<ExtArgs>
}, ExtArgs["result"]["settings"]>

export type SettingsSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  port?: boolean
  ffmpegPath?: boolean
  concurrentStreams?: boolean
  hdhrActive?: boolean
  hdhrDeviceId?: boolean
  hdhrFriendlyName?: boolean
  hdhrTunerCount?: boolean
  guideDays?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["settings"]>

export type SettingsSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  port?: boolean
  ffmpegPath?: boolean
  concurrentStreams?: boolean
  hdhrActive?: boolean
  hdhrDeviceId?: boolean
  hdhrFriendlyName?: boolean
  hdhrTunerCount?: boolean
  guideDays?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["settings"]>

export type SettingsSelectScalar = {
  id?: boolean
  port?: boolean
  ffmpegPath?: boolean
  concurrentStreams?: boolean
  hdhrActive?: boolean
  hdhrDeviceId?: boolean
  hdhrFriendlyName?: boolean
  hdhrTunerCount?: boolean
  guideDays?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type SettingsOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "port" | "ffmpegPath" | "concurrentStreams" | "hdhrActive" | "hdhrDeviceId" | "hdhrFriendlyName" | "hdhrTunerCount" | "guideDays" | "createdAt" | "updatedAt", ExtArgs["result"]["settings"]>
export type SettingsInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  ffmpegSettings?: boolean | Prisma.Settings$ffmpegSettingsArgs<ExtArgs>
  plexSettings?: boolean | Prisma.Settings$plexSettingsArgs<ExtArgs>
}
export type SettingsIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}
export type SettingsIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}

export type $SettingsPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Settings"
  objects: {
    ffmpegSettings: Prisma.$FfmpegSettingsPayload<ExtArgs> | null
    plexSettings: Prisma.$PlexSettingsPayload<ExtArgs> | null
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    port: number
    ffmpegPath: string
    concurrentStreams: number
    hdhrActive: boolean
    hdhrDeviceId: string
    hdhrFriendlyName: string
    hdhrTunerCount: number
    guideDays: number
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["settings"]>
  composites: {}
}

export type SettingsGetPayload<S extends boolean | null | undefined | SettingsDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$SettingsPayload, S>

export type SettingsCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<SettingsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: SettingsCountAggregateInputType | true
  }

export interface SettingsDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Settings'], meta: { name: 'Settings' } }
  /**
   * Find zero or one Settings that matches the filter.
   * @param {SettingsFindUniqueArgs} args - Arguments to find a Settings
   * @example
   * // Get one Settings
   * const settings = await prisma.settings.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends SettingsFindUniqueArgs>(args: Prisma.SelectSubset<T, SettingsFindUniqueArgs<ExtArgs>>): Prisma.Prisma__SettingsClient<runtime.Types.Result.GetResult<Prisma.$SettingsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Settings that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {SettingsFindUniqueOrThrowArgs} args - Arguments to find a Settings
   * @example
   * // Get one Settings
   * const settings = await prisma.settings.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends SettingsFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, SettingsFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__SettingsClient<runtime.Types.Result.GetResult<Prisma.$SettingsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Settings that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SettingsFindFirstArgs} args - Arguments to find a Settings
   * @example
   * // Get one Settings
   * const settings = await prisma.settings.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends SettingsFindFirstArgs>(args?: Prisma.SelectSubset<T, SettingsFindFirstArgs<ExtArgs>>): Prisma.Prisma__SettingsClient<runtime.Types.Result.GetResult<Prisma.$SettingsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Settings that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SettingsFindFirstOrThrowArgs} args - Arguments to find a Settings
   * @example
   * // Get one Settings
   * const settings = await prisma.settings.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends SettingsFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, SettingsFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__SettingsClient<runtime.Types.Result.GetResult<Prisma.$SettingsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Settings that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SettingsFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Settings
   * const settings = await prisma.settings.findMany()
   * 
   * // Get first 10 Settings
   * const settings = await prisma.settings.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const settingsWithIdOnly = await prisma.settings.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends SettingsFindManyArgs>(args?: Prisma.SelectSubset<T, SettingsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$SettingsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Settings.
   * @param {SettingsCreateArgs} args - Arguments to create a Settings.
   * @example
   * // Create one Settings
   * const Settings = await prisma.settings.create({
   *   data: {
   *     // ... data to create a Settings
   *   }
   * })
   * 
   */
  create<T extends SettingsCreateArgs>(args: Prisma.SelectSubset<T, SettingsCreateArgs<ExtArgs>>): Prisma.Prisma__SettingsClient<runtime.Types.Result.GetResult<Prisma.$SettingsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Settings.
   * @param {SettingsCreateManyArgs} args - Arguments to create many Settings.
   * @example
   * // Create many Settings
   * const settings = await prisma.settings.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends SettingsCreateManyArgs>(args?: Prisma.SelectSubset<T, SettingsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Settings and returns the data saved in the database.
   * @param {SettingsCreateManyAndReturnArgs} args - Arguments to create many Settings.
   * @example
   * // Create many Settings
   * const settings = await prisma.settings.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Settings and only return the `id`
   * const settingsWithIdOnly = await prisma.settings.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends SettingsCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, SettingsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$SettingsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Settings.
   * @param {SettingsDeleteArgs} args - Arguments to delete one Settings.
   * @example
   * // Delete one Settings
   * const Settings = await prisma.settings.delete({
   *   where: {
   *     // ... filter to delete one Settings
   *   }
   * })
   * 
   */
  delete<T extends SettingsDeleteArgs>(args: Prisma.SelectSubset<T, SettingsDeleteArgs<ExtArgs>>): Prisma.Prisma__SettingsClient<runtime.Types.Result.GetResult<Prisma.$SettingsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Settings.
   * @param {SettingsUpdateArgs} args - Arguments to update one Settings.
   * @example
   * // Update one Settings
   * const settings = await prisma.settings.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends SettingsUpdateArgs>(args: Prisma.SelectSubset<T, SettingsUpdateArgs<ExtArgs>>): Prisma.Prisma__SettingsClient<runtime.Types.Result.GetResult<Prisma.$SettingsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Settings.
   * @param {SettingsDeleteManyArgs} args - Arguments to filter Settings to delete.
   * @example
   * // Delete a few Settings
   * const { count } = await prisma.settings.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends SettingsDeleteManyArgs>(args?: Prisma.SelectSubset<T, SettingsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Settings.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SettingsUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Settings
   * const settings = await prisma.settings.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends SettingsUpdateManyArgs>(args: Prisma.SelectSubset<T, SettingsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Settings and returns the data updated in the database.
   * @param {SettingsUpdateManyAndReturnArgs} args - Arguments to update many Settings.
   * @example
   * // Update many Settings
   * const settings = await prisma.settings.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Settings and only return the `id`
   * const settingsWithIdOnly = await prisma.settings.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends SettingsUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, SettingsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$SettingsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Settings.
   * @param {SettingsUpsertArgs} args - Arguments to update or create a Settings.
   * @example
   * // Update or create a Settings
   * const settings = await prisma.settings.upsert({
   *   create: {
   *     // ... data to create a Settings
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Settings we want to update
   *   }
   * })
   */
  upsert<T extends SettingsUpsertArgs>(args: Prisma.SelectSubset<T, SettingsUpsertArgs<ExtArgs>>): Prisma.Prisma__SettingsClient<runtime.Types.Result.GetResult<Prisma.$SettingsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Settings.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SettingsCountArgs} args - Arguments to filter Settings to count.
   * @example
   * // Count the number of Settings
   * const count = await prisma.settings.count({
   *   where: {
   *     // ... the filter for the Settings we want to count
   *   }
   * })
  **/
  count<T extends SettingsCountArgs>(
    args?: Prisma.Subset<T, SettingsCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], SettingsCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Settings.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SettingsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends SettingsAggregateArgs>(args: Prisma.Subset<T, SettingsAggregateArgs>): Prisma.PrismaPromise<GetSettingsAggregateType<T>>

  /**
   * Group by Settings.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SettingsGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends SettingsGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: SettingsGroupByArgs['orderBy'] }
      : { orderBy?: SettingsGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, SettingsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSettingsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Settings model
 */
readonly fields: SettingsFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Settings.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__SettingsClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  ffmpegSettings<T extends Prisma.Settings$ffmpegSettingsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Settings$ffmpegSettingsArgs<ExtArgs>>): Prisma.Prisma__FfmpegSettingsClient<runtime.Types.Result.GetResult<Prisma.$FfmpegSettingsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  plexSettings<T extends Prisma.Settings$plexSettingsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Settings$plexSettingsArgs<ExtArgs>>): Prisma.Prisma__PlexSettingsClient<runtime.Types.Result.GetResult<Prisma.$PlexSettingsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Settings model
 */
export interface SettingsFieldRefs {
  readonly id: Prisma.FieldRef<"Settings", 'String'>
  readonly port: Prisma.FieldRef<"Settings", 'Int'>
  readonly ffmpegPath: Prisma.FieldRef<"Settings", 'String'>
  readonly concurrentStreams: Prisma.FieldRef<"Settings", 'Int'>
  readonly hdhrActive: Prisma.FieldRef<"Settings", 'Boolean'>
  readonly hdhrDeviceId: Prisma.FieldRef<"Settings", 'String'>
  readonly hdhrFriendlyName: Prisma.FieldRef<"Settings", 'String'>
  readonly hdhrTunerCount: Prisma.FieldRef<"Settings", 'Int'>
  readonly guideDays: Prisma.FieldRef<"Settings", 'Int'>
  readonly createdAt: Prisma.FieldRef<"Settings", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Settings", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Settings findUnique
 */
export type SettingsFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Settings
   */
  select?: Prisma.SettingsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Settings
   */
  omit?: Prisma.SettingsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SettingsInclude<ExtArgs> | null
  /**
   * Filter, which Settings to fetch.
   */
  where: Prisma.SettingsWhereUniqueInput
}

/**
 * Settings findUniqueOrThrow
 */
export type SettingsFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Settings
   */
  select?: Prisma.SettingsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Settings
   */
  omit?: Prisma.SettingsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SettingsInclude<ExtArgs> | null
  /**
   * Filter, which Settings to fetch.
   */
  where: Prisma.SettingsWhereUniqueInput
}

/**
 * Settings findFirst
 */
export type SettingsFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Settings
   */
  select?: Prisma.SettingsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Settings
   */
  omit?: Prisma.SettingsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SettingsInclude<ExtArgs> | null
  /**
   * Filter, which Settings to fetch.
   */
  where?: Prisma.SettingsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Settings to fetch.
   */
  orderBy?: Prisma.SettingsOrderByWithRelationInput | Prisma.SettingsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Settings.
   */
  cursor?: Prisma.SettingsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Settings from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Settings.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Settings.
   */
  distinct?: Prisma.SettingsScalarFieldEnum | Prisma.SettingsScalarFieldEnum[]
}

/**
 * Settings findFirstOrThrow
 */
export type SettingsFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Settings
   */
  select?: Prisma.SettingsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Settings
   */
  omit?: Prisma.SettingsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SettingsInclude<ExtArgs> | null
  /**
   * Filter, which Settings to fetch.
   */
  where?: Prisma.SettingsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Settings to fetch.
   */
  orderBy?: Prisma.SettingsOrderByWithRelationInput | Prisma.SettingsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Settings.
   */
  cursor?: Prisma.SettingsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Settings from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Settings.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Settings.
   */
  distinct?: Prisma.SettingsScalarFieldEnum | Prisma.SettingsScalarFieldEnum[]
}

/**
 * Settings findMany
 */
export type SettingsFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Settings
   */
  select?: Prisma.SettingsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Settings
   */
  omit?: Prisma.SettingsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SettingsInclude<ExtArgs> | null
  /**
   * Filter, which Settings to fetch.
   */
  where?: Prisma.SettingsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Settings to fetch.
   */
  orderBy?: Prisma.SettingsOrderByWithRelationInput | Prisma.SettingsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Settings.
   */
  cursor?: Prisma.SettingsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Settings from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Settings.
   */
  skip?: number
  distinct?: Prisma.SettingsScalarFieldEnum | Prisma.SettingsScalarFieldEnum[]
}

/**
 * Settings create
 */
export type SettingsCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Settings
   */
  select?: Prisma.SettingsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Settings
   */
  omit?: Prisma.SettingsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SettingsInclude<ExtArgs> | null
  /**
   * The data needed to create a Settings.
   */
  data: Prisma.XOR<Prisma.SettingsCreateInput, Prisma.SettingsUncheckedCreateInput>
}

/**
 * Settings createMany
 */
export type SettingsCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Settings.
   */
  data: Prisma.SettingsCreateManyInput | Prisma.SettingsCreateManyInput[]
}

/**
 * Settings createManyAndReturn
 */
export type SettingsCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Settings
   */
  select?: Prisma.SettingsSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Settings
   */
  omit?: Prisma.SettingsOmit<ExtArgs> | null
  /**
   * The data used to create many Settings.
   */
  data: Prisma.SettingsCreateManyInput | Prisma.SettingsCreateManyInput[]
}

/**
 * Settings update
 */
export type SettingsUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Settings
   */
  select?: Prisma.SettingsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Settings
   */
  omit?: Prisma.SettingsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SettingsInclude<ExtArgs> | null
  /**
   * The data needed to update a Settings.
   */
  data: Prisma.XOR<Prisma.SettingsUpdateInput, Prisma.SettingsUncheckedUpdateInput>
  /**
   * Choose, which Settings to update.
   */
  where: Prisma.SettingsWhereUniqueInput
}

/**
 * Settings updateMany
 */
export type SettingsUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Settings.
   */
  data: Prisma.XOR<Prisma.SettingsUpdateManyMutationInput, Prisma.SettingsUncheckedUpdateManyInput>
  /**
   * Filter which Settings to update
   */
  where?: Prisma.SettingsWhereInput
  /**
   * Limit how many Settings to update.
   */
  limit?: number
}

/**
 * Settings updateManyAndReturn
 */
export type SettingsUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Settings
   */
  select?: Prisma.SettingsSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Settings
   */
  omit?: Prisma.SettingsOmit<ExtArgs> | null
  /**
   * The data used to update Settings.
   */
  data: Prisma.XOR<Prisma.SettingsUpdateManyMutationInput, Prisma.SettingsUncheckedUpdateManyInput>
  /**
   * Filter which Settings to update
   */
  where?: Prisma.SettingsWhereInput
  /**
   * Limit how many Settings to update.
   */
  limit?: number
}

/**
 * Settings upsert
 */
export type SettingsUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Settings
   */
  select?: Prisma.SettingsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Settings
   */
  omit?: Prisma.SettingsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SettingsInclude<ExtArgs> | null
  /**
   * The filter to search for the Settings to update in case it exists.
   */
  where: Prisma.SettingsWhereUniqueInput
  /**
   * In case the Settings found by the `where` argument doesn't exist, create a new Settings with this data.
   */
  create: Prisma.XOR<Prisma.SettingsCreateInput, Prisma.SettingsUncheckedCreateInput>
  /**
   * In case the Settings was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.SettingsUpdateInput, Prisma.SettingsUncheckedUpdateInput>
}

/**
 * Settings delete
 */
export type SettingsDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Settings
   */
  select?: Prisma.SettingsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Settings
   */
  omit?: Prisma.SettingsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SettingsInclude<ExtArgs> | null
  /**
   * Filter which Settings to delete.
   */
  where: Prisma.SettingsWhereUniqueInput
}

/**
 * Settings deleteMany
 */
export type SettingsDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Settings to delete
   */
  where?: Prisma.SettingsWhereInput
  /**
   * Limit how many Settings to delete.
   */
  limit?: number
}

/**
 * Settings.ffmpegSettings
 */
export type Settings$ffmpegSettingsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FfmpegSettings
   */
  select?: Prisma.FfmpegSettingsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FfmpegSettings
   */
  omit?: Prisma.FfmpegSettingsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FfmpegSettingsInclude<ExtArgs> | null
  where?: Prisma.FfmpegSettingsWhereInput
}

/**
 * Settings.plexSettings
 */
export type Settings$plexSettingsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PlexSettings
   */
  select?: Prisma.PlexSettingsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PlexSettings
   */
  omit?: Prisma.PlexSettingsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PlexSettingsInclude<ExtArgs> | null
  where?: Prisma.PlexSettingsWhereInput
}

/**
 * Settings without action
 */
export type SettingsDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Settings
   */
  select?: Prisma.SettingsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Settings
   */
  omit?: Prisma.SettingsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SettingsInclude<ExtArgs> | null
}
