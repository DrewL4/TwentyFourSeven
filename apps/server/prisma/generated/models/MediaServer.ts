
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `MediaServer` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model MediaServer
 * 
 */
export type MediaServerModel = runtime.Types.Result.DefaultSelection<Prisma.$MediaServerPayload>

export type AggregateMediaServer = {
  _count: MediaServerCountAggregateOutputType | null
  _min: MediaServerMinAggregateOutputType | null
  _max: MediaServerMaxAggregateOutputType | null
}

export type MediaServerMinAggregateOutputType = {
  id: string | null
  name: string | null
  url: string | null
  token: string | null
  type: $Enums.ServerType | null
  active: boolean | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type MediaServerMaxAggregateOutputType = {
  id: string | null
  name: string | null
  url: string | null
  token: string | null
  type: $Enums.ServerType | null
  active: boolean | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type MediaServerCountAggregateOutputType = {
  id: number
  name: number
  url: number
  token: number
  type: number
  active: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type MediaServerMinAggregateInputType = {
  id?: true
  name?: true
  url?: true
  token?: true
  type?: true
  active?: true
  createdAt?: true
  updatedAt?: true
}

export type MediaServerMaxAggregateInputType = {
  id?: true
  name?: true
  url?: true
  token?: true
  type?: true
  active?: true
  createdAt?: true
  updatedAt?: true
}

export type MediaServerCountAggregateInputType = {
  id?: true
  name?: true
  url?: true
  token?: true
  type?: true
  active?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type MediaServerAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which MediaServer to aggregate.
   */
  where?: Prisma.MediaServerWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MediaServers to fetch.
   */
  orderBy?: Prisma.MediaServerOrderByWithRelationInput | Prisma.MediaServerOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.MediaServerWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MediaServers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MediaServers.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned MediaServers
  **/
  _count?: true | MediaServerCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: MediaServerMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: MediaServerMaxAggregateInputType
}

export type GetMediaServerAggregateType<T extends MediaServerAggregateArgs> = {
      [P in keyof T & keyof AggregateMediaServer]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateMediaServer[P]>
    : Prisma.GetScalarType<T[P], AggregateMediaServer[P]>
}




export type MediaServerGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.MediaServerWhereInput
  orderBy?: Prisma.MediaServerOrderByWithAggregationInput | Prisma.MediaServerOrderByWithAggregationInput[]
  by: Prisma.MediaServerScalarFieldEnum[] | Prisma.MediaServerScalarFieldEnum
  having?: Prisma.MediaServerScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: MediaServerCountAggregateInputType | true
  _min?: MediaServerMinAggregateInputType
  _max?: MediaServerMaxAggregateInputType
}

export type MediaServerGroupByOutputType = {
  id: string
  name: string
  url: string
  token: string | null
  type: $Enums.ServerType
  active: boolean
  createdAt: Date
  updatedAt: Date
  _count: MediaServerCountAggregateOutputType | null
  _min: MediaServerMinAggregateOutputType | null
  _max: MediaServerMaxAggregateOutputType | null
}

type GetMediaServerGroupByPayload<T extends MediaServerGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<MediaServerGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof MediaServerGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], MediaServerGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], MediaServerGroupByOutputType[P]>
      }
    >
  > 



export type MediaServerWhereInput = {
  AND?: Prisma.MediaServerWhereInput | Prisma.MediaServerWhereInput[]
  OR?: Prisma.MediaServerWhereInput[]
  NOT?: Prisma.MediaServerWhereInput | Prisma.MediaServerWhereInput[]
  id?: Prisma.StringFilter<"MediaServer"> | string
  name?: Prisma.StringFilter<"MediaServer"> | string
  url?: Prisma.StringFilter<"MediaServer"> | string
  token?: Prisma.StringNullableFilter<"MediaServer"> | string | null
  type?: Prisma.EnumServerTypeFilter<"MediaServer"> | $Enums.ServerType
  active?: Prisma.BoolFilter<"MediaServer"> | boolean
  createdAt?: Prisma.DateTimeFilter<"MediaServer"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"MediaServer"> | Date | string
  libraries?: Prisma.MediaLibraryListRelationFilter
}

export type MediaServerOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  url?: Prisma.SortOrder
  token?: Prisma.SortOrderInput | Prisma.SortOrder
  type?: Prisma.SortOrder
  active?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  libraries?: Prisma.MediaLibraryOrderByRelationAggregateInput
}

export type MediaServerWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.MediaServerWhereInput | Prisma.MediaServerWhereInput[]
  OR?: Prisma.MediaServerWhereInput[]
  NOT?: Prisma.MediaServerWhereInput | Prisma.MediaServerWhereInput[]
  name?: Prisma.StringFilter<"MediaServer"> | string
  url?: Prisma.StringFilter<"MediaServer"> | string
  token?: Prisma.StringNullableFilter<"MediaServer"> | string | null
  type?: Prisma.EnumServerTypeFilter<"MediaServer"> | $Enums.ServerType
  active?: Prisma.BoolFilter<"MediaServer"> | boolean
  createdAt?: Prisma.DateTimeFilter<"MediaServer"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"MediaServer"> | Date | string
  libraries?: Prisma.MediaLibraryListRelationFilter
}, "id">

export type MediaServerOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  url?: Prisma.SortOrder
  token?: Prisma.SortOrderInput | Prisma.SortOrder
  type?: Prisma.SortOrder
  active?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.MediaServerCountOrderByAggregateInput
  _max?: Prisma.MediaServerMaxOrderByAggregateInput
  _min?: Prisma.MediaServerMinOrderByAggregateInput
}

export type MediaServerScalarWhereWithAggregatesInput = {
  AND?: Prisma.MediaServerScalarWhereWithAggregatesInput | Prisma.MediaServerScalarWhereWithAggregatesInput[]
  OR?: Prisma.MediaServerScalarWhereWithAggregatesInput[]
  NOT?: Prisma.MediaServerScalarWhereWithAggregatesInput | Prisma.MediaServerScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"MediaServer"> | string
  name?: Prisma.StringWithAggregatesFilter<"MediaServer"> | string
  url?: Prisma.StringWithAggregatesFilter<"MediaServer"> | string
  token?: Prisma.StringNullableWithAggregatesFilter<"MediaServer"> | string | null
  type?: Prisma.EnumServerTypeWithAggregatesFilter<"MediaServer"> | $Enums.ServerType
  active?: Prisma.BoolWithAggregatesFilter<"MediaServer"> | boolean
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"MediaServer"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"MediaServer"> | Date | string
}

export type MediaServerCreateInput = {
  id?: string
  name: string
  url: string
  token?: string | null
  type?: $Enums.ServerType
  active?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
  libraries?: Prisma.MediaLibraryCreateNestedManyWithoutServerInput
}

export type MediaServerUncheckedCreateInput = {
  id?: string
  name: string
  url: string
  token?: string | null
  type?: $Enums.ServerType
  active?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
  libraries?: Prisma.MediaLibraryUncheckedCreateNestedManyWithoutServerInput
}

export type MediaServerUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  url?: Prisma.StringFieldUpdateOperationsInput | string
  token?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  type?: Prisma.EnumServerTypeFieldUpdateOperationsInput | $Enums.ServerType
  active?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  libraries?: Prisma.MediaLibraryUpdateManyWithoutServerNestedInput
}

export type MediaServerUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  url?: Prisma.StringFieldUpdateOperationsInput | string
  token?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  type?: Prisma.EnumServerTypeFieldUpdateOperationsInput | $Enums.ServerType
  active?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  libraries?: Prisma.MediaLibraryUncheckedUpdateManyWithoutServerNestedInput
}

export type MediaServerCreateManyInput = {
  id?: string
  name: string
  url: string
  token?: string | null
  type?: $Enums.ServerType
  active?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type MediaServerUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  url?: Prisma.StringFieldUpdateOperationsInput | string
  token?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  type?: Prisma.EnumServerTypeFieldUpdateOperationsInput | $Enums.ServerType
  active?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type MediaServerUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  url?: Prisma.StringFieldUpdateOperationsInput | string
  token?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  type?: Prisma.EnumServerTypeFieldUpdateOperationsInput | $Enums.ServerType
  active?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type MediaServerCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  url?: Prisma.SortOrder
  token?: Prisma.SortOrder
  type?: Prisma.SortOrder
  active?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type MediaServerMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  url?: Prisma.SortOrder
  token?: Prisma.SortOrder
  type?: Prisma.SortOrder
  active?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type MediaServerMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  url?: Prisma.SortOrder
  token?: Prisma.SortOrder
  type?: Prisma.SortOrder
  active?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type MediaServerScalarRelationFilter = {
  is?: Prisma.MediaServerWhereInput
  isNot?: Prisma.MediaServerWhereInput
}

export type EnumServerTypeFieldUpdateOperationsInput = {
  set?: $Enums.ServerType
}

export type MediaServerCreateNestedOneWithoutLibrariesInput = {
  create?: Prisma.XOR<Prisma.MediaServerCreateWithoutLibrariesInput, Prisma.MediaServerUncheckedCreateWithoutLibrariesInput>
  connectOrCreate?: Prisma.MediaServerCreateOrConnectWithoutLibrariesInput
  connect?: Prisma.MediaServerWhereUniqueInput
}

export type MediaServerUpdateOneRequiredWithoutLibrariesNestedInput = {
  create?: Prisma.XOR<Prisma.MediaServerCreateWithoutLibrariesInput, Prisma.MediaServerUncheckedCreateWithoutLibrariesInput>
  connectOrCreate?: Prisma.MediaServerCreateOrConnectWithoutLibrariesInput
  upsert?: Prisma.MediaServerUpsertWithoutLibrariesInput
  connect?: Prisma.MediaServerWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.MediaServerUpdateToOneWithWhereWithoutLibrariesInput, Prisma.MediaServerUpdateWithoutLibrariesInput>, Prisma.MediaServerUncheckedUpdateWithoutLibrariesInput>
}

export type MediaServerCreateWithoutLibrariesInput = {
  id?: string
  name: string
  url: string
  token?: string | null
  type?: $Enums.ServerType
  active?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type MediaServerUncheckedCreateWithoutLibrariesInput = {
  id?: string
  name: string
  url: string
  token?: string | null
  type?: $Enums.ServerType
  active?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type MediaServerCreateOrConnectWithoutLibrariesInput = {
  where: Prisma.MediaServerWhereUniqueInput
  create: Prisma.XOR<Prisma.MediaServerCreateWithoutLibrariesInput, Prisma.MediaServerUncheckedCreateWithoutLibrariesInput>
}

export type MediaServerUpsertWithoutLibrariesInput = {
  update: Prisma.XOR<Prisma.MediaServerUpdateWithoutLibrariesInput, Prisma.MediaServerUncheckedUpdateWithoutLibrariesInput>
  create: Prisma.XOR<Prisma.MediaServerCreateWithoutLibrariesInput, Prisma.MediaServerUncheckedCreateWithoutLibrariesInput>
  where?: Prisma.MediaServerWhereInput
}

export type MediaServerUpdateToOneWithWhereWithoutLibrariesInput = {
  where?: Prisma.MediaServerWhereInput
  data: Prisma.XOR<Prisma.MediaServerUpdateWithoutLibrariesInput, Prisma.MediaServerUncheckedUpdateWithoutLibrariesInput>
}

export type MediaServerUpdateWithoutLibrariesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  url?: Prisma.StringFieldUpdateOperationsInput | string
  token?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  type?: Prisma.EnumServerTypeFieldUpdateOperationsInput | $Enums.ServerType
  active?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type MediaServerUncheckedUpdateWithoutLibrariesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  url?: Prisma.StringFieldUpdateOperationsInput | string
  token?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  type?: Prisma.EnumServerTypeFieldUpdateOperationsInput | $Enums.ServerType
  active?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}


/**
 * Count Type MediaServerCountOutputType
 */

export type MediaServerCountOutputType = {
  libraries: number
}

export type MediaServerCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  libraries?: boolean | MediaServerCountOutputTypeCountLibrariesArgs
}

/**
 * MediaServerCountOutputType without action
 */
export type MediaServerCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MediaServerCountOutputType
   */
  select?: Prisma.MediaServerCountOutputTypeSelect<ExtArgs> | null
}

/**
 * MediaServerCountOutputType without action
 */
export type MediaServerCountOutputTypeCountLibrariesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.MediaLibraryWhereInput
}


export type MediaServerSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  url?: boolean
  token?: boolean
  type?: boolean
  active?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  libraries?: boolean | Prisma.MediaServer$librariesArgs<ExtArgs>
  _count?: boolean | Prisma.MediaServerCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["mediaServer"]>

export type MediaServerSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  url?: boolean
  token?: boolean
  type?: boolean
  active?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["mediaServer"]>

export type MediaServerSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  url?: boolean
  token?: boolean
  type?: boolean
  active?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["mediaServer"]>

export type MediaServerSelectScalar = {
  id?: boolean
  name?: boolean
  url?: boolean
  token?: boolean
  type?: boolean
  active?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type MediaServerOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "name" | "url" | "token" | "type" | "active" | "createdAt" | "updatedAt", ExtArgs["result"]["mediaServer"]>
export type MediaServerInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  libraries?: boolean | Prisma.MediaServer$librariesArgs<ExtArgs>
  _count?: boolean | Prisma.MediaServerCountOutputTypeDefaultArgs<ExtArgs>
}
export type MediaServerIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}
export type MediaServerIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}

export type $MediaServerPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "MediaServer"
  objects: {
    libraries: Prisma.$MediaLibraryPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    name: string
    url: string
    token: string | null
    type: $Enums.ServerType
    active: boolean
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["mediaServer"]>
  composites: {}
}

export type MediaServerGetPayload<S extends boolean | null | undefined | MediaServerDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$MediaServerPayload, S>

export type MediaServerCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<MediaServerFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: MediaServerCountAggregateInputType | true
  }

export interface MediaServerDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MediaServer'], meta: { name: 'MediaServer' } }
  /**
   * Find zero or one MediaServer that matches the filter.
   * @param {MediaServerFindUniqueArgs} args - Arguments to find a MediaServer
   * @example
   * // Get one MediaServer
   * const mediaServer = await prisma.mediaServer.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends MediaServerFindUniqueArgs>(args: Prisma.SelectSubset<T, MediaServerFindUniqueArgs<ExtArgs>>): Prisma.Prisma__MediaServerClient<runtime.Types.Result.GetResult<Prisma.$MediaServerPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one MediaServer that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {MediaServerFindUniqueOrThrowArgs} args - Arguments to find a MediaServer
   * @example
   * // Get one MediaServer
   * const mediaServer = await prisma.mediaServer.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends MediaServerFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, MediaServerFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__MediaServerClient<runtime.Types.Result.GetResult<Prisma.$MediaServerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first MediaServer that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MediaServerFindFirstArgs} args - Arguments to find a MediaServer
   * @example
   * // Get one MediaServer
   * const mediaServer = await prisma.mediaServer.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends MediaServerFindFirstArgs>(args?: Prisma.SelectSubset<T, MediaServerFindFirstArgs<ExtArgs>>): Prisma.Prisma__MediaServerClient<runtime.Types.Result.GetResult<Prisma.$MediaServerPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first MediaServer that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MediaServerFindFirstOrThrowArgs} args - Arguments to find a MediaServer
   * @example
   * // Get one MediaServer
   * const mediaServer = await prisma.mediaServer.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends MediaServerFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, MediaServerFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__MediaServerClient<runtime.Types.Result.GetResult<Prisma.$MediaServerPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more MediaServers that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MediaServerFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all MediaServers
   * const mediaServers = await prisma.mediaServer.findMany()
   * 
   * // Get first 10 MediaServers
   * const mediaServers = await prisma.mediaServer.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const mediaServerWithIdOnly = await prisma.mediaServer.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends MediaServerFindManyArgs>(args?: Prisma.SelectSubset<T, MediaServerFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MediaServerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a MediaServer.
   * @param {MediaServerCreateArgs} args - Arguments to create a MediaServer.
   * @example
   * // Create one MediaServer
   * const MediaServer = await prisma.mediaServer.create({
   *   data: {
   *     // ... data to create a MediaServer
   *   }
   * })
   * 
   */
  create<T extends MediaServerCreateArgs>(args: Prisma.SelectSubset<T, MediaServerCreateArgs<ExtArgs>>): Prisma.Prisma__MediaServerClient<runtime.Types.Result.GetResult<Prisma.$MediaServerPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many MediaServers.
   * @param {MediaServerCreateManyArgs} args - Arguments to create many MediaServers.
   * @example
   * // Create many MediaServers
   * const mediaServer = await prisma.mediaServer.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends MediaServerCreateManyArgs>(args?: Prisma.SelectSubset<T, MediaServerCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many MediaServers and returns the data saved in the database.
   * @param {MediaServerCreateManyAndReturnArgs} args - Arguments to create many MediaServers.
   * @example
   * // Create many MediaServers
   * const mediaServer = await prisma.mediaServer.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many MediaServers and only return the `id`
   * const mediaServerWithIdOnly = await prisma.mediaServer.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends MediaServerCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, MediaServerCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MediaServerPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a MediaServer.
   * @param {MediaServerDeleteArgs} args - Arguments to delete one MediaServer.
   * @example
   * // Delete one MediaServer
   * const MediaServer = await prisma.mediaServer.delete({
   *   where: {
   *     // ... filter to delete one MediaServer
   *   }
   * })
   * 
   */
  delete<T extends MediaServerDeleteArgs>(args: Prisma.SelectSubset<T, MediaServerDeleteArgs<ExtArgs>>): Prisma.Prisma__MediaServerClient<runtime.Types.Result.GetResult<Prisma.$MediaServerPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one MediaServer.
   * @param {MediaServerUpdateArgs} args - Arguments to update one MediaServer.
   * @example
   * // Update one MediaServer
   * const mediaServer = await prisma.mediaServer.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends MediaServerUpdateArgs>(args: Prisma.SelectSubset<T, MediaServerUpdateArgs<ExtArgs>>): Prisma.Prisma__MediaServerClient<runtime.Types.Result.GetResult<Prisma.$MediaServerPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more MediaServers.
   * @param {MediaServerDeleteManyArgs} args - Arguments to filter MediaServers to delete.
   * @example
   * // Delete a few MediaServers
   * const { count } = await prisma.mediaServer.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends MediaServerDeleteManyArgs>(args?: Prisma.SelectSubset<T, MediaServerDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more MediaServers.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MediaServerUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many MediaServers
   * const mediaServer = await prisma.mediaServer.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends MediaServerUpdateManyArgs>(args: Prisma.SelectSubset<T, MediaServerUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more MediaServers and returns the data updated in the database.
   * @param {MediaServerUpdateManyAndReturnArgs} args - Arguments to update many MediaServers.
   * @example
   * // Update many MediaServers
   * const mediaServer = await prisma.mediaServer.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more MediaServers and only return the `id`
   * const mediaServerWithIdOnly = await prisma.mediaServer.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends MediaServerUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, MediaServerUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MediaServerPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one MediaServer.
   * @param {MediaServerUpsertArgs} args - Arguments to update or create a MediaServer.
   * @example
   * // Update or create a MediaServer
   * const mediaServer = await prisma.mediaServer.upsert({
   *   create: {
   *     // ... data to create a MediaServer
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the MediaServer we want to update
   *   }
   * })
   */
  upsert<T extends MediaServerUpsertArgs>(args: Prisma.SelectSubset<T, MediaServerUpsertArgs<ExtArgs>>): Prisma.Prisma__MediaServerClient<runtime.Types.Result.GetResult<Prisma.$MediaServerPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of MediaServers.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MediaServerCountArgs} args - Arguments to filter MediaServers to count.
   * @example
   * // Count the number of MediaServers
   * const count = await prisma.mediaServer.count({
   *   where: {
   *     // ... the filter for the MediaServers we want to count
   *   }
   * })
  **/
  count<T extends MediaServerCountArgs>(
    args?: Prisma.Subset<T, MediaServerCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], MediaServerCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a MediaServer.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MediaServerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends MediaServerAggregateArgs>(args: Prisma.Subset<T, MediaServerAggregateArgs>): Prisma.PrismaPromise<GetMediaServerAggregateType<T>>

  /**
   * Group by MediaServer.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MediaServerGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends MediaServerGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: MediaServerGroupByArgs['orderBy'] }
      : { orderBy?: MediaServerGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, MediaServerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMediaServerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the MediaServer model
 */
readonly fields: MediaServerFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for MediaServer.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__MediaServerClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  libraries<T extends Prisma.MediaServer$librariesArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.MediaServer$librariesArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MediaLibraryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the MediaServer model
 */
export interface MediaServerFieldRefs {
  readonly id: Prisma.FieldRef<"MediaServer", 'String'>
  readonly name: Prisma.FieldRef<"MediaServer", 'String'>
  readonly url: Prisma.FieldRef<"MediaServer", 'String'>
  readonly token: Prisma.FieldRef<"MediaServer", 'String'>
  readonly type: Prisma.FieldRef<"MediaServer", 'ServerType'>
  readonly active: Prisma.FieldRef<"MediaServer", 'Boolean'>
  readonly createdAt: Prisma.FieldRef<"MediaServer", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"MediaServer", 'DateTime'>
}
    

// Custom InputTypes
/**
 * MediaServer findUnique
 */
export type MediaServerFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MediaServer
   */
  select?: Prisma.MediaServerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MediaServer
   */
  omit?: Prisma.MediaServerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MediaServerInclude<ExtArgs> | null
  /**
   * Filter, which MediaServer to fetch.
   */
  where: Prisma.MediaServerWhereUniqueInput
}

/**
 * MediaServer findUniqueOrThrow
 */
export type MediaServerFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MediaServer
   */
  select?: Prisma.MediaServerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MediaServer
   */
  omit?: Prisma.MediaServerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MediaServerInclude<ExtArgs> | null
  /**
   * Filter, which MediaServer to fetch.
   */
  where: Prisma.MediaServerWhereUniqueInput
}

/**
 * MediaServer findFirst
 */
export type MediaServerFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MediaServer
   */
  select?: Prisma.MediaServerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MediaServer
   */
  omit?: Prisma.MediaServerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MediaServerInclude<ExtArgs> | null
  /**
   * Filter, which MediaServer to fetch.
   */
  where?: Prisma.MediaServerWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MediaServers to fetch.
   */
  orderBy?: Prisma.MediaServerOrderByWithRelationInput | Prisma.MediaServerOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for MediaServers.
   */
  cursor?: Prisma.MediaServerWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MediaServers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MediaServers.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of MediaServers.
   */
  distinct?: Prisma.MediaServerScalarFieldEnum | Prisma.MediaServerScalarFieldEnum[]
}

/**
 * MediaServer findFirstOrThrow
 */
export type MediaServerFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MediaServer
   */
  select?: Prisma.MediaServerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MediaServer
   */
  omit?: Prisma.MediaServerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MediaServerInclude<ExtArgs> | null
  /**
   * Filter, which MediaServer to fetch.
   */
  where?: Prisma.MediaServerWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MediaServers to fetch.
   */
  orderBy?: Prisma.MediaServerOrderByWithRelationInput | Prisma.MediaServerOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for MediaServers.
   */
  cursor?: Prisma.MediaServerWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MediaServers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MediaServers.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of MediaServers.
   */
  distinct?: Prisma.MediaServerScalarFieldEnum | Prisma.MediaServerScalarFieldEnum[]
}

/**
 * MediaServer findMany
 */
export type MediaServerFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MediaServer
   */
  select?: Prisma.MediaServerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MediaServer
   */
  omit?: Prisma.MediaServerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MediaServerInclude<ExtArgs> | null
  /**
   * Filter, which MediaServers to fetch.
   */
  where?: Prisma.MediaServerWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MediaServers to fetch.
   */
  orderBy?: Prisma.MediaServerOrderByWithRelationInput | Prisma.MediaServerOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing MediaServers.
   */
  cursor?: Prisma.MediaServerWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MediaServers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MediaServers.
   */
  skip?: number
  distinct?: Prisma.MediaServerScalarFieldEnum | Prisma.MediaServerScalarFieldEnum[]
}

/**
 * MediaServer create
 */
export type MediaServerCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MediaServer
   */
  select?: Prisma.MediaServerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MediaServer
   */
  omit?: Prisma.MediaServerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MediaServerInclude<ExtArgs> | null
  /**
   * The data needed to create a MediaServer.
   */
  data: Prisma.XOR<Prisma.MediaServerCreateInput, Prisma.MediaServerUncheckedCreateInput>
}

/**
 * MediaServer createMany
 */
export type MediaServerCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many MediaServers.
   */
  data: Prisma.MediaServerCreateManyInput | Prisma.MediaServerCreateManyInput[]
}

/**
 * MediaServer createManyAndReturn
 */
export type MediaServerCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MediaServer
   */
  select?: Prisma.MediaServerSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the MediaServer
   */
  omit?: Prisma.MediaServerOmit<ExtArgs> | null
  /**
   * The data used to create many MediaServers.
   */
  data: Prisma.MediaServerCreateManyInput | Prisma.MediaServerCreateManyInput[]
}

/**
 * MediaServer update
 */
export type MediaServerUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MediaServer
   */
  select?: Prisma.MediaServerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MediaServer
   */
  omit?: Prisma.MediaServerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MediaServerInclude<ExtArgs> | null
  /**
   * The data needed to update a MediaServer.
   */
  data: Prisma.XOR<Prisma.MediaServerUpdateInput, Prisma.MediaServerUncheckedUpdateInput>
  /**
   * Choose, which MediaServer to update.
   */
  where: Prisma.MediaServerWhereUniqueInput
}

/**
 * MediaServer updateMany
 */
export type MediaServerUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update MediaServers.
   */
  data: Prisma.XOR<Prisma.MediaServerUpdateManyMutationInput, Prisma.MediaServerUncheckedUpdateManyInput>
  /**
   * Filter which MediaServers to update
   */
  where?: Prisma.MediaServerWhereInput
  /**
   * Limit how many MediaServers to update.
   */
  limit?: number
}

/**
 * MediaServer updateManyAndReturn
 */
export type MediaServerUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MediaServer
   */
  select?: Prisma.MediaServerSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the MediaServer
   */
  omit?: Prisma.MediaServerOmit<ExtArgs> | null
  /**
   * The data used to update MediaServers.
   */
  data: Prisma.XOR<Prisma.MediaServerUpdateManyMutationInput, Prisma.MediaServerUncheckedUpdateManyInput>
  /**
   * Filter which MediaServers to update
   */
  where?: Prisma.MediaServerWhereInput
  /**
   * Limit how many MediaServers to update.
   */
  limit?: number
}

/**
 * MediaServer upsert
 */
export type MediaServerUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MediaServer
   */
  select?: Prisma.MediaServerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MediaServer
   */
  omit?: Prisma.MediaServerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MediaServerInclude<ExtArgs> | null
  /**
   * The filter to search for the MediaServer to update in case it exists.
   */
  where: Prisma.MediaServerWhereUniqueInput
  /**
   * In case the MediaServer found by the `where` argument doesn't exist, create a new MediaServer with this data.
   */
  create: Prisma.XOR<Prisma.MediaServerCreateInput, Prisma.MediaServerUncheckedCreateInput>
  /**
   * In case the MediaServer was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.MediaServerUpdateInput, Prisma.MediaServerUncheckedUpdateInput>
}

/**
 * MediaServer delete
 */
export type MediaServerDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MediaServer
   */
  select?: Prisma.MediaServerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MediaServer
   */
  omit?: Prisma.MediaServerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MediaServerInclude<ExtArgs> | null
  /**
   * Filter which MediaServer to delete.
   */
  where: Prisma.MediaServerWhereUniqueInput
}

/**
 * MediaServer deleteMany
 */
export type MediaServerDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which MediaServers to delete
   */
  where?: Prisma.MediaServerWhereInput
  /**
   * Limit how many MediaServers to delete.
   */
  limit?: number
}

/**
 * MediaServer.libraries
 */
export type MediaServer$librariesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MediaLibrary
   */
  select?: Prisma.MediaLibrarySelect<ExtArgs> | null
  /**
   * Omit specific fields from the MediaLibrary
   */
  omit?: Prisma.MediaLibraryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MediaLibraryInclude<ExtArgs> | null
  where?: Prisma.MediaLibraryWhereInput
  orderBy?: Prisma.MediaLibraryOrderByWithRelationInput | Prisma.MediaLibraryOrderByWithRelationInput[]
  cursor?: Prisma.MediaLibraryWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.MediaLibraryScalarFieldEnum | Prisma.MediaLibraryScalarFieldEnum[]
}

/**
 * MediaServer without action
 */
export type MediaServerDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MediaServer
   */
  select?: Prisma.MediaServerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MediaServer
   */
  omit?: Prisma.MediaServerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MediaServerInclude<ExtArgs> | null
}
