
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `ChannelMovie` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model ChannelMovie
 * 
 */
export type ChannelMovieModel = runtime.Types.Result.DefaultSelection<Prisma.$ChannelMoviePayload>

export type AggregateChannelMovie = {
  _count: ChannelMovieCountAggregateOutputType | null
  _avg: ChannelMovieAvgAggregateOutputType | null
  _sum: ChannelMovieSumAggregateOutputType | null
  _min: ChannelMovieMinAggregateOutputType | null
  _max: ChannelMovieMaxAggregateOutputType | null
}

export type ChannelMovieAvgAggregateOutputType = {
  order: number | null
  weight: number | null
  maxConsecutiveMovies: number | null
}

export type ChannelMovieSumAggregateOutputType = {
  order: number | null
  weight: number | null
  maxConsecutiveMovies: number | null
}

export type ChannelMovieMinAggregateOutputType = {
  id: string | null
  channelId: string | null
  movieId: string | null
  order: number | null
  weight: number | null
  shuffle: boolean | null
  maxConsecutiveMovies: number | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type ChannelMovieMaxAggregateOutputType = {
  id: string | null
  channelId: string | null
  movieId: string | null
  order: number | null
  weight: number | null
  shuffle: boolean | null
  maxConsecutiveMovies: number | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type ChannelMovieCountAggregateOutputType = {
  id: number
  channelId: number
  movieId: number
  order: number
  weight: number
  shuffle: number
  maxConsecutiveMovies: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type ChannelMovieAvgAggregateInputType = {
  order?: true
  weight?: true
  maxConsecutiveMovies?: true
}

export type ChannelMovieSumAggregateInputType = {
  order?: true
  weight?: true
  maxConsecutiveMovies?: true
}

export type ChannelMovieMinAggregateInputType = {
  id?: true
  channelId?: true
  movieId?: true
  order?: true
  weight?: true
  shuffle?: true
  maxConsecutiveMovies?: true
  createdAt?: true
  updatedAt?: true
}

export type ChannelMovieMaxAggregateInputType = {
  id?: true
  channelId?: true
  movieId?: true
  order?: true
  weight?: true
  shuffle?: true
  maxConsecutiveMovies?: true
  createdAt?: true
  updatedAt?: true
}

export type ChannelMovieCountAggregateInputType = {
  id?: true
  channelId?: true
  movieId?: true
  order?: true
  weight?: true
  shuffle?: true
  maxConsecutiveMovies?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type ChannelMovieAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ChannelMovie to aggregate.
   */
  where?: Prisma.ChannelMovieWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ChannelMovies to fetch.
   */
  orderBy?: Prisma.ChannelMovieOrderByWithRelationInput | Prisma.ChannelMovieOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ChannelMovieWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ChannelMovies from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ChannelMovies.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned ChannelMovies
  **/
  _count?: true | ChannelMovieCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: ChannelMovieAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: ChannelMovieSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ChannelMovieMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ChannelMovieMaxAggregateInputType
}

export type GetChannelMovieAggregateType<T extends ChannelMovieAggregateArgs> = {
      [P in keyof T & keyof AggregateChannelMovie]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateChannelMovie[P]>
    : Prisma.GetScalarType<T[P], AggregateChannelMovie[P]>
}




export type ChannelMovieGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ChannelMovieWhereInput
  orderBy?: Prisma.ChannelMovieOrderByWithAggregationInput | Prisma.ChannelMovieOrderByWithAggregationInput[]
  by: Prisma.ChannelMovieScalarFieldEnum[] | Prisma.ChannelMovieScalarFieldEnum
  having?: Prisma.ChannelMovieScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ChannelMovieCountAggregateInputType | true
  _avg?: ChannelMovieAvgAggregateInputType
  _sum?: ChannelMovieSumAggregateInputType
  _min?: ChannelMovieMinAggregateInputType
  _max?: ChannelMovieMaxAggregateInputType
}

export type ChannelMovieGroupByOutputType = {
  id: string
  channelId: string
  movieId: string
  order: number
  weight: number
  shuffle: boolean
  maxConsecutiveMovies: number
  createdAt: Date
  updatedAt: Date
  _count: ChannelMovieCountAggregateOutputType | null
  _avg: ChannelMovieAvgAggregateOutputType | null
  _sum: ChannelMovieSumAggregateOutputType | null
  _min: ChannelMovieMinAggregateOutputType | null
  _max: ChannelMovieMaxAggregateOutputType | null
}

type GetChannelMovieGroupByPayload<T extends ChannelMovieGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ChannelMovieGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ChannelMovieGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ChannelMovieGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ChannelMovieGroupByOutputType[P]>
      }
    >
  > 



export type ChannelMovieWhereInput = {
  AND?: Prisma.ChannelMovieWhereInput | Prisma.ChannelMovieWhereInput[]
  OR?: Prisma.ChannelMovieWhereInput[]
  NOT?: Prisma.ChannelMovieWhereInput | Prisma.ChannelMovieWhereInput[]
  id?: Prisma.StringFilter<"ChannelMovie"> | string
  channelId?: Prisma.StringFilter<"ChannelMovie"> | string
  movieId?: Prisma.StringFilter<"ChannelMovie"> | string
  order?: Prisma.IntFilter<"ChannelMovie"> | number
  weight?: Prisma.IntFilter<"ChannelMovie"> | number
  shuffle?: Prisma.BoolFilter<"ChannelMovie"> | boolean
  maxConsecutiveMovies?: Prisma.IntFilter<"ChannelMovie"> | number
  createdAt?: Prisma.DateTimeFilter<"ChannelMovie"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"ChannelMovie"> | Date | string
  channel?: Prisma.XOR<Prisma.ChannelScalarRelationFilter, Prisma.ChannelWhereInput>
  movie?: Prisma.XOR<Prisma.MediaMovieScalarRelationFilter, Prisma.MediaMovieWhereInput>
}

export type ChannelMovieOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  channelId?: Prisma.SortOrder
  movieId?: Prisma.SortOrder
  order?: Prisma.SortOrder
  weight?: Prisma.SortOrder
  shuffle?: Prisma.SortOrder
  maxConsecutiveMovies?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  channel?: Prisma.ChannelOrderByWithRelationInput
  movie?: Prisma.MediaMovieOrderByWithRelationInput
}

export type ChannelMovieWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  channelId_movieId?: Prisma.ChannelMovieChannelIdMovieIdCompoundUniqueInput
  AND?: Prisma.ChannelMovieWhereInput | Prisma.ChannelMovieWhereInput[]
  OR?: Prisma.ChannelMovieWhereInput[]
  NOT?: Prisma.ChannelMovieWhereInput | Prisma.ChannelMovieWhereInput[]
  channelId?: Prisma.StringFilter<"ChannelMovie"> | string
  movieId?: Prisma.StringFilter<"ChannelMovie"> | string
  order?: Prisma.IntFilter<"ChannelMovie"> | number
  weight?: Prisma.IntFilter<"ChannelMovie"> | number
  shuffle?: Prisma.BoolFilter<"ChannelMovie"> | boolean
  maxConsecutiveMovies?: Prisma.IntFilter<"ChannelMovie"> | number
  createdAt?: Prisma.DateTimeFilter<"ChannelMovie"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"ChannelMovie"> | Date | string
  channel?: Prisma.XOR<Prisma.ChannelScalarRelationFilter, Prisma.ChannelWhereInput>
  movie?: Prisma.XOR<Prisma.MediaMovieScalarRelationFilter, Prisma.MediaMovieWhereInput>
}, "id" | "channelId_movieId">

export type ChannelMovieOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  channelId?: Prisma.SortOrder
  movieId?: Prisma.SortOrder
  order?: Prisma.SortOrder
  weight?: Prisma.SortOrder
  shuffle?: Prisma.SortOrder
  maxConsecutiveMovies?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.ChannelMovieCountOrderByAggregateInput
  _avg?: Prisma.ChannelMovieAvgOrderByAggregateInput
  _max?: Prisma.ChannelMovieMaxOrderByAggregateInput
  _min?: Prisma.ChannelMovieMinOrderByAggregateInput
  _sum?: Prisma.ChannelMovieSumOrderByAggregateInput
}

export type ChannelMovieScalarWhereWithAggregatesInput = {
  AND?: Prisma.ChannelMovieScalarWhereWithAggregatesInput | Prisma.ChannelMovieScalarWhereWithAggregatesInput[]
  OR?: Prisma.ChannelMovieScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ChannelMovieScalarWhereWithAggregatesInput | Prisma.ChannelMovieScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"ChannelMovie"> | string
  channelId?: Prisma.StringWithAggregatesFilter<"ChannelMovie"> | string
  movieId?: Prisma.StringWithAggregatesFilter<"ChannelMovie"> | string
  order?: Prisma.IntWithAggregatesFilter<"ChannelMovie"> | number
  weight?: Prisma.IntWithAggregatesFilter<"ChannelMovie"> | number
  shuffle?: Prisma.BoolWithAggregatesFilter<"ChannelMovie"> | boolean
  maxConsecutiveMovies?: Prisma.IntWithAggregatesFilter<"ChannelMovie"> | number
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"ChannelMovie"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"ChannelMovie"> | Date | string
}

export type ChannelMovieCreateInput = {
  id?: string
  order?: number
  weight?: number
  shuffle?: boolean
  maxConsecutiveMovies?: number
  createdAt?: Date | string
  updatedAt?: Date | string
  channel: Prisma.ChannelCreateNestedOneWithoutChannelMoviesInput
  movie: Prisma.MediaMovieCreateNestedOneWithoutChannelMoviesInput
}

export type ChannelMovieUncheckedCreateInput = {
  id?: string
  channelId: string
  movieId: string
  order?: number
  weight?: number
  shuffle?: boolean
  maxConsecutiveMovies?: number
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ChannelMovieUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  order?: Prisma.IntFieldUpdateOperationsInput | number
  weight?: Prisma.IntFieldUpdateOperationsInput | number
  shuffle?: Prisma.BoolFieldUpdateOperationsInput | boolean
  maxConsecutiveMovies?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  channel?: Prisma.ChannelUpdateOneRequiredWithoutChannelMoviesNestedInput
  movie?: Prisma.MediaMovieUpdateOneRequiredWithoutChannelMoviesNestedInput
}

export type ChannelMovieUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  channelId?: Prisma.StringFieldUpdateOperationsInput | string
  movieId?: Prisma.StringFieldUpdateOperationsInput | string
  order?: Prisma.IntFieldUpdateOperationsInput | number
  weight?: Prisma.IntFieldUpdateOperationsInput | number
  shuffle?: Prisma.BoolFieldUpdateOperationsInput | boolean
  maxConsecutiveMovies?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ChannelMovieCreateManyInput = {
  id?: string
  channelId: string
  movieId: string
  order?: number
  weight?: number
  shuffle?: boolean
  maxConsecutiveMovies?: number
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ChannelMovieUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  order?: Prisma.IntFieldUpdateOperationsInput | number
  weight?: Prisma.IntFieldUpdateOperationsInput | number
  shuffle?: Prisma.BoolFieldUpdateOperationsInput | boolean
  maxConsecutiveMovies?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ChannelMovieUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  channelId?: Prisma.StringFieldUpdateOperationsInput | string
  movieId?: Prisma.StringFieldUpdateOperationsInput | string
  order?: Prisma.IntFieldUpdateOperationsInput | number
  weight?: Prisma.IntFieldUpdateOperationsInput | number
  shuffle?: Prisma.BoolFieldUpdateOperationsInput | boolean
  maxConsecutiveMovies?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ChannelMovieListRelationFilter = {
  every?: Prisma.ChannelMovieWhereInput
  some?: Prisma.ChannelMovieWhereInput
  none?: Prisma.ChannelMovieWhereInput
}

export type ChannelMovieOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type ChannelMovieChannelIdMovieIdCompoundUniqueInput = {
  channelId: string
  movieId: string
}

export type ChannelMovieCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  channelId?: Prisma.SortOrder
  movieId?: Prisma.SortOrder
  order?: Prisma.SortOrder
  weight?: Prisma.SortOrder
  shuffle?: Prisma.SortOrder
  maxConsecutiveMovies?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ChannelMovieAvgOrderByAggregateInput = {
  order?: Prisma.SortOrder
  weight?: Prisma.SortOrder
  maxConsecutiveMovies?: Prisma.SortOrder
}

export type ChannelMovieMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  channelId?: Prisma.SortOrder
  movieId?: Prisma.SortOrder
  order?: Prisma.SortOrder
  weight?: Prisma.SortOrder
  shuffle?: Prisma.SortOrder
  maxConsecutiveMovies?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ChannelMovieMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  channelId?: Prisma.SortOrder
  movieId?: Prisma.SortOrder
  order?: Prisma.SortOrder
  weight?: Prisma.SortOrder
  shuffle?: Prisma.SortOrder
  maxConsecutiveMovies?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ChannelMovieSumOrderByAggregateInput = {
  order?: Prisma.SortOrder
  weight?: Prisma.SortOrder
  maxConsecutiveMovies?: Prisma.SortOrder
}

export type ChannelMovieCreateNestedManyWithoutMovieInput = {
  create?: Prisma.XOR<Prisma.ChannelMovieCreateWithoutMovieInput, Prisma.ChannelMovieUncheckedCreateWithoutMovieInput> | Prisma.ChannelMovieCreateWithoutMovieInput[] | Prisma.ChannelMovieUncheckedCreateWithoutMovieInput[]
  connectOrCreate?: Prisma.ChannelMovieCreateOrConnectWithoutMovieInput | Prisma.ChannelMovieCreateOrConnectWithoutMovieInput[]
  createMany?: Prisma.ChannelMovieCreateManyMovieInputEnvelope
  connect?: Prisma.ChannelMovieWhereUniqueInput | Prisma.ChannelMovieWhereUniqueInput[]
}

export type ChannelMovieUncheckedCreateNestedManyWithoutMovieInput = {
  create?: Prisma.XOR<Prisma.ChannelMovieCreateWithoutMovieInput, Prisma.ChannelMovieUncheckedCreateWithoutMovieInput> | Prisma.ChannelMovieCreateWithoutMovieInput[] | Prisma.ChannelMovieUncheckedCreateWithoutMovieInput[]
  connectOrCreate?: Prisma.ChannelMovieCreateOrConnectWithoutMovieInput | Prisma.ChannelMovieCreateOrConnectWithoutMovieInput[]
  createMany?: Prisma.ChannelMovieCreateManyMovieInputEnvelope
  connect?: Prisma.ChannelMovieWhereUniqueInput | Prisma.ChannelMovieWhereUniqueInput[]
}

export type ChannelMovieUpdateManyWithoutMovieNestedInput = {
  create?: Prisma.XOR<Prisma.ChannelMovieCreateWithoutMovieInput, Prisma.ChannelMovieUncheckedCreateWithoutMovieInput> | Prisma.ChannelMovieCreateWithoutMovieInput[] | Prisma.ChannelMovieUncheckedCreateWithoutMovieInput[]
  connectOrCreate?: Prisma.ChannelMovieCreateOrConnectWithoutMovieInput | Prisma.ChannelMovieCreateOrConnectWithoutMovieInput[]
  upsert?: Prisma.ChannelMovieUpsertWithWhereUniqueWithoutMovieInput | Prisma.ChannelMovieUpsertWithWhereUniqueWithoutMovieInput[]
  createMany?: Prisma.ChannelMovieCreateManyMovieInputEnvelope
  set?: Prisma.ChannelMovieWhereUniqueInput | Prisma.ChannelMovieWhereUniqueInput[]
  disconnect?: Prisma.ChannelMovieWhereUniqueInput | Prisma.ChannelMovieWhereUniqueInput[]
  delete?: Prisma.ChannelMovieWhereUniqueInput | Prisma.ChannelMovieWhereUniqueInput[]
  connect?: Prisma.ChannelMovieWhereUniqueInput | Prisma.ChannelMovieWhereUniqueInput[]
  update?: Prisma.ChannelMovieUpdateWithWhereUniqueWithoutMovieInput | Prisma.ChannelMovieUpdateWithWhereUniqueWithoutMovieInput[]
  updateMany?: Prisma.ChannelMovieUpdateManyWithWhereWithoutMovieInput | Prisma.ChannelMovieUpdateManyWithWhereWithoutMovieInput[]
  deleteMany?: Prisma.ChannelMovieScalarWhereInput | Prisma.ChannelMovieScalarWhereInput[]
}

export type ChannelMovieUncheckedUpdateManyWithoutMovieNestedInput = {
  create?: Prisma.XOR<Prisma.ChannelMovieCreateWithoutMovieInput, Prisma.ChannelMovieUncheckedCreateWithoutMovieInput> | Prisma.ChannelMovieCreateWithoutMovieInput[] | Prisma.ChannelMovieUncheckedCreateWithoutMovieInput[]
  connectOrCreate?: Prisma.ChannelMovieCreateOrConnectWithoutMovieInput | Prisma.ChannelMovieCreateOrConnectWithoutMovieInput[]
  upsert?: Prisma.ChannelMovieUpsertWithWhereUniqueWithoutMovieInput | Prisma.ChannelMovieUpsertWithWhereUniqueWithoutMovieInput[]
  createMany?: Prisma.ChannelMovieCreateManyMovieInputEnvelope
  set?: Prisma.ChannelMovieWhereUniqueInput | Prisma.ChannelMovieWhereUniqueInput[]
  disconnect?: Prisma.ChannelMovieWhereUniqueInput | Prisma.ChannelMovieWhereUniqueInput[]
  delete?: Prisma.ChannelMovieWhereUniqueInput | Prisma.ChannelMovieWhereUniqueInput[]
  connect?: Prisma.ChannelMovieWhereUniqueInput | Prisma.ChannelMovieWhereUniqueInput[]
  update?: Prisma.ChannelMovieUpdateWithWhereUniqueWithoutMovieInput | Prisma.ChannelMovieUpdateWithWhereUniqueWithoutMovieInput[]
  updateMany?: Prisma.ChannelMovieUpdateManyWithWhereWithoutMovieInput | Prisma.ChannelMovieUpdateManyWithWhereWithoutMovieInput[]
  deleteMany?: Prisma.ChannelMovieScalarWhereInput | Prisma.ChannelMovieScalarWhereInput[]
}

export type ChannelMovieCreateNestedManyWithoutChannelInput = {
  create?: Prisma.XOR<Prisma.ChannelMovieCreateWithoutChannelInput, Prisma.ChannelMovieUncheckedCreateWithoutChannelInput> | Prisma.ChannelMovieCreateWithoutChannelInput[] | Prisma.ChannelMovieUncheckedCreateWithoutChannelInput[]
  connectOrCreate?: Prisma.ChannelMovieCreateOrConnectWithoutChannelInput | Prisma.ChannelMovieCreateOrConnectWithoutChannelInput[]
  createMany?: Prisma.ChannelMovieCreateManyChannelInputEnvelope
  connect?: Prisma.ChannelMovieWhereUniqueInput | Prisma.ChannelMovieWhereUniqueInput[]
}

export type ChannelMovieUncheckedCreateNestedManyWithoutChannelInput = {
  create?: Prisma.XOR<Prisma.ChannelMovieCreateWithoutChannelInput, Prisma.ChannelMovieUncheckedCreateWithoutChannelInput> | Prisma.ChannelMovieCreateWithoutChannelInput[] | Prisma.ChannelMovieUncheckedCreateWithoutChannelInput[]
  connectOrCreate?: Prisma.ChannelMovieCreateOrConnectWithoutChannelInput | Prisma.ChannelMovieCreateOrConnectWithoutChannelInput[]
  createMany?: Prisma.ChannelMovieCreateManyChannelInputEnvelope
  connect?: Prisma.ChannelMovieWhereUniqueInput | Prisma.ChannelMovieWhereUniqueInput[]
}

export type ChannelMovieUpdateManyWithoutChannelNestedInput = {
  create?: Prisma.XOR<Prisma.ChannelMovieCreateWithoutChannelInput, Prisma.ChannelMovieUncheckedCreateWithoutChannelInput> | Prisma.ChannelMovieCreateWithoutChannelInput[] | Prisma.ChannelMovieUncheckedCreateWithoutChannelInput[]
  connectOrCreate?: Prisma.ChannelMovieCreateOrConnectWithoutChannelInput | Prisma.ChannelMovieCreateOrConnectWithoutChannelInput[]
  upsert?: Prisma.ChannelMovieUpsertWithWhereUniqueWithoutChannelInput | Prisma.ChannelMovieUpsertWithWhereUniqueWithoutChannelInput[]
  createMany?: Prisma.ChannelMovieCreateManyChannelInputEnvelope
  set?: Prisma.ChannelMovieWhereUniqueInput | Prisma.ChannelMovieWhereUniqueInput[]
  disconnect?: Prisma.ChannelMovieWhereUniqueInput | Prisma.ChannelMovieWhereUniqueInput[]
  delete?: Prisma.ChannelMovieWhereUniqueInput | Prisma.ChannelMovieWhereUniqueInput[]
  connect?: Prisma.ChannelMovieWhereUniqueInput | Prisma.ChannelMovieWhereUniqueInput[]
  update?: Prisma.ChannelMovieUpdateWithWhereUniqueWithoutChannelInput | Prisma.ChannelMovieUpdateWithWhereUniqueWithoutChannelInput[]
  updateMany?: Prisma.ChannelMovieUpdateManyWithWhereWithoutChannelInput | Prisma.ChannelMovieUpdateManyWithWhereWithoutChannelInput[]
  deleteMany?: Prisma.ChannelMovieScalarWhereInput | Prisma.ChannelMovieScalarWhereInput[]
}

export type ChannelMovieUncheckedUpdateManyWithoutChannelNestedInput = {
  create?: Prisma.XOR<Prisma.ChannelMovieCreateWithoutChannelInput, Prisma.ChannelMovieUncheckedCreateWithoutChannelInput> | Prisma.ChannelMovieCreateWithoutChannelInput[] | Prisma.ChannelMovieUncheckedCreateWithoutChannelInput[]
  connectOrCreate?: Prisma.ChannelMovieCreateOrConnectWithoutChannelInput | Prisma.ChannelMovieCreateOrConnectWithoutChannelInput[]
  upsert?: Prisma.ChannelMovieUpsertWithWhereUniqueWithoutChannelInput | Prisma.ChannelMovieUpsertWithWhereUniqueWithoutChannelInput[]
  createMany?: Prisma.ChannelMovieCreateManyChannelInputEnvelope
  set?: Prisma.ChannelMovieWhereUniqueInput | Prisma.ChannelMovieWhereUniqueInput[]
  disconnect?: Prisma.ChannelMovieWhereUniqueInput | Prisma.ChannelMovieWhereUniqueInput[]
  delete?: Prisma.ChannelMovieWhereUniqueInput | Prisma.ChannelMovieWhereUniqueInput[]
  connect?: Prisma.ChannelMovieWhereUniqueInput | Prisma.ChannelMovieWhereUniqueInput[]
  update?: Prisma.ChannelMovieUpdateWithWhereUniqueWithoutChannelInput | Prisma.ChannelMovieUpdateWithWhereUniqueWithoutChannelInput[]
  updateMany?: Prisma.ChannelMovieUpdateManyWithWhereWithoutChannelInput | Prisma.ChannelMovieUpdateManyWithWhereWithoutChannelInput[]
  deleteMany?: Prisma.ChannelMovieScalarWhereInput | Prisma.ChannelMovieScalarWhereInput[]
}

export type ChannelMovieCreateWithoutMovieInput = {
  id?: string
  order?: number
  weight?: number
  shuffle?: boolean
  maxConsecutiveMovies?: number
  createdAt?: Date | string
  updatedAt?: Date | string
  channel: Prisma.ChannelCreateNestedOneWithoutChannelMoviesInput
}

export type ChannelMovieUncheckedCreateWithoutMovieInput = {
  id?: string
  channelId: string
  order?: number
  weight?: number
  shuffle?: boolean
  maxConsecutiveMovies?: number
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ChannelMovieCreateOrConnectWithoutMovieInput = {
  where: Prisma.ChannelMovieWhereUniqueInput
  create: Prisma.XOR<Prisma.ChannelMovieCreateWithoutMovieInput, Prisma.ChannelMovieUncheckedCreateWithoutMovieInput>
}

export type ChannelMovieCreateManyMovieInputEnvelope = {
  data: Prisma.ChannelMovieCreateManyMovieInput | Prisma.ChannelMovieCreateManyMovieInput[]
}

export type ChannelMovieUpsertWithWhereUniqueWithoutMovieInput = {
  where: Prisma.ChannelMovieWhereUniqueInput
  update: Prisma.XOR<Prisma.ChannelMovieUpdateWithoutMovieInput, Prisma.ChannelMovieUncheckedUpdateWithoutMovieInput>
  create: Prisma.XOR<Prisma.ChannelMovieCreateWithoutMovieInput, Prisma.ChannelMovieUncheckedCreateWithoutMovieInput>
}

export type ChannelMovieUpdateWithWhereUniqueWithoutMovieInput = {
  where: Prisma.ChannelMovieWhereUniqueInput
  data: Prisma.XOR<Prisma.ChannelMovieUpdateWithoutMovieInput, Prisma.ChannelMovieUncheckedUpdateWithoutMovieInput>
}

export type ChannelMovieUpdateManyWithWhereWithoutMovieInput = {
  where: Prisma.ChannelMovieScalarWhereInput
  data: Prisma.XOR<Prisma.ChannelMovieUpdateManyMutationInput, Prisma.ChannelMovieUncheckedUpdateManyWithoutMovieInput>
}

export type ChannelMovieScalarWhereInput = {
  AND?: Prisma.ChannelMovieScalarWhereInput | Prisma.ChannelMovieScalarWhereInput[]
  OR?: Prisma.ChannelMovieScalarWhereInput[]
  NOT?: Prisma.ChannelMovieScalarWhereInput | Prisma.ChannelMovieScalarWhereInput[]
  id?: Prisma.StringFilter<"ChannelMovie"> | string
  channelId?: Prisma.StringFilter<"ChannelMovie"> | string
  movieId?: Prisma.StringFilter<"ChannelMovie"> | string
  order?: Prisma.IntFilter<"ChannelMovie"> | number
  weight?: Prisma.IntFilter<"ChannelMovie"> | number
  shuffle?: Prisma.BoolFilter<"ChannelMovie"> | boolean
  maxConsecutiveMovies?: Prisma.IntFilter<"ChannelMovie"> | number
  createdAt?: Prisma.DateTimeFilter<"ChannelMovie"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"ChannelMovie"> | Date | string
}

export type ChannelMovieCreateWithoutChannelInput = {
  id?: string
  order?: number
  weight?: number
  shuffle?: boolean
  maxConsecutiveMovies?: number
  createdAt?: Date | string
  updatedAt?: Date | string
  movie: Prisma.MediaMovieCreateNestedOneWithoutChannelMoviesInput
}

export type ChannelMovieUncheckedCreateWithoutChannelInput = {
  id?: string
  movieId: string
  order?: number
  weight?: number
  shuffle?: boolean
  maxConsecutiveMovies?: number
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ChannelMovieCreateOrConnectWithoutChannelInput = {
  where: Prisma.ChannelMovieWhereUniqueInput
  create: Prisma.XOR<Prisma.ChannelMovieCreateWithoutChannelInput, Prisma.ChannelMovieUncheckedCreateWithoutChannelInput>
}

export type ChannelMovieCreateManyChannelInputEnvelope = {
  data: Prisma.ChannelMovieCreateManyChannelInput | Prisma.ChannelMovieCreateManyChannelInput[]
}

export type ChannelMovieUpsertWithWhereUniqueWithoutChannelInput = {
  where: Prisma.ChannelMovieWhereUniqueInput
  update: Prisma.XOR<Prisma.ChannelMovieUpdateWithoutChannelInput, Prisma.ChannelMovieUncheckedUpdateWithoutChannelInput>
  create: Prisma.XOR<Prisma.ChannelMovieCreateWithoutChannelInput, Prisma.ChannelMovieUncheckedCreateWithoutChannelInput>
}

export type ChannelMovieUpdateWithWhereUniqueWithoutChannelInput = {
  where: Prisma.ChannelMovieWhereUniqueInput
  data: Prisma.XOR<Prisma.ChannelMovieUpdateWithoutChannelInput, Prisma.ChannelMovieUncheckedUpdateWithoutChannelInput>
}

export type ChannelMovieUpdateManyWithWhereWithoutChannelInput = {
  where: Prisma.ChannelMovieScalarWhereInput
  data: Prisma.XOR<Prisma.ChannelMovieUpdateManyMutationInput, Prisma.ChannelMovieUncheckedUpdateManyWithoutChannelInput>
}

export type ChannelMovieCreateManyMovieInput = {
  id?: string
  channelId: string
  order?: number
  weight?: number
  shuffle?: boolean
  maxConsecutiveMovies?: number
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ChannelMovieUpdateWithoutMovieInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  order?: Prisma.IntFieldUpdateOperationsInput | number
  weight?: Prisma.IntFieldUpdateOperationsInput | number
  shuffle?: Prisma.BoolFieldUpdateOperationsInput | boolean
  maxConsecutiveMovies?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  channel?: Prisma.ChannelUpdateOneRequiredWithoutChannelMoviesNestedInput
}

export type ChannelMovieUncheckedUpdateWithoutMovieInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  channelId?: Prisma.StringFieldUpdateOperationsInput | string
  order?: Prisma.IntFieldUpdateOperationsInput | number
  weight?: Prisma.IntFieldUpdateOperationsInput | number
  shuffle?: Prisma.BoolFieldUpdateOperationsInput | boolean
  maxConsecutiveMovies?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ChannelMovieUncheckedUpdateManyWithoutMovieInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  channelId?: Prisma.StringFieldUpdateOperationsInput | string
  order?: Prisma.IntFieldUpdateOperationsInput | number
  weight?: Prisma.IntFieldUpdateOperationsInput | number
  shuffle?: Prisma.BoolFieldUpdateOperationsInput | boolean
  maxConsecutiveMovies?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ChannelMovieCreateManyChannelInput = {
  id?: string
  movieId: string
  order?: number
  weight?: number
  shuffle?: boolean
  maxConsecutiveMovies?: number
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ChannelMovieUpdateWithoutChannelInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  order?: Prisma.IntFieldUpdateOperationsInput | number
  weight?: Prisma.IntFieldUpdateOperationsInput | number
  shuffle?: Prisma.BoolFieldUpdateOperationsInput | boolean
  maxConsecutiveMovies?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  movie?: Prisma.MediaMovieUpdateOneRequiredWithoutChannelMoviesNestedInput
}

export type ChannelMovieUncheckedUpdateWithoutChannelInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  movieId?: Prisma.StringFieldUpdateOperationsInput | string
  order?: Prisma.IntFieldUpdateOperationsInput | number
  weight?: Prisma.IntFieldUpdateOperationsInput | number
  shuffle?: Prisma.BoolFieldUpdateOperationsInput | boolean
  maxConsecutiveMovies?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ChannelMovieUncheckedUpdateManyWithoutChannelInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  movieId?: Prisma.StringFieldUpdateOperationsInput | string
  order?: Prisma.IntFieldUpdateOperationsInput | number
  weight?: Prisma.IntFieldUpdateOperationsInput | number
  shuffle?: Prisma.BoolFieldUpdateOperationsInput | boolean
  maxConsecutiveMovies?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type ChannelMovieSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  channelId?: boolean
  movieId?: boolean
  order?: boolean
  weight?: boolean
  shuffle?: boolean
  maxConsecutiveMovies?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  channel?: boolean | Prisma.ChannelDefaultArgs<ExtArgs>
  movie?: boolean | Prisma.MediaMovieDefaultArgs<ExtArgs>
}, ExtArgs["result"]["channelMovie"]>

export type ChannelMovieSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  channelId?: boolean
  movieId?: boolean
  order?: boolean
  weight?: boolean
  shuffle?: boolean
  maxConsecutiveMovies?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  channel?: boolean | Prisma.ChannelDefaultArgs<ExtArgs>
  movie?: boolean | Prisma.MediaMovieDefaultArgs<ExtArgs>
}, ExtArgs["result"]["channelMovie"]>

export type ChannelMovieSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  channelId?: boolean
  movieId?: boolean
  order?: boolean
  weight?: boolean
  shuffle?: boolean
  maxConsecutiveMovies?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  channel?: boolean | Prisma.ChannelDefaultArgs<ExtArgs>
  movie?: boolean | Prisma.MediaMovieDefaultArgs<ExtArgs>
}, ExtArgs["result"]["channelMovie"]>

export type ChannelMovieSelectScalar = {
  id?: boolean
  channelId?: boolean
  movieId?: boolean
  order?: boolean
  weight?: boolean
  shuffle?: boolean
  maxConsecutiveMovies?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type ChannelMovieOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "channelId" | "movieId" | "order" | "weight" | "shuffle" | "maxConsecutiveMovies" | "createdAt" | "updatedAt", ExtArgs["result"]["channelMovie"]>
export type ChannelMovieInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  channel?: boolean | Prisma.ChannelDefaultArgs<ExtArgs>
  movie?: boolean | Prisma.MediaMovieDefaultArgs<ExtArgs>
}
export type ChannelMovieIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  channel?: boolean | Prisma.ChannelDefaultArgs<ExtArgs>
  movie?: boolean | Prisma.MediaMovieDefaultArgs<ExtArgs>
}
export type ChannelMovieIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  channel?: boolean | Prisma.ChannelDefaultArgs<ExtArgs>
  movie?: boolean | Prisma.MediaMovieDefaultArgs<ExtArgs>
}

export type $ChannelMoviePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "ChannelMovie"
  objects: {
    channel: Prisma.$ChannelPayload<ExtArgs>
    movie: Prisma.$MediaMoviePayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    channelId: string
    movieId: string
    order: number
    weight: number
    shuffle: boolean
    maxConsecutiveMovies: number
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["channelMovie"]>
  composites: {}
}

export type ChannelMovieGetPayload<S extends boolean | null | undefined | ChannelMovieDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ChannelMoviePayload, S>

export type ChannelMovieCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ChannelMovieFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ChannelMovieCountAggregateInputType | true
  }

export interface ChannelMovieDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ChannelMovie'], meta: { name: 'ChannelMovie' } }
  /**
   * Find zero or one ChannelMovie that matches the filter.
   * @param {ChannelMovieFindUniqueArgs} args - Arguments to find a ChannelMovie
   * @example
   * // Get one ChannelMovie
   * const channelMovie = await prisma.channelMovie.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ChannelMovieFindUniqueArgs>(args: Prisma.SelectSubset<T, ChannelMovieFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ChannelMovieClient<runtime.Types.Result.GetResult<Prisma.$ChannelMoviePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one ChannelMovie that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ChannelMovieFindUniqueOrThrowArgs} args - Arguments to find a ChannelMovie
   * @example
   * // Get one ChannelMovie
   * const channelMovie = await prisma.channelMovie.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ChannelMovieFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ChannelMovieFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ChannelMovieClient<runtime.Types.Result.GetResult<Prisma.$ChannelMoviePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ChannelMovie that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChannelMovieFindFirstArgs} args - Arguments to find a ChannelMovie
   * @example
   * // Get one ChannelMovie
   * const channelMovie = await prisma.channelMovie.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ChannelMovieFindFirstArgs>(args?: Prisma.SelectSubset<T, ChannelMovieFindFirstArgs<ExtArgs>>): Prisma.Prisma__ChannelMovieClient<runtime.Types.Result.GetResult<Prisma.$ChannelMoviePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ChannelMovie that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChannelMovieFindFirstOrThrowArgs} args - Arguments to find a ChannelMovie
   * @example
   * // Get one ChannelMovie
   * const channelMovie = await prisma.channelMovie.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ChannelMovieFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ChannelMovieFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ChannelMovieClient<runtime.Types.Result.GetResult<Prisma.$ChannelMoviePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more ChannelMovies that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChannelMovieFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all ChannelMovies
   * const channelMovies = await prisma.channelMovie.findMany()
   * 
   * // Get first 10 ChannelMovies
   * const channelMovies = await prisma.channelMovie.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const channelMovieWithIdOnly = await prisma.channelMovie.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ChannelMovieFindManyArgs>(args?: Prisma.SelectSubset<T, ChannelMovieFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ChannelMoviePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a ChannelMovie.
   * @param {ChannelMovieCreateArgs} args - Arguments to create a ChannelMovie.
   * @example
   * // Create one ChannelMovie
   * const ChannelMovie = await prisma.channelMovie.create({
   *   data: {
   *     // ... data to create a ChannelMovie
   *   }
   * })
   * 
   */
  create<T extends ChannelMovieCreateArgs>(args: Prisma.SelectSubset<T, ChannelMovieCreateArgs<ExtArgs>>): Prisma.Prisma__ChannelMovieClient<runtime.Types.Result.GetResult<Prisma.$ChannelMoviePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many ChannelMovies.
   * @param {ChannelMovieCreateManyArgs} args - Arguments to create many ChannelMovies.
   * @example
   * // Create many ChannelMovies
   * const channelMovie = await prisma.channelMovie.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ChannelMovieCreateManyArgs>(args?: Prisma.SelectSubset<T, ChannelMovieCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many ChannelMovies and returns the data saved in the database.
   * @param {ChannelMovieCreateManyAndReturnArgs} args - Arguments to create many ChannelMovies.
   * @example
   * // Create many ChannelMovies
   * const channelMovie = await prisma.channelMovie.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many ChannelMovies and only return the `id`
   * const channelMovieWithIdOnly = await prisma.channelMovie.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ChannelMovieCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ChannelMovieCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ChannelMoviePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a ChannelMovie.
   * @param {ChannelMovieDeleteArgs} args - Arguments to delete one ChannelMovie.
   * @example
   * // Delete one ChannelMovie
   * const ChannelMovie = await prisma.channelMovie.delete({
   *   where: {
   *     // ... filter to delete one ChannelMovie
   *   }
   * })
   * 
   */
  delete<T extends ChannelMovieDeleteArgs>(args: Prisma.SelectSubset<T, ChannelMovieDeleteArgs<ExtArgs>>): Prisma.Prisma__ChannelMovieClient<runtime.Types.Result.GetResult<Prisma.$ChannelMoviePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one ChannelMovie.
   * @param {ChannelMovieUpdateArgs} args - Arguments to update one ChannelMovie.
   * @example
   * // Update one ChannelMovie
   * const channelMovie = await prisma.channelMovie.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ChannelMovieUpdateArgs>(args: Prisma.SelectSubset<T, ChannelMovieUpdateArgs<ExtArgs>>): Prisma.Prisma__ChannelMovieClient<runtime.Types.Result.GetResult<Prisma.$ChannelMoviePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more ChannelMovies.
   * @param {ChannelMovieDeleteManyArgs} args - Arguments to filter ChannelMovies to delete.
   * @example
   * // Delete a few ChannelMovies
   * const { count } = await prisma.channelMovie.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ChannelMovieDeleteManyArgs>(args?: Prisma.SelectSubset<T, ChannelMovieDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ChannelMovies.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChannelMovieUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many ChannelMovies
   * const channelMovie = await prisma.channelMovie.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ChannelMovieUpdateManyArgs>(args: Prisma.SelectSubset<T, ChannelMovieUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ChannelMovies and returns the data updated in the database.
   * @param {ChannelMovieUpdateManyAndReturnArgs} args - Arguments to update many ChannelMovies.
   * @example
   * // Update many ChannelMovies
   * const channelMovie = await prisma.channelMovie.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more ChannelMovies and only return the `id`
   * const channelMovieWithIdOnly = await prisma.channelMovie.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ChannelMovieUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ChannelMovieUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ChannelMoviePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one ChannelMovie.
   * @param {ChannelMovieUpsertArgs} args - Arguments to update or create a ChannelMovie.
   * @example
   * // Update or create a ChannelMovie
   * const channelMovie = await prisma.channelMovie.upsert({
   *   create: {
   *     // ... data to create a ChannelMovie
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the ChannelMovie we want to update
   *   }
   * })
   */
  upsert<T extends ChannelMovieUpsertArgs>(args: Prisma.SelectSubset<T, ChannelMovieUpsertArgs<ExtArgs>>): Prisma.Prisma__ChannelMovieClient<runtime.Types.Result.GetResult<Prisma.$ChannelMoviePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of ChannelMovies.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChannelMovieCountArgs} args - Arguments to filter ChannelMovies to count.
   * @example
   * // Count the number of ChannelMovies
   * const count = await prisma.channelMovie.count({
   *   where: {
   *     // ... the filter for the ChannelMovies we want to count
   *   }
   * })
  **/
  count<T extends ChannelMovieCountArgs>(
    args?: Prisma.Subset<T, ChannelMovieCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ChannelMovieCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a ChannelMovie.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChannelMovieAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ChannelMovieAggregateArgs>(args: Prisma.Subset<T, ChannelMovieAggregateArgs>): Prisma.PrismaPromise<GetChannelMovieAggregateType<T>>

  /**
   * Group by ChannelMovie.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChannelMovieGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ChannelMovieGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ChannelMovieGroupByArgs['orderBy'] }
      : { orderBy?: ChannelMovieGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ChannelMovieGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChannelMovieGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the ChannelMovie model
 */
readonly fields: ChannelMovieFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for ChannelMovie.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ChannelMovieClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  channel<T extends Prisma.ChannelDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ChannelDefaultArgs<ExtArgs>>): Prisma.Prisma__ChannelClient<runtime.Types.Result.GetResult<Prisma.$ChannelPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  movie<T extends Prisma.MediaMovieDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.MediaMovieDefaultArgs<ExtArgs>>): Prisma.Prisma__MediaMovieClient<runtime.Types.Result.GetResult<Prisma.$MediaMoviePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the ChannelMovie model
 */
export interface ChannelMovieFieldRefs {
  readonly id: Prisma.FieldRef<"ChannelMovie", 'String'>
  readonly channelId: Prisma.FieldRef<"ChannelMovie", 'String'>
  readonly movieId: Prisma.FieldRef<"ChannelMovie", 'String'>
  readonly order: Prisma.FieldRef<"ChannelMovie", 'Int'>
  readonly weight: Prisma.FieldRef<"ChannelMovie", 'Int'>
  readonly shuffle: Prisma.FieldRef<"ChannelMovie", 'Boolean'>
  readonly maxConsecutiveMovies: Prisma.FieldRef<"ChannelMovie", 'Int'>
  readonly createdAt: Prisma.FieldRef<"ChannelMovie", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"ChannelMovie", 'DateTime'>
}
    

// Custom InputTypes
/**
 * ChannelMovie findUnique
 */
export type ChannelMovieFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChannelMovie
   */
  select?: Prisma.ChannelMovieSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ChannelMovie
   */
  omit?: Prisma.ChannelMovieOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChannelMovieInclude<ExtArgs> | null
  /**
   * Filter, which ChannelMovie to fetch.
   */
  where: Prisma.ChannelMovieWhereUniqueInput
}

/**
 * ChannelMovie findUniqueOrThrow
 */
export type ChannelMovieFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChannelMovie
   */
  select?: Prisma.ChannelMovieSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ChannelMovie
   */
  omit?: Prisma.ChannelMovieOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChannelMovieInclude<ExtArgs> | null
  /**
   * Filter, which ChannelMovie to fetch.
   */
  where: Prisma.ChannelMovieWhereUniqueInput
}

/**
 * ChannelMovie findFirst
 */
export type ChannelMovieFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChannelMovie
   */
  select?: Prisma.ChannelMovieSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ChannelMovie
   */
  omit?: Prisma.ChannelMovieOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChannelMovieInclude<ExtArgs> | null
  /**
   * Filter, which ChannelMovie to fetch.
   */
  where?: Prisma.ChannelMovieWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ChannelMovies to fetch.
   */
  orderBy?: Prisma.ChannelMovieOrderByWithRelationInput | Prisma.ChannelMovieOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ChannelMovies.
   */
  cursor?: Prisma.ChannelMovieWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ChannelMovies from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ChannelMovies.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ChannelMovies.
   */
  distinct?: Prisma.ChannelMovieScalarFieldEnum | Prisma.ChannelMovieScalarFieldEnum[]
}

/**
 * ChannelMovie findFirstOrThrow
 */
export type ChannelMovieFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChannelMovie
   */
  select?: Prisma.ChannelMovieSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ChannelMovie
   */
  omit?: Prisma.ChannelMovieOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChannelMovieInclude<ExtArgs> | null
  /**
   * Filter, which ChannelMovie to fetch.
   */
  where?: Prisma.ChannelMovieWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ChannelMovies to fetch.
   */
  orderBy?: Prisma.ChannelMovieOrderByWithRelationInput | Prisma.ChannelMovieOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ChannelMovies.
   */
  cursor?: Prisma.ChannelMovieWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ChannelMovies from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ChannelMovies.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ChannelMovies.
   */
  distinct?: Prisma.ChannelMovieScalarFieldEnum | Prisma.ChannelMovieScalarFieldEnum[]
}

/**
 * ChannelMovie findMany
 */
export type ChannelMovieFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChannelMovie
   */
  select?: Prisma.ChannelMovieSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ChannelMovie
   */
  omit?: Prisma.ChannelMovieOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChannelMovieInclude<ExtArgs> | null
  /**
   * Filter, which ChannelMovies to fetch.
   */
  where?: Prisma.ChannelMovieWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ChannelMovies to fetch.
   */
  orderBy?: Prisma.ChannelMovieOrderByWithRelationInput | Prisma.ChannelMovieOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing ChannelMovies.
   */
  cursor?: Prisma.ChannelMovieWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ChannelMovies from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ChannelMovies.
   */
  skip?: number
  distinct?: Prisma.ChannelMovieScalarFieldEnum | Prisma.ChannelMovieScalarFieldEnum[]
}

/**
 * ChannelMovie create
 */
export type ChannelMovieCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChannelMovie
   */
  select?: Prisma.ChannelMovieSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ChannelMovie
   */
  omit?: Prisma.ChannelMovieOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChannelMovieInclude<ExtArgs> | null
  /**
   * The data needed to create a ChannelMovie.
   */
  data: Prisma.XOR<Prisma.ChannelMovieCreateInput, Prisma.ChannelMovieUncheckedCreateInput>
}

/**
 * ChannelMovie createMany
 */
export type ChannelMovieCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many ChannelMovies.
   */
  data: Prisma.ChannelMovieCreateManyInput | Prisma.ChannelMovieCreateManyInput[]
}

/**
 * ChannelMovie createManyAndReturn
 */
export type ChannelMovieCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChannelMovie
   */
  select?: Prisma.ChannelMovieSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ChannelMovie
   */
  omit?: Prisma.ChannelMovieOmit<ExtArgs> | null
  /**
   * The data used to create many ChannelMovies.
   */
  data: Prisma.ChannelMovieCreateManyInput | Prisma.ChannelMovieCreateManyInput[]
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChannelMovieIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * ChannelMovie update
 */
export type ChannelMovieUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChannelMovie
   */
  select?: Prisma.ChannelMovieSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ChannelMovie
   */
  omit?: Prisma.ChannelMovieOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChannelMovieInclude<ExtArgs> | null
  /**
   * The data needed to update a ChannelMovie.
   */
  data: Prisma.XOR<Prisma.ChannelMovieUpdateInput, Prisma.ChannelMovieUncheckedUpdateInput>
  /**
   * Choose, which ChannelMovie to update.
   */
  where: Prisma.ChannelMovieWhereUniqueInput
}

/**
 * ChannelMovie updateMany
 */
export type ChannelMovieUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update ChannelMovies.
   */
  data: Prisma.XOR<Prisma.ChannelMovieUpdateManyMutationInput, Prisma.ChannelMovieUncheckedUpdateManyInput>
  /**
   * Filter which ChannelMovies to update
   */
  where?: Prisma.ChannelMovieWhereInput
  /**
   * Limit how many ChannelMovies to update.
   */
  limit?: number
}

/**
 * ChannelMovie updateManyAndReturn
 */
export type ChannelMovieUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChannelMovie
   */
  select?: Prisma.ChannelMovieSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ChannelMovie
   */
  omit?: Prisma.ChannelMovieOmit<ExtArgs> | null
  /**
   * The data used to update ChannelMovies.
   */
  data: Prisma.XOR<Prisma.ChannelMovieUpdateManyMutationInput, Prisma.ChannelMovieUncheckedUpdateManyInput>
  /**
   * Filter which ChannelMovies to update
   */
  where?: Prisma.ChannelMovieWhereInput
  /**
   * Limit how many ChannelMovies to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChannelMovieIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * ChannelMovie upsert
 */
export type ChannelMovieUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChannelMovie
   */
  select?: Prisma.ChannelMovieSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ChannelMovie
   */
  omit?: Prisma.ChannelMovieOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChannelMovieInclude<ExtArgs> | null
  /**
   * The filter to search for the ChannelMovie to update in case it exists.
   */
  where: Prisma.ChannelMovieWhereUniqueInput
  /**
   * In case the ChannelMovie found by the `where` argument doesn't exist, create a new ChannelMovie with this data.
   */
  create: Prisma.XOR<Prisma.ChannelMovieCreateInput, Prisma.ChannelMovieUncheckedCreateInput>
  /**
   * In case the ChannelMovie was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ChannelMovieUpdateInput, Prisma.ChannelMovieUncheckedUpdateInput>
}

/**
 * ChannelMovie delete
 */
export type ChannelMovieDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChannelMovie
   */
  select?: Prisma.ChannelMovieSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ChannelMovie
   */
  omit?: Prisma.ChannelMovieOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChannelMovieInclude<ExtArgs> | null
  /**
   * Filter which ChannelMovie to delete.
   */
  where: Prisma.ChannelMovieWhereUniqueInput
}

/**
 * ChannelMovie deleteMany
 */
export type ChannelMovieDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ChannelMovies to delete
   */
  where?: Prisma.ChannelMovieWhereInput
  /**
   * Limit how many ChannelMovies to delete.
   */
  limit?: number
}

/**
 * ChannelMovie without action
 */
export type ChannelMovieDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChannelMovie
   */
  select?: Prisma.ChannelMovieSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ChannelMovie
   */
  omit?: Prisma.ChannelMovieOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChannelMovieInclude<ExtArgs> | null
}
